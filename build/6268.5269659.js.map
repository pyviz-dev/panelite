{"version":3,"file":"6268.5269659.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/codeeditor/lib/editor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/codeeditor/lib/jsoneditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/codeeditor/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/codeeditor/lib/mimetype.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/codeeditor/lib/tokens.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\nimport { ModelDB } from '@jupyterlab/observables';\n/**\n * A namespace for code editors.\n *\n * #### Notes\n * - A code editor is a set of common assumptions which hold for all concrete editors.\n * - Changes in implementations of the code editor should only be caused by changes in concrete editors.\n * - Common JLab services which are based on the code editor should belong to `IEditorServices`.\n */\nexport var CodeEditor;\n(function (CodeEditor) {\n    /**\n     * The default selection style.\n     */\n    CodeEditor.defaultSelectionStyle = {\n        className: '',\n        displayName: '',\n        color: 'black'\n    };\n    /**\n     * The default implementation of the editor model.\n     */\n    class Model {\n        /**\n         * Construct a new Model.\n         */\n        constructor(options) {\n            this._isDisposed = false;\n            this._mimeTypeChanged = new Signal(this);\n            options = options || {};\n            if (options.modelDB) {\n                this.modelDB = options.modelDB;\n            }\n            else {\n                this.modelDB = new ModelDB();\n            }\n            const value = this.modelDB.createString('value');\n            value.text = value.text || options.value || '';\n            const mimeType = this.modelDB.createValue('mimeType');\n            mimeType.set(options.mimeType || 'text/plain');\n            mimeType.changed.connect(this._onMimeTypeChanged, this);\n            this.modelDB.createMap('selections');\n        }\n        /**\n         * A signal emitted when a mimetype changes.\n         */\n        get mimeTypeChanged() {\n            return this._mimeTypeChanged;\n        }\n        /**\n         * Get the value of the model.\n         */\n        get value() {\n            return this.modelDB.get('value');\n        }\n        /**\n         * Get the selections for the model.\n         */\n        get selections() {\n            return this.modelDB.get('selections');\n        }\n        /**\n         * A mime type of the model.\n         */\n        get mimeType() {\n            return this.modelDB.getValue('mimeType');\n        }\n        set mimeType(newValue) {\n            const oldValue = this.mimeType;\n            if (oldValue === newValue) {\n                return;\n            }\n            this.modelDB.setValue('mimeType', newValue);\n        }\n        /**\n         * Whether the model is disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n        /**\n         * Dispose of the resources used by the model.\n         */\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this.value.text = '';\n            Signal.clearData(this);\n        }\n        _onMimeTypeChanged(mimeType, args) {\n            this._mimeTypeChanged.emit({\n                name: 'mimeType',\n                oldValue: args.oldValue,\n                newValue: args.newValue\n            });\n        }\n    }\n    CodeEditor.Model = Model;\n    /**\n     * The default configuration options for an editor.\n     */\n    CodeEditor.defaultConfig = {\n        fontFamily: null,\n        fontSize: null,\n        lineHeight: null,\n        lineNumbers: false,\n        lineWrap: 'on',\n        wordWrapColumn: 80,\n        readOnly: false,\n        tabSize: 4,\n        insertSpaces: true,\n        matchBrackets: true,\n        autoClosingBrackets: true,\n        handlePaste: true,\n        rulers: [],\n        codeFolding: false\n    };\n})(CodeEditor || (CodeEditor = {}));\n//# sourceMappingURL=editor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { checkIcon, undoIcon } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditor } from './editor';\n/**\n * The class name added to a JSONEditor instance.\n */\nconst JSONEDITOR_CLASS = 'jp-JSONEditor';\n/**\n * The class name added when the Metadata editor contains invalid JSON.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n/**\n * The class name added to the editor host node.\n */\nconst HOST_CLASS = 'jp-JSONEditor-host';\n/**\n * The class name added to the header area.\n */\nconst HEADER_CLASS = 'jp-JSONEditor-header';\n/**\n * A widget for editing observable JSON.\n */\nexport class JSONEditor extends Widget {\n    /**\n     * Construct a new JSON editor.\n     */\n    constructor(options) {\n        super();\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this._source = null;\n        this._originalValue = JSONExt.emptyObject;\n        this._changeGuard = false;\n        this.addClass(JSONEDITOR_CLASS);\n        this.headerNode = document.createElement('div');\n        this.headerNode.className = HEADER_CLASS;\n        this.revertButtonNode = undoIcon.element({\n            tag: 'span',\n            title: 'Revert changes to data'\n        });\n        this.commitButtonNode = checkIcon.element({\n            tag: 'span',\n            title: 'Commit changes to data',\n            marginLeft: '8px'\n        });\n        this.editorHostNode = document.createElement('div');\n        this.editorHostNode.className = HOST_CLASS;\n        this.headerNode.appendChild(this.revertButtonNode);\n        this.headerNode.appendChild(this.commitButtonNode);\n        this.node.appendChild(this.headerNode);\n        this.node.appendChild(this.editorHostNode);\n        const model = new CodeEditor.Model();\n        model.value.text = 'No data!';\n        model.mimeType = 'application/json';\n        model.value.changed.connect(this._onValueChanged, this);\n        this.model = model;\n        this.editor = options.editorFactory({ host: this.editorHostNode, model });\n        this.editor.setOption('readOnly', true);\n    }\n    /**\n     * The observable source.\n     */\n    get source() {\n        return this._source;\n    }\n    set source(value) {\n        if (this._source === value) {\n            return;\n        }\n        if (this._source) {\n            this._source.changed.disconnect(this._onSourceChanged, this);\n        }\n        this._source = value;\n        this.editor.setOption('readOnly', value === null);\n        if (value) {\n            value.changed.connect(this._onSourceChanged, this);\n        }\n        this._setValue();\n    }\n    /**\n     * Get whether the editor is dirty.\n     */\n    get isDirty() {\n        return this._dataDirty || this._inputDirty;\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'blur':\n                this._evtBlur(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        const node = this.editorHostNode;\n        node.addEventListener('blur', this, true);\n        node.addEventListener('click', this, true);\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.headerNode.addEventListener('click', this);\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `after-show` messages for the widget.\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages for the widget.\n     */\n    onUpdateRequest(msg) {\n        this.editor.refresh();\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.editorHostNode;\n        node.removeEventListener('blur', this, true);\n        node.removeEventListener('click', this, true);\n        this.headerNode.removeEventListener('click', this);\n    }\n    /**\n     * Handle a change to the metadata of the source.\n     */\n    _onSourceChanged(sender, args) {\n        if (this._changeGuard) {\n            return;\n        }\n        if (this._inputDirty || this.editor.hasFocus()) {\n            this._dataDirty = true;\n            return;\n        }\n        this._setValue();\n    }\n    /**\n     * Handle change events.\n     */\n    _onValueChanged() {\n        let valid = true;\n        try {\n            const value = JSON.parse(this.editor.model.value.text);\n            this.removeClass(ERROR_CLASS);\n            this._inputDirty =\n                !this._changeGuard && !JSONExt.deepEqual(value, this._originalValue);\n        }\n        catch (err) {\n            this.addClass(ERROR_CLASS);\n            this._inputDirty = true;\n            valid = false;\n        }\n        this.revertButtonNode.hidden = !this._inputDirty;\n        this.commitButtonNode.hidden = !valid || !this._inputDirty;\n    }\n    /**\n     * Handle blur events for the text area.\n     */\n    _evtBlur(event) {\n        // Update the metadata if necessary.\n        if (!this._inputDirty && this._dataDirty) {\n            this._setValue();\n        }\n    }\n    /**\n     * Handle click events for the buttons.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        if (this.revertButtonNode.contains(target)) {\n            this._setValue();\n        }\n        else if (this.commitButtonNode.contains(target)) {\n            if (!this.commitButtonNode.hidden && !this.hasClass(ERROR_CLASS)) {\n                this._changeGuard = true;\n                this._mergeContent();\n                this._changeGuard = false;\n                this._setValue();\n            }\n        }\n        else if (this.editorHostNode.contains(target)) {\n            this.editor.focus();\n        }\n    }\n    /**\n     * Merge the user content.\n     */\n    _mergeContent() {\n        const model = this.editor.model;\n        const old = this._originalValue;\n        const user = JSON.parse(model.value.text);\n        const source = this.source;\n        if (!source) {\n            return;\n        }\n        // If it is in user and has changed from old, set in new.\n        for (const key in user) {\n            if (!JSONExt.deepEqual(user[key], old[key] || null)) {\n                source.set(key, user[key]);\n            }\n        }\n        // If it was in old and is not in user, remove from source.\n        for (const key in old) {\n            if (!(key in user)) {\n                source.delete(key);\n            }\n        }\n    }\n    /**\n     * Set the value given the owner contents.\n     */\n    _setValue() {\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.removeClass(ERROR_CLASS);\n        const model = this.editor.model;\n        const content = this._source ? this._source.toJSON() : {};\n        this._changeGuard = true;\n        if (content === void 0) {\n            model.value.text = 'No data!';\n            this._originalValue = JSONExt.emptyObject;\n        }\n        else {\n            const value = JSON.stringify(content, null, 4);\n            model.value.text = value;\n            this._originalValue = content;\n            // Move the cursor to within the brace.\n            if (value.length > 1 && value[0] === '{') {\n                this.editor.setCursorPosition({ line: 0, column: 1 });\n            }\n        }\n        this.editor.refresh();\n        this._changeGuard = false;\n        this.commitButtonNode.hidden = true;\n        this.revertButtonNode.hidden = true;\n    }\n}\n//# sourceMappingURL=jsoneditor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to an editor widget that has a primary selection.\n */\nconst HAS_SELECTION_CLASS = 'jp-mod-has-primary-selection';\n/**\n * The class name added to an editor widget that has a cursor/selection\n * within the whitespace at the beginning of a line\n */\nconst HAS_IN_LEADING_WHITESPACE_CLASS = 'jp-mod-in-leading-whitespace';\n/**\n * A class used to indicate a drop target.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * RegExp to test for leading whitespace\n */\nconst leadingWhitespaceRe = /^\\s+$/;\n/**\n * A widget which hosts a code editor.\n */\nexport class CodeEditorWrapper extends Widget {\n    /**\n     * Construct a new code editor widget.\n     */\n    constructor(options) {\n        super();\n        this._hasRefreshedSinceAttach = false;\n        const editor = (this.editor = options.factory({\n            host: this.node,\n            model: options.model,\n            uuid: options.uuid,\n            config: options.config,\n            selectionStyle: options.selectionStyle\n        }));\n        editor.model.selections.changed.connect(this._onSelectionsChanged, this);\n        this._updateOnShow = options.updateOnShow !== false;\n    }\n    /**\n     * Get the model used by the widget.\n     */\n    get model() {\n        return this.editor.model;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this.editor.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        // We have to refresh at least once after attaching,\n        // while visible.\n        this._hasRefreshedSinceAttach = false;\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._updateOnShow || !this._hasRefreshedSinceAttach) {\n            this.update();\n        }\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (msg.width >= 0 && msg.height >= 0) {\n            this.editor.setSize(msg);\n        }\n        else if (this.isVisible) {\n            this.editor.resizeToFit();\n        }\n    }\n    /**\n     * A message handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        if (this.isVisible) {\n            this._hasRefreshedSinceAttach = true;\n            this.editor.refresh();\n        }\n    }\n    /**\n     * Handle a change in model selections.\n     */\n    _onSelectionsChanged() {\n        const { start, end } = this.editor.getSelection();\n        if (start.column !== end.column || start.line !== end.line) {\n            // a selection was made\n            this.addClass(HAS_SELECTION_CLASS);\n            this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n        }\n        else {\n            // the cursor was placed\n            this.removeClass(HAS_SELECTION_CLASS);\n            if (this.editor\n                .getLine(end.line)\n                .slice(0, end.column)\n                .match(leadingWhitespaceRe)) {\n                this.addClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n            else {\n                this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.addClass('jp-mod-dropTarget');\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = 'copy';\n        this.addClass(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        const coordinate = {\n            top: event.y,\n            bottom: event.y,\n            left: event.x,\n            right: event.x,\n            x: event.x,\n            y: event.y,\n            width: 0,\n            height: 0\n        };\n        const position = this.editor.getPositionForCoordinate(coordinate);\n        if (position === null) {\n            return;\n        }\n        this.removeClass(DROP_TARGET_CLASS);\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        const offset = this.editor.getOffsetAt(position);\n        this.model.value.insert(offset, data);\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Given a MimeData instance, extract the first text data, if any.\n     */\n    function findTextData(mime) {\n        const types = mime.types();\n        const textType = types.find(t => t.indexOf('text') === 0);\n        if (textType === undefined) {\n            return undefined;\n        }\n        return mime.getData(textType);\n    }\n    Private.findTextData = findTextData;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * A namespace for `IEditorMimeTypeService`.\n */\nexport var IEditorMimeTypeService;\n(function (IEditorMimeTypeService) {\n    /**\n     * The default mime type.\n     */\n    IEditorMimeTypeService.defaultMimeType = 'text/plain';\n})(IEditorMimeTypeService || (IEditorMimeTypeService = {}));\n//# sourceMappingURL=mimetype.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * Code editor services token.\n */\nexport const IEditorServices = new Token('@jupyterlab/codeeditor:IEditorServices');\n//# sourceMappingURL=tokens.js.map"],"names":["CodeEditor","defaultSelectionStyle","className","displayName","color","Model","constructor","options","this","_isDisposed","_mimeTypeChanged","Signal","modelDB","ModelDB","value","createString","text","mimeType","createValue","set","changed","connect","_onMimeTypeChanged","createMap","mimeTypeChanged","get","selections","getValue","newValue","setValue","isDisposed","dispose","args","emit","name","oldValue","defaultConfig","fontFamily","fontSize","lineHeight","lineNumbers","lineWrap","wordWrapColumn","readOnly","tabSize","insertSpaces","matchBrackets","autoClosingBrackets","handlePaste","rulers","codeFolding","ERROR_CLASS","JSONEditor","Widget","super","_dataDirty","_inputDirty","_source","_originalValue","JSONExt","_changeGuard","addClass","headerNode","document","createElement","revertButtonNode","undoIcon","tag","title","commitButtonNode","checkIcon","marginLeft","editorHostNode","appendChild","node","model","_onValueChanged","editor","editorFactory","host","setOption","source","disconnect","_onSourceChanged","_setValue","isDirty","handleEvent","event","type","_evtBlur","_evtClick","onAfterAttach","msg","addEventListener","hidden","isVisible","update","onAfterShow","onUpdateRequest","refresh","onBeforeDetach","removeEventListener","sender","hasFocus","valid","JSON","parse","removeClass","err","target","contains","hasClass","_mergeContent","focus","old","user","key","delete","content","toJSON","stringify","length","setCursorPosition","line","column","HAS_SELECTION_CLASS","HAS_IN_LEADING_WHITESPACE_CLASS","DROP_TARGET_CLASS","leadingWhitespaceRe","CodeEditorWrapper","_hasRefreshedSinceAttach","factory","uuid","config","selectionStyle","_onSelectionsChanged","_updateOnShow","updateOnShow","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onActivateRequest","onResize","width","height","setSize","resizeToFit","start","end","getSelection","getLine","slice","match","getOption","undefined","Private","findTextData","mimeData","preventDefault","stopPropagation","dropAction","data","coordinate","top","y","bottom","left","x","right","position","getPositionForCoordinate","proposedAction","offset","getOffsetAt","insert","IEditorMimeTypeService","mime","textType","types","find","t","indexOf","getData","defaultMimeType","IEditorServices","Token"],"sourceRoot":""}