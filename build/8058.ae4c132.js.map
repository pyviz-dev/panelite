{"version":3,"file":"8058.ae4c132.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docmanager/lib/dialogs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docmanager/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docmanager/lib/savehandler.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docmanager/lib/widgetmanager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docmanager/lib/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docmanager/lib/savingstatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docmanager/lib/pathstatus.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to file dialogs.\n */\nconst FILE_DIALOG_CLASS = 'jp-FileDialog';\n/**\n * The class name added for the new name label in the rename dialog\n */\nconst RENAME_NEWNAME_TITLE_CLASS = 'jp-new-name-title';\n/**\n * Rename a file with a dialog.\n */\nexport function renameDialog(manager, oldPath) {\n    return showDialog({\n        title: 'Rename File',\n        body: new RenameHandler(oldPath),\n        focusNodeSelector: 'input',\n        buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'Rename' })]\n    }).then(result => {\n        if (!result.value) {\n            return null;\n        }\n        if (!isValidFileName(result.value)) {\n            void showErrorMessage('Rename Error', Error(`\"${result.value}\" is not a valid name for a file. ` +\n                `Names must have nonzero length, ` +\n                `and cannot include \"/\", \"\\\\\", or \":\"`));\n            return null;\n        }\n        const basePath = PathExt.dirname(oldPath);\n        const newPath = PathExt.join(basePath, result.value);\n        return renameFile(manager, oldPath, newPath);\n    });\n}\n/**\n * Rename a file, asking for confirmation if it is overwriting another.\n */\nexport function renameFile(manager, oldPath, newPath) {\n    return manager.rename(oldPath, newPath).catch(error => {\n        if (error.message.indexOf('409') === -1) {\n            throw error;\n        }\n        return shouldOverwrite(newPath).then(value => {\n            if (value) {\n                return manager.overwrite(oldPath, newPath);\n            }\n            return Promise.reject('File not renamed');\n        });\n    });\n}\n/**\n * Ask the user whether to overwrite a file.\n */\nexport function shouldOverwrite(path) {\n    const options = {\n        title: 'Overwrite file?',\n        body: `\"${path}\" already exists, overwrite?`,\n        buttons: [Dialog.cancelButton(), Dialog.warnButton({ label: 'Overwrite' })]\n    };\n    return showDialog(options).then(result => {\n        return Promise.resolve(result.button.accept);\n    });\n}\n/**\n * Test whether a name is a valid file name\n *\n * Disallows \"/\", \"\\\", and \":\" in file names, as well as names with zero length.\n */\nexport function isValidFileName(name) {\n    const validNameExp = /[\\/\\\\:]/;\n    return name.length > 0 && !validNameExp.test(name);\n}\n/**\n * A widget used to rename a file.\n */\nclass RenameHandler extends Widget {\n    /**\n     * Construct a new \"rename\" dialog.\n     */\n    constructor(oldPath) {\n        super({ node: Private.createRenameNode(oldPath) });\n        this.addClass(FILE_DIALOG_CLASS);\n        const ext = PathExt.extname(oldPath);\n        const value = (this.inputNode.value = PathExt.basename(oldPath));\n        this.inputNode.setSelectionRange(0, value.length - ext.length);\n    }\n    /**\n     * Get the input text node.\n     */\n    get inputNode() {\n        return this.node.getElementsByTagName('input')[0];\n    }\n    /**\n     * Get the value of the widget.\n     */\n    getValue() {\n        return this.inputNode.value;\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the node for a rename handler.\n     */\n    function createRenameNode(oldPath) {\n        const body = document.createElement('div');\n        const existingLabel = document.createElement('label');\n        existingLabel.textContent = 'File Path';\n        const existingPath = document.createElement('span');\n        existingPath.textContent = oldPath;\n        const nameTitle = document.createElement('label');\n        nameTitle.textContent = 'New Name';\n        nameTitle.className = RENAME_NEWNAME_TITLE_CLASS;\n        const name = document.createElement('input');\n        body.appendChild(existingLabel);\n        body.appendChild(existingPath);\n        body.appendChild(nameTitle);\n        body.appendChild(name);\n        return body;\n    }\n    Private.createRenameNode = createRenameNode;\n})(Private || (Private = {}));\n//# sourceMappingURL=dialogs.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The document registry token.\n */\nexport const IDocumentManager = new Token('@jupyterlab/docmanager:IDocumentManager');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A class that manages the auto saving of a document.\n *\n * #### Notes\n * Implements https://github.com/ipython/ipython/wiki/IPEP-15:-Autosaving-the-IPython-Notebook.\n */\nexport class SaveHandler {\n    /**\n     * Construct a new save handler.\n     */\n    constructor(options) {\n        this._autosaveTimer = -1;\n        this._minInterval = -1;\n        this._interval = -1;\n        this._isActive = false;\n        this._inDialog = false;\n        this._isDisposed = false;\n        this._multiplier = 10;\n        this._context = options.context;\n        const interval = options.saveInterval || 120;\n        this._minInterval = interval * 1000;\n        this._interval = this._minInterval;\n        // Restart the timer when the contents model is updated.\n        this._context.fileChanged.connect(this._setTimer, this);\n        this._context.disposed.connect(this.dispose, this);\n    }\n    /**\n     * The save interval used by the timer (in seconds).\n     */\n    get saveInterval() {\n        return this._interval / 1000;\n    }\n    set saveInterval(value) {\n        this._minInterval = this._interval = value * 1000;\n        if (this._isActive) {\n            this._setTimer();\n        }\n    }\n    /**\n     * Get whether the handler is active.\n     */\n    get isActive() {\n        return this._isActive;\n    }\n    /**\n     * Get whether the save handler is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the save handler.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        clearTimeout(this._autosaveTimer);\n        Signal.clearData(this);\n    }\n    /**\n     * Start the autosaver.\n     */\n    start() {\n        this._isActive = true;\n        this._setTimer();\n    }\n    /**\n     * Stop the autosaver.\n     */\n    stop() {\n        this._isActive = false;\n        clearTimeout(this._autosaveTimer);\n    }\n    /**\n     * Set the timer.\n     */\n    _setTimer() {\n        clearTimeout(this._autosaveTimer);\n        if (!this._isActive) {\n            return;\n        }\n        this._autosaveTimer = window.setTimeout(() => {\n            this._save();\n        }, this._interval);\n    }\n    /**\n     * Handle an autosave timeout.\n     */\n    _save() {\n        const context = this._context;\n        // Trigger the next update.\n        this._setTimer();\n        if (!context) {\n            return;\n        }\n        // Bail if the model is not dirty or the file is not writable, or the dialog\n        // is already showing.\n        const writable = context.contentsModel && context.contentsModel.writable;\n        if (!writable || !context.model.dirty || this._inDialog) {\n            return;\n        }\n        const start = new Date().getTime();\n        context\n            .save()\n            .then(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            const duration = new Date().getTime() - start;\n            // New save interval: higher of 10x save duration or min interval.\n            this._interval = Math.max(this._multiplier * duration, this._minInterval);\n            // Restart the update to pick up the new interval.\n            this._setTimer();\n        })\n            .catch(err => {\n            // If the user canceled the save, do nothing.\n            if (err.message === 'Cancel') {\n                return;\n            }\n            // Otherwise, log the error.\n            console.error('Error in Auto-Save', err.message);\n        });\n    }\n}\n//# sourceMappingURL=savehandler.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, each, map, find, filter, toArray } from '@lumino/algorithm';\nimport { DisposableSet } from '@lumino/disposable';\nimport { MessageLoop } from '@lumino/messaging';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { Time } from '@jupyterlab/coreutils';\nimport { showDialog, Dialog } from '@jupyterlab/apputils';\n/**\n * The class name added to document widgets.\n */\nconst DOCUMENT_CLASS = 'jp-Document';\n/**\n * A class that maintains the lifecycle of file-backed widgets.\n */\nexport class DocumentWidgetManager {\n    /**\n     * Construct a new document widget manager.\n     */\n    constructor(options) {\n        this._activateRequested = new Signal(this);\n        this._isDisposed = false;\n        this._registry = options.registry;\n    }\n    /**\n     * A signal emitted when one of the documents is activated.\n     */\n    get activateRequested() {\n        return this._activateRequested;\n    }\n    /**\n     * Test whether the document widget manager is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the widget manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.disconnectReceiver(this);\n    }\n    /**\n     * Create a widget for a document and handle its lifecycle.\n     *\n     * @param factory - The widget factory.\n     *\n     * @param context - The document context object.\n     *\n     * @returns A widget created by the factory.\n     *\n     * @throws If the factory is not registered.\n     */\n    createWidget(factory, context) {\n        const widget = factory.createNew(context);\n        this._initializeWidget(widget, factory, context);\n        return widget;\n    }\n    /**\n     * When a new widget is created, we need to hook it up\n     * with some signals, update the widget extensions (for\n     * this kind of widget) in the docregistry, among\n     * other things.\n     */\n    _initializeWidget(widget, factory, context) {\n        Private.factoryProperty.set(widget, factory);\n        // Handle widget extensions.\n        const disposables = new DisposableSet();\n        each(this._registry.widgetExtensions(factory.name), extender => {\n            disposables.add(extender.createNew(widget, context));\n        });\n        Private.disposablesProperty.set(widget, disposables);\n        widget.disposed.connect(this._onWidgetDisposed, this);\n        this.adoptWidget(context, widget);\n        context.fileChanged.connect(this._onFileChanged, this);\n        context.pathChanged.connect(this._onPathChanged, this);\n        void context.ready.then(() => {\n            void this.setCaption(widget);\n        });\n    }\n    /**\n     * Install the message hook for the widget and add to list\n     * of known widgets.\n     *\n     * @param context - The document context object.\n     *\n     * @param widget - The widget to adopt.\n     */\n    adoptWidget(context, widget) {\n        const widgets = Private.widgetsProperty.get(context);\n        widgets.push(widget);\n        MessageLoop.installMessageHook(widget, this);\n        widget.addClass(DOCUMENT_CLASS);\n        widget.title.closable = true;\n        widget.disposed.connect(this._widgetDisposed, this);\n        Private.contextProperty.set(widget, context);\n    }\n    /**\n     * See if a widget already exists for the given context and widget name.\n     *\n     * @param context - The document context object.\n     *\n     * @returns The found widget, or `undefined`.\n     *\n     * #### Notes\n     * This can be used to use an existing widget instead of opening\n     * a new widget.\n     */\n    findWidget(context, widgetName) {\n        const widgets = Private.widgetsProperty.get(context);\n        if (!widgets) {\n            return undefined;\n        }\n        return find(widgets, widget => {\n            const factory = Private.factoryProperty.get(widget);\n            if (!factory) {\n                return false;\n            }\n            return factory.name === widgetName;\n        });\n    }\n    /**\n     * Get the document context for a widget.\n     *\n     * @param widget - The widget of interest.\n     *\n     * @returns The context associated with the widget, or `undefined`.\n     */\n    contextForWidget(widget) {\n        return Private.contextProperty.get(widget);\n    }\n    /**\n     * Clone a widget.\n     *\n     * @param widget - The source widget.\n     *\n     * @returns A new widget or `undefined`.\n     *\n     * #### Notes\n     *  Uses the same widget factory and context as the source, or throws\n     *  if the source widget is not managed by this manager.\n     */\n    cloneWidget(widget) {\n        const context = Private.contextProperty.get(widget);\n        if (!context) {\n            return undefined;\n        }\n        const factory = Private.factoryProperty.get(widget);\n        if (!factory) {\n            return undefined;\n        }\n        const newWidget = factory.createNew(context, widget);\n        this._initializeWidget(newWidget, factory, context);\n        return newWidget;\n    }\n    /**\n     * Close the widgets associated with a given context.\n     *\n     * @param context - The document context object.\n     */\n    closeWidgets(context) {\n        const widgets = Private.widgetsProperty.get(context);\n        return Promise.all(toArray(map(widgets, widget => this.onClose(widget)))).then(() => undefined);\n    }\n    /**\n     * Dispose of the widgets associated with a given context\n     * regardless of the widget's dirty state.\n     *\n     * @param context - The document context object.\n     */\n    deleteWidgets(context) {\n        const widgets = Private.widgetsProperty.get(context);\n        return Promise.all(toArray(map(widgets, widget => this.onDelete(widget)))).then(() => undefined);\n    }\n    /**\n     * Filter a message sent to a message handler.\n     *\n     * @param handler - The target handler of the message.\n     *\n     * @param msg - The message dispatched to the handler.\n     *\n     * @returns `false` if the message should be filtered, of `true`\n     *   if the message should be dispatched to the handler as normal.\n     */\n    messageHook(handler, msg) {\n        switch (msg.type) {\n            case 'close-request':\n                void this.onClose(handler);\n                return false;\n            case 'activate-request':\n                const context = this.contextForWidget(handler);\n                if (context) {\n                    this._activateRequested.emit(context.path);\n                }\n                break;\n            default:\n                break;\n        }\n        return true;\n    }\n    /**\n     * Set the caption for widget title.\n     *\n     * @param widget - The target widget.\n     */\n    async setCaption(widget) {\n        const context = Private.contextProperty.get(widget);\n        if (!context) {\n            return;\n        }\n        const model = context.contentsModel;\n        if (!model) {\n            widget.title.caption = '';\n            return;\n        }\n        return context\n            .listCheckpoints()\n            .then((checkpoints) => {\n            if (widget.isDisposed) {\n                return;\n            }\n            const last = checkpoints[checkpoints.length - 1];\n            const checkpoint = last ? Time.format(last.last_modified) : 'None';\n            let caption = `Name: ${model.name}\\nPath: ${model.path}\\n`;\n            if (context.model.readOnly) {\n                caption += 'Read-only';\n            }\n            else {\n                caption +=\n                    `Last Saved: ${Time.format(model.last_modified)}\\n` +\n                        `Last Checkpoint: ${checkpoint}`;\n            }\n            widget.title.caption = caption;\n        });\n    }\n    /**\n     * Handle `'close-request'` messages.\n     *\n     * @param widget - The target widget.\n     *\n     * @returns A promise that resolves with whether the widget was closed.\n     */\n    async onClose(widget) {\n        var _a;\n        // Handle dirty state.\n        const [shouldClose, ignoreSave] = await this._maybeClose(widget);\n        if (widget.isDisposed) {\n            return true;\n        }\n        if (shouldClose) {\n            if (!ignoreSave) {\n                const context = Private.contextProperty.get(widget);\n                if (!context) {\n                    return true;\n                }\n                if ((_a = context.contentsModel) === null || _a === void 0 ? void 0 : _a.writable) {\n                    await context.save();\n                }\n                else {\n                    await context.saveAs();\n                }\n            }\n            if (widget.isDisposed) {\n                return true;\n            }\n            widget.dispose();\n        }\n        return shouldClose;\n    }\n    /**\n     * Dispose of widget regardless of widget's dirty state.\n     *\n     * @param widget - The target widget.\n     */\n    onDelete(widget) {\n        widget.dispose();\n        return Promise.resolve(void 0);\n    }\n    /**\n     * Ask the user whether to close an unsaved file.\n     */\n    _maybeClose(widget) {\n        var _a;\n        // Bail if the model is not dirty or other widgets are using the model.)\n        const context = Private.contextProperty.get(widget);\n        if (!context) {\n            return Promise.resolve([true, true]);\n        }\n        let widgets = Private.widgetsProperty.get(context);\n        if (!widgets) {\n            return Promise.resolve([true, true]);\n        }\n        // Filter by whether the factories are read only.\n        widgets = toArray(filter(widgets, widget => {\n            const factory = Private.factoryProperty.get(widget);\n            if (!factory) {\n                return false;\n            }\n            return factory.readOnly === false;\n        }));\n        const factory = Private.factoryProperty.get(widget);\n        if (!factory) {\n            return Promise.resolve([true, true]);\n        }\n        const model = context.model;\n        if (!model.dirty || widgets.length > 1 || factory.readOnly) {\n            return Promise.resolve([true, true]);\n        }\n        const fileName = widget.title.label;\n        const saveLabel = ((_a = context.contentsModel) === null || _a === void 0 ? void 0 : _a.writable) ? 'Save' : 'Save as';\n        return showDialog({\n            title: 'Save your work',\n            body: `Save changes in \"${fileName}\" before closing?`,\n            buttons: [\n                Dialog.cancelButton(),\n                Dialog.warnButton({ label: 'Discard' }),\n                Dialog.okButton({ label: saveLabel })\n            ]\n        }).then(result => {\n            return [result.button.accept, result.button.displayType === 'warn'];\n        });\n    }\n    /**\n     * Handle the disposal of a widget.\n     */\n    _widgetDisposed(widget) {\n        const context = Private.contextProperty.get(widget);\n        if (!context) {\n            return;\n        }\n        const widgets = Private.widgetsProperty.get(context);\n        if (!widgets) {\n            return;\n        }\n        // Remove the widget.\n        ArrayExt.removeFirstOf(widgets, widget);\n        // Dispose of the context if this is the last widget using it.\n        if (!widgets.length) {\n            context.dispose();\n        }\n    }\n    /**\n     * Handle the disposal of a widget.\n     */\n    _onWidgetDisposed(widget) {\n        const disposables = Private.disposablesProperty.get(widget);\n        disposables.dispose();\n    }\n    /**\n     * Handle a file changed signal for a context.\n     */\n    _onFileChanged(context) {\n        const widgets = Private.widgetsProperty.get(context);\n        each(widgets, widget => {\n            void this.setCaption(widget);\n        });\n    }\n    /**\n     * Handle a path changed signal for a context.\n     */\n    _onPathChanged(context) {\n        const widgets = Private.widgetsProperty.get(context);\n        each(widgets, widget => {\n            void this.setCaption(widget);\n        });\n    }\n}\n/**\n * A private namespace for DocumentManager data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A private attached property for a widget context.\n     */\n    Private.contextProperty = new AttachedProperty({\n        name: 'context',\n        create: () => undefined\n    });\n    /**\n     * A private attached property for a widget factory.\n     */\n    Private.factoryProperty = new AttachedProperty({\n        name: 'factory',\n        create: () => undefined\n    });\n    /**\n     * A private attached property for the widgets associated with a context.\n     */\n    Private.widgetsProperty = new AttachedProperty({\n        name: 'widgets',\n        create: () => []\n    });\n    /**\n     * A private attached property for a widget's disposables.\n     */\n    Private.disposablesProperty = new AttachedProperty({\n        name: 'disposables',\n        create: () => new DisposableSet()\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=widgetmanager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { sessionContextDialogs } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { UUID } from '@lumino/coreutils';\nimport { Context } from '@jupyterlab/docregistry';\nimport { ArrayExt, find } from '@lumino/algorithm';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { SaveHandler } from './savehandler';\nimport { DocumentWidgetManager } from './widgetmanager';\n/**\n * The document manager.\n *\n * #### Notes\n * The document manager is used to register model and widget creators,\n * and the file browser uses the document manager to create widgets. The\n * document manager maintains a context for each path and model type that is\n * open, and a list of widgets for each context. The document manager is in\n * control of the proper closing and disposal of the widgets and contexts.\n */\nexport class DocumentManager {\n    /**\n     * Construct a new document manager.\n     */\n    constructor(options) {\n        this._activateRequested = new Signal(this);\n        this._contexts = [];\n        this._isDisposed = false;\n        this._autosave = true;\n        this._autosaveInterval = 120;\n        this.registry = options.registry;\n        this.services = options.manager;\n        this._dialogs = options.sessionDialogs || sessionContextDialogs;\n        this._opener = options.opener;\n        this._when = options.when || options.manager.ready;\n        const widgetManager = new DocumentWidgetManager({\n            registry: this.registry\n        });\n        widgetManager.activateRequested.connect(this._onActivateRequested, this);\n        this._widgetManager = widgetManager;\n        this._setBusy = options.setBusy;\n    }\n    /**\n     * A signal emitted when one of the documents is activated.\n     */\n    get activateRequested() {\n        return this._activateRequested;\n    }\n    /**\n     * Whether to autosave documents.\n     */\n    get autosave() {\n        return this._autosave;\n    }\n    set autosave(value) {\n        this._autosave = value;\n        // For each existing context, start/stop the autosave handler as needed.\n        this._contexts.forEach(context => {\n            const handler = Private.saveHandlerProperty.get(context);\n            if (!handler) {\n                return;\n            }\n            if (value === true && !handler.isActive) {\n                handler.start();\n            }\n            else if (value === false && handler.isActive) {\n                handler.stop();\n            }\n        });\n    }\n    /**\n     * Determines the time interval for autosave in seconds.\n     */\n    get autosaveInterval() {\n        return this._autosaveInterval;\n    }\n    set autosaveInterval(value) {\n        this._autosaveInterval = value;\n        // For each existing context, set the save interval as needed.\n        this._contexts.forEach(context => {\n            const handler = Private.saveHandlerProperty.get(context);\n            if (!handler) {\n                return;\n            }\n            handler.saveInterval = value || 120;\n        });\n    }\n    /**\n     * Get whether the document manager has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the document manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        // Clear any listeners for our signals.\n        Signal.clearData(this);\n        // Close all the widgets for our contexts and dispose the widget manager.\n        this._contexts.forEach(context => {\n            return this._widgetManager.closeWidgets(context);\n        });\n        this._widgetManager.dispose();\n        // Clear the context list.\n        this._contexts.length = 0;\n    }\n    /**\n     * Clone a widget.\n     *\n     * @param widget - The source widget.\n     *\n     * @returns A new widget or `undefined`.\n     *\n     * #### Notes\n     *  Uses the same widget factory and context as the source, or returns\n     *  `undefined` if the source widget is not managed by this manager.\n     */\n    cloneWidget(widget) {\n        return this._widgetManager.cloneWidget(widget);\n    }\n    /**\n     * Close all of the open documents.\n     *\n     * @returns A promise resolving when the widgets are closed.\n     */\n    closeAll() {\n        return Promise.all(this._contexts.map(context => this._widgetManager.closeWidgets(context))).then(() => undefined);\n    }\n    /**\n     * Close the widgets associated with a given path.\n     *\n     * @param path - The target path.\n     *\n     * @returns A promise resolving when the widgets are closed.\n     */\n    closeFile(path) {\n        const close = this._contextsForPath(path).map(c => this._widgetManager.closeWidgets(c));\n        return Promise.all(close).then(x => undefined);\n    }\n    /**\n     * Get the document context for a widget.\n     *\n     * @param widget - The widget of interest.\n     *\n     * @returns The context associated with the widget, or `undefined` if no such\n     * context exists.\n     */\n    contextForWidget(widget) {\n        return this._widgetManager.contextForWidget(widget);\n    }\n    /**\n     * Copy a file.\n     *\n     * @param fromFile - The full path of the original file.\n     *\n     * @param toDir - The full path to the target directory.\n     *\n     * @returns A promise which resolves to the contents of the file.\n     */\n    copy(fromFile, toDir) {\n        return this.services.contents.copy(fromFile, toDir);\n    }\n    /**\n     * Create a new file and return the widget used to view it.\n     *\n     * @param path - The file path to create.\n     *\n     * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n     *\n     * @param kernel - An optional kernel name/id to override the default.\n     *\n     * @returns The created widget, or `undefined`.\n     *\n     * #### Notes\n     * This function will return `undefined` if a valid widget factory\n     * cannot be found.\n     */\n    createNew(path, widgetName = 'default', kernel) {\n        return this._createOrOpenDocument('create', path, widgetName, kernel);\n    }\n    /**\n     * Delete a file.\n     *\n     * @param path - The full path to the file to be deleted.\n     *\n     * @returns A promise which resolves when the file is deleted.\n     *\n     * #### Notes\n     * If there is a running session associated with the file and no other\n     * sessions are using the kernel, the session will be shut down.\n     */\n    deleteFile(path) {\n        return this.services.sessions\n            .stopIfNeeded(path)\n            .then(() => {\n            return this.services.contents.delete(path);\n        })\n            .then(() => {\n            this._contextsForPath(path).forEach(context => this._widgetManager.deleteWidgets(context));\n            return Promise.resolve(void 0);\n        });\n    }\n    /**\n     * See if a widget already exists for the given path and widget name.\n     *\n     * @param path - The file path to use.\n     *\n     * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n     *\n     * @returns The found widget, or `undefined`.\n     *\n     * #### Notes\n     * This can be used to find an existing widget instead of opening\n     * a new widget.\n     */\n    findWidget(path, widgetName = 'default') {\n        const newPath = PathExt.normalize(path);\n        let widgetNames = [widgetName];\n        if (widgetName === 'default') {\n            const factory = this.registry.defaultWidgetFactory(newPath);\n            if (!factory) {\n                return undefined;\n            }\n            widgetNames = [factory.name];\n        }\n        else if (widgetName === null) {\n            widgetNames = this.registry\n                .preferredWidgetFactories(newPath)\n                .map(f => f.name);\n        }\n        for (const context of this._contextsForPath(newPath)) {\n            for (const widgetName of widgetNames) {\n                if (widgetName !== null) {\n                    const widget = this._widgetManager.findWidget(context, widgetName);\n                    if (widget) {\n                        return widget;\n                    }\n                }\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Create a new untitled file.\n     *\n     * @param options - The file content creation options.\n     */\n    newUntitled(options) {\n        if (options.type === 'file') {\n            options.ext = options.ext || '.txt';\n        }\n        return this.services.contents.newUntitled(options);\n    }\n    /**\n     * Open a file and return the widget used to view it.\n     *\n     * @param path - The file path to open.\n     *\n     * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n     *\n     * @param kernel - An optional kernel name/id to override the default.\n     *\n     * @returns The created widget, or `undefined`.\n     *\n     * #### Notes\n     * This function will return `undefined` if a valid widget factory\n     * cannot be found.\n     */\n    open(path, widgetName = 'default', kernel, options) {\n        return this._createOrOpenDocument('open', path, widgetName, kernel, options);\n    }\n    /**\n     * Open a file and return the widget used to view it.\n     * Reveals an already existing editor.\n     *\n     * @param path - The file path to open.\n     *\n     * @param widgetName - The name of the widget factory to use. 'default' will use the default widget.\n     *\n     * @param kernel - An optional kernel name/id to override the default.\n     *\n     * @returns The created widget, or `undefined`.\n     *\n     * #### Notes\n     * This function will return `undefined` if a valid widget factory\n     * cannot be found.\n     */\n    openOrReveal(path, widgetName = 'default', kernel, options) {\n        const widget = this.findWidget(path, widgetName);\n        if (widget) {\n            this._opener.open(widget, options || {});\n            return widget;\n        }\n        return this.open(path, widgetName, kernel, options || {});\n    }\n    /**\n     * Overwrite a file.\n     *\n     * @param oldPath - The full path to the original file.\n     *\n     * @param newPath - The full path to the new file.\n     *\n     * @returns A promise containing the new file contents model.\n     */\n    overwrite(oldPath, newPath) {\n        // Cleanly overwrite the file by moving it, making sure the original does\n        // not exist, and then renaming to the new path.\n        const tempPath = `${newPath}.${UUID.uuid4()}`;\n        const cb = () => this.rename(tempPath, newPath);\n        return this.rename(oldPath, tempPath)\n            .then(() => {\n            return this.deleteFile(newPath);\n        })\n            .then(cb, cb);\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param oldPath - The full path to the original file.\n     *\n     * @param newPath - The full path to the new file.\n     *\n     * @returns A promise containing the new file contents model.  The promise\n     * will reject if the newPath already exists.  Use [[overwrite]] to overwrite\n     * a file.\n     */\n    rename(oldPath, newPath) {\n        return this.services.contents.rename(oldPath, newPath);\n    }\n    /**\n     * Find a context for a given path and factory name.\n     */\n    _findContext(path, factoryName) {\n        const normalizedPath = this.services.contents.normalize(path);\n        return find(this._contexts, context => {\n            return (context.path === normalizedPath && context.factoryName === factoryName);\n        });\n    }\n    /**\n     * Get the contexts for a given path.\n     *\n     * #### Notes\n     * There may be more than one context for a given path if the path is open\n     * with multiple model factories (for example, a notebook can be open with a\n     * notebook model factory and a text model factory).\n     */\n    _contextsForPath(path) {\n        const normalizedPath = this.services.contents.normalize(path);\n        return this._contexts.filter(context => context.path === normalizedPath);\n    }\n    /**\n     * Create a context from a path and a model factory.\n     */\n    _createContext(path, factory, kernelPreference) {\n        // TODO: Make it impossible to open two different contexts for the same\n        // path. Or at least prompt the closing of all widgets associated with the\n        // old context before opening the new context. This will make things much\n        // more consistent for the users, at the cost of some confusion about what\n        // models are and why sometimes they cannot open the same file in different\n        // widgets that have different models.\n        // Allow options to be passed when adding a sibling.\n        const adopter = (widget, options) => {\n            this._widgetManager.adoptWidget(context, widget);\n            this._opener.open(widget, options);\n        };\n        const modelDBFactory = this.services.contents.getModelDBFactory(path) || undefined;\n        const context = new Context({\n            opener: adopter,\n            manager: this.services,\n            factory,\n            path,\n            kernelPreference,\n            modelDBFactory,\n            setBusy: this._setBusy,\n            sessionDialogs: this._dialogs\n        });\n        const handler = new SaveHandler({\n            context,\n            saveInterval: this.autosaveInterval\n        });\n        Private.saveHandlerProperty.set(context, handler);\n        void context.ready.then(() => {\n            if (this.autosave) {\n                handler.start();\n            }\n        });\n        context.disposed.connect(this._onContextDisposed, this);\n        this._contexts.push(context);\n        return context;\n    }\n    /**\n     * Handle a context disposal.\n     */\n    _onContextDisposed(context) {\n        ArrayExt.removeFirstOf(this._contexts, context);\n    }\n    /**\n     * Get the widget factory for a given widget name.\n     */\n    _widgetFactoryFor(path, widgetName) {\n        const { registry } = this;\n        if (widgetName === 'default') {\n            const factory = registry.defaultWidgetFactory(path);\n            if (!factory) {\n                return undefined;\n            }\n            widgetName = factory.name;\n        }\n        return registry.getWidgetFactory(widgetName);\n    }\n    /**\n     * Creates a new document, or loads one from disk, depending on the `which` argument.\n     * If `which==='create'`, then it creates a new document. If `which==='open'`,\n     * then it loads the document from disk.\n     *\n     * The two cases differ in how the document context is handled, but the creation\n     * of the widget and launching of the kernel are identical.\n     */\n    _createOrOpenDocument(which, path, widgetName = 'default', kernel, options) {\n        const widgetFactory = this._widgetFactoryFor(path, widgetName);\n        if (!widgetFactory) {\n            return undefined;\n        }\n        const modelName = widgetFactory.modelName || 'text';\n        const factory = this.registry.getModelFactory(modelName);\n        if (!factory) {\n            return undefined;\n        }\n        // Handle the kernel pereference.\n        const preference = this.registry.getKernelPreference(path, widgetFactory.name, kernel);\n        let context;\n        let ready = Promise.resolve(undefined);\n        // Handle the load-from-disk case\n        if (which === 'open') {\n            // Use an existing context if available.\n            context = this._findContext(path, factory.name) || null;\n            if (!context) {\n                context = this._createContext(path, factory, preference);\n                // Populate the model, either from disk or a\n                // model backend.\n                ready = this._when.then(() => context.initialize(false));\n            }\n        }\n        else if (which === 'create') {\n            context = this._createContext(path, factory, preference);\n            // Immediately save the contents to disk.\n            ready = this._when.then(() => context.initialize(true));\n        }\n        else {\n            throw new Error(`Invalid argument 'which': ${which}`);\n        }\n        const widget = this._widgetManager.createWidget(widgetFactory, context);\n        this._opener.open(widget, options || {});\n        // If the initial opening of the context fails, dispose of the widget.\n        ready.catch(err => {\n            widget.close();\n        });\n        return widget;\n    }\n    /**\n     * Handle an activateRequested signal from the widget manager.\n     */\n    _onActivateRequested(sender, args) {\n        this._activateRequested.emit(args);\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for a context save handler.\n     */\n    Private.saveHandlerProperty = new AttachedProperty({\n        name: 'saveHandler',\n        create: () => undefined\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport React from 'react';\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { TextItem } from '@jupyterlab/statusbar';\n/**\n * A pure functional component for a Saving status item.\n *\n * @param props - the props for the component.\n *\n * @returns a tsx component for rendering the saving state.\n */\nfunction SavingStatusComponent(props) {\n    return React.createElement(TextItem, { source: `Saving ${props.fileStatus}` });\n}\n/**\n * The amount of time (in ms) to retain the saving completed message\n * before hiding the status item.\n */\nconst SAVING_COMPLETE_MESSAGE_MILLIS = 2000;\n/**\n * A VDomRenderer for a saving status item.\n */\nexport class SavingStatus extends VDomRenderer {\n    /**\n     * Create a new SavingStatus item.\n     */\n    constructor(opts) {\n        super(new SavingStatus.Model(opts.docManager));\n    }\n    /**\n     * Render the SavingStatus item.\n     */\n    render() {\n        if (this.model === null || this.model.status === null) {\n            return null;\n        }\n        else {\n            return React.createElement(SavingStatusComponent, { fileStatus: this.model.status });\n        }\n    }\n}\n/**\n * A namespace for SavingStatus statics.\n */\n(function (SavingStatus) {\n    /**\n     * A VDomModel for the SavingStatus item.\n     */\n    class Model extends VDomModel {\n        /**\n         * Create a new SavingStatus model.\n         */\n        constructor(docManager) {\n            super();\n            /**\n             * React to a saving status change from the current document widget.\n             */\n            this._onStatusChange = (_documentModel, newStatus) => {\n                this._status = newStatus;\n                if (this._status === 'completed') {\n                    setTimeout(() => {\n                        this._status = null;\n                        this.stateChanged.emit(void 0);\n                    }, SAVING_COMPLETE_MESSAGE_MILLIS);\n                    this.stateChanged.emit(void 0);\n                }\n                else {\n                    this.stateChanged.emit(void 0);\n                }\n            };\n            this._status = null;\n            this._widget = null;\n            this._status = null;\n            this.widget = null;\n            this._docManager = docManager;\n        }\n        /**\n         * The current status of the model.\n         */\n        get status() {\n            return this._status;\n        }\n        /**\n         * The current widget for the model. Any widget can be assigned,\n         * but it only has any effect if the widget is an IDocument widget\n         * known to the application document manager.\n         */\n        get widget() {\n            return this._widget;\n        }\n        set widget(widget) {\n            const oldWidget = this._widget;\n            if (oldWidget !== null) {\n                const oldContext = this._docManager.contextForWidget(oldWidget);\n                if (oldContext) {\n                    oldContext.saveState.disconnect(this._onStatusChange);\n                }\n            }\n            this._widget = widget;\n            if (this._widget === null) {\n                this._status = null;\n            }\n            else {\n                const widgetContext = this._docManager.contextForWidget(this._widget);\n                if (widgetContext) {\n                    widgetContext.saveState.connect(this._onStatusChange);\n                }\n            }\n        }\n    }\n    SavingStatus.Model = Model;\n})(SavingStatus || (SavingStatus = {}));\n//# sourceMappingURL=savingstatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport React from 'react';\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { TextItem } from '@jupyterlab/statusbar';\n/**\n * A pure component for rendering a file path (or activity name).\n *\n * @param props - the props for the component.\n *\n * @returns a tsx component for a file path.\n */\nfunction PathStatusComponent(props) {\n    return React.createElement(TextItem, { source: props.name, title: props.fullPath });\n}\n/**\n * A status bar item for the current file path (or activity name).\n */\nexport class PathStatus extends VDomRenderer {\n    /**\n     * Construct a new PathStatus status item.\n     */\n    constructor(opts) {\n        super(new PathStatus.Model(opts.docManager));\n        this.node.title = this.model.path;\n    }\n    /**\n     * Render the status item.\n     */\n    render() {\n        return (React.createElement(PathStatusComponent, { fullPath: this.model.path, name: this.model.name }));\n    }\n}\n/**\n * A namespace for PathStatus statics.\n */\n(function (PathStatus) {\n    /**\n     * A VDomModel for rendering the PathStatus status item.\n     */\n    class Model extends VDomModel {\n        /**\n         * Construct a new model.\n         *\n         * @param docManager: the application document manager. Used to check\n         *   whether the current widget is a document.\n         */\n        constructor(docManager) {\n            super();\n            /**\n             * React to a title change for the current widget.\n             */\n            this._onTitleChange = (title) => {\n                const oldState = this._getAllState();\n                this._name = title.label;\n                this._triggerChange(oldState, this._getAllState());\n            };\n            /**\n             * React to a path change for the current document.\n             */\n            this._onPathChange = (_documentModel, newPath) => {\n                const oldState = this._getAllState();\n                this._path = newPath;\n                this._name = PathExt.basename(newPath);\n                this._triggerChange(oldState, this._getAllState());\n            };\n            this._path = '';\n            this._name = '';\n            this._widget = null;\n            this._docManager = docManager;\n        }\n        /**\n         * The current path for the application.\n         */\n        get path() {\n            return this._path;\n        }\n        /**\n         * The name of the current activity.\n         */\n        get name() {\n            return this._name;\n        }\n        /**\n         * The current widget for the application.\n         */\n        get widget() {\n            return this._widget;\n        }\n        set widget(widget) {\n            const oldWidget = this._widget;\n            if (oldWidget !== null) {\n                const oldContext = this._docManager.contextForWidget(oldWidget);\n                if (oldContext) {\n                    oldContext.pathChanged.disconnect(this._onPathChange);\n                }\n                else {\n                    oldWidget.title.changed.disconnect(this._onTitleChange);\n                }\n            }\n            const oldState = this._getAllState();\n            this._widget = widget;\n            if (this._widget === null) {\n                this._path = '';\n                this._name = '';\n            }\n            else {\n                const widgetContext = this._docManager.contextForWidget(this._widget);\n                if (widgetContext) {\n                    this._path = widgetContext.path;\n                    this._name = PathExt.basename(widgetContext.path);\n                    widgetContext.pathChanged.connect(this._onPathChange);\n                }\n                else {\n                    this._path = '';\n                    this._name = this._widget.title.label;\n                    this._widget.title.changed.connect(this._onTitleChange);\n                }\n            }\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * Get the current state of the model.\n         */\n        _getAllState() {\n            return [this._path, this._name];\n        }\n        /**\n         * Trigger a state change to rerender.\n         */\n        _triggerChange(oldState, newState) {\n            if (oldState[0] !== newState[0] || oldState[1] !== newState[1]) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    PathStatus.Model = Model;\n})(PathStatus || (PathStatus = {}));\n//# sourceMappingURL=pathstatus.js.map"],"names":["Private","renameDialog","manager","oldPath","showDialog","title","body","RenameHandler","focusNodeSelector","buttons","Dialog","label","then","result","value","isValidFileName","showErrorMessage","Error","basePath","PathExt","newPath","renameFile","rename","catch","error","message","indexOf","shouldOverwrite","overwrite","Promise","reject","path","options","resolve","button","accept","name","length","test","Widget","constructor","super","node","createRenameNode","this","addClass","ext","inputNode","setSelectionRange","getElementsByTagName","getValue","document","createElement","existingLabel","textContent","existingPath","nameTitle","className","appendChild","IDocumentManager","Token","SaveHandler","_autosaveTimer","_minInterval","_interval","_isActive","_inDialog","_isDisposed","_multiplier","_context","context","interval","saveInterval","fileChanged","connect","_setTimer","disposed","dispose","isActive","isDisposed","clearTimeout","Signal","start","stop","window","setTimeout","_save","contentsModel","writable","model","dirty","Date","getTime","save","duration","Math","max","err","console","DocumentWidgetManager","_activateRequested","_registry","registry","activateRequested","createWidget","factory","widget","createNew","_initializeWidget","factoryProperty","set","disposables","DisposableSet","each","widgetExtensions","extender","add","disposablesProperty","_onWidgetDisposed","adoptWidget","_onFileChanged","pathChanged","_onPathChanged","ready","setCaption","widgetsProperty","get","push","MessageLoop","closable","_widgetDisposed","contextProperty","findWidget","widgetName","widgets","find","contextForWidget","cloneWidget","newWidget","closeWidgets","all","toArray","map","onClose","deleteWidgets","onDelete","messageHook","handler","msg","type","emit","async","listCheckpoints","checkpoints","last","checkpoint","Time","last_modified","caption","readOnly","_a","shouldClose","ignoreSave","_maybeClose","saveAs","filter","fileName","saveLabel","displayType","ArrayExt","AttachedProperty","create","DocumentManager","_contexts","_autosave","_autosaveInterval","services","_dialogs","sessionDialogs","sessionContextDialogs","_opener","opener","_when","when","widgetManager","_onActivateRequested","_widgetManager","_setBusy","setBusy","autosave","forEach","saveHandlerProperty","autosaveInterval","closeAll","closeFile","close","_contextsForPath","c","x","copy","fromFile","toDir","contents","kernel","_createOrOpenDocument","deleteFile","sessions","stopIfNeeded","delete","widgetNames","defaultWidgetFactory","preferredWidgetFactories","f","newUntitled","open","openOrReveal","tempPath","UUID","cb","_findContext","factoryName","normalizedPath","normalize","_createContext","kernelPreference","modelDBFactory","getModelDBFactory","undefined","Context","_onContextDisposed","_widgetFactoryFor","getWidgetFactory","which","widgetFactory","modelName","getModelFactory","preference","getKernelPreference","initialize","sender","args","SavingStatusComponent","props","TextItem","source","fileStatus","SavingStatus","VDomRenderer","opts","Model","docManager","render","status","PathStatusComponent","fullPath","VDomModel","_onStatusChange","_documentModel","newStatus","_status","stateChanged","_widget","_docManager","oldWidget","oldContext","saveState","disconnect","widgetContext","PathStatus","_onTitleChange","oldState","_getAllState","_name","_triggerChange","_onPathChange","_path","changed","newState"],"sourceRoot":""}