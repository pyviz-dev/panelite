{"version":3,"file":"4767.6154ceb.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docregistry/lib/context.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docregistry/lib/default.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docregistry/lib/mimedocument.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/docregistry/lib/registry.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport { showDialog, SessionContext, Dialog, showErrorMessage, sessionContextDialogs } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\n/**\n * An implementation of a document context.\n *\n * This class is typically instantiated by the document manager.\n */\nexport class Context {\n    /**\n     * Construct a new document context.\n     */\n    constructor(options) {\n        this._path = '';\n        this._useCRLF = false;\n        this._contentsModel = null;\n        this._populatedPromise = new PromiseDelegate();\n        this._isPopulated = false;\n        this._isReady = false;\n        this._isDisposed = false;\n        this._pathChanged = new Signal(this);\n        this._fileChanged = new Signal(this);\n        this._saveState = new Signal(this);\n        this._disposed = new Signal(this);\n        const manager = (this._manager = options.manager);\n        this._factory = options.factory;\n        this._dialogs = options.sessionDialogs || sessionContextDialogs;\n        this._opener = options.opener || Private.noOp;\n        this._path = this._manager.contents.normalize(options.path);\n        const localPath = this._manager.contents.localPath(this._path);\n        const lang = this._factory.preferredLanguage(PathExt.basename(localPath));\n        const dbFactory = options.modelDBFactory;\n        if (dbFactory) {\n            const localPath = manager.contents.localPath(this._path);\n            this._modelDB = dbFactory.createNew(localPath);\n            this._model = this._factory.createNew(lang, this._modelDB);\n        }\n        else {\n            this._model = this._factory.createNew(lang);\n        }\n        this._readyPromise = manager.ready.then(() => {\n            return this._populatedPromise.promise;\n        });\n        const ext = PathExt.extname(this._path);\n        this.sessionContext = new SessionContext({\n            sessionManager: manager.sessions,\n            specsManager: manager.kernelspecs,\n            path: this._path,\n            type: ext === '.ipynb' ? 'notebook' : 'file',\n            name: PathExt.basename(localPath),\n            kernelPreference: options.kernelPreference || { shouldStart: false },\n            setBusy: options.setBusy\n        });\n        this.sessionContext.propertyChanged.connect(this._onSessionChanged, this);\n        manager.contents.fileChanged.connect(this._onFileChanged, this);\n        const urlResolver = (this.urlResolver = new RenderMimeRegistry.UrlResolver({\n            path: this._path,\n            contents: manager.contents\n        }));\n        this.pathChanged.connect((sender, newPath) => {\n            urlResolver.path = newPath;\n        });\n    }\n    /**\n     * A signal emitted when the path changes.\n     */\n    get pathChanged() {\n        return this._pathChanged;\n    }\n    /**\n     * A signal emitted when the model is saved or reverted.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * A signal emitted on the start and end of a saving operation.\n     */\n    get saveState() {\n        return this._saveState;\n    }\n    /**\n     * A signal emitted when the context is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the model associated with the document.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * The current path associated with the document.\n     */\n    get path() {\n        return this._path;\n    }\n    /**\n     * The current local path associated with the document.\n     * If the document is in the default notebook file browser,\n     * this is the same as the path.\n     */\n    get localPath() {\n        return this._manager.contents.localPath(this._path);\n    }\n    /**\n     * The current contents model associated with the document.\n     *\n     * #### Notes\n     * The contents model will be null until the context is populated.\n     * It will have an  empty `contents` field.\n     */\n    get contentsModel() {\n        return this._contentsModel;\n    }\n    /**\n     * Get the model factory name.\n     *\n     * #### Notes\n     * This is not part of the `IContext` API.\n     */\n    get factoryName() {\n        return this.isDisposed ? '' : this._factory.name;\n    }\n    /**\n     * Test whether the context is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the context.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.sessionContext.dispose();\n        if (this._modelDB) {\n            this._modelDB.dispose();\n        }\n        this._model.dispose();\n        this._disposed.emit(void 0);\n        Signal.clearData(this);\n    }\n    /**\n     * Whether the context is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that is fulfilled when the context is ready.\n     */\n    get ready() {\n        return this._readyPromise;\n    }\n    /**\n     * Initialize the context.\n     *\n     * @param isNew - Whether it is a new file.\n     *\n     * @returns a promise that resolves upon initialization.\n     */\n    initialize(isNew) {\n        if (isNew) {\n            this._model.initialize();\n            return this._save();\n        }\n        if (this._modelDB) {\n            return this._modelDB.connected.then(() => {\n                if (this._modelDB.isPrepopulated) {\n                    this._model.initialize();\n                    void this._save();\n                    return void 0;\n                }\n                else {\n                    return this._revert(true);\n                }\n            });\n        }\n        else {\n            return this._revert(true);\n        }\n    }\n    /**\n     * Save the document contents to disk.\n     */\n    save() {\n        return this.ready.then(() => {\n            return this._save();\n        });\n    }\n    /**\n     * Save the document to a different path chosen by the user.\n     */\n    saveAs() {\n        return this.ready\n            .then(() => {\n            return Private.getSavePath(this._path);\n        })\n            .then(newPath => {\n            if (this.isDisposed || !newPath) {\n                return;\n            }\n            if (newPath === this._path) {\n                return this.save();\n            }\n            // Make sure the path does not exist.\n            return this._manager.ready\n                .then(() => {\n                return this._manager.contents.get(newPath);\n            })\n                .then(() => {\n                return this._maybeOverWrite(newPath);\n            })\n                .catch(err => {\n                if (!err.response || err.response.status !== 404) {\n                    throw err;\n                }\n                return this._finishSaveAs(newPath);\n            });\n        });\n    }\n    /**\n     * Download a file.\n     *\n     * @param path - The path of the file to be downloaded.\n     *\n     * @returns A promise which resolves when the file has begun\n     *   downloading.\n     */\n    async download() {\n        const url = await this._manager.contents.getDownloadUrl(this._path);\n        const element = document.createElement('a');\n        element.href = url;\n        element.download = '';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n        return void 0;\n    }\n    /**\n     * Revert the document contents to disk contents.\n     */\n    revert() {\n        return this.ready.then(() => {\n            return this._revert();\n        });\n    }\n    /**\n     * Create a checkpoint for the file.\n     */\n    createCheckpoint() {\n        const contents = this._manager.contents;\n        return this._manager.ready.then(() => {\n            return contents.createCheckpoint(this._path);\n        });\n    }\n    /**\n     * Delete a checkpoint for the file.\n     */\n    deleteCheckpoint(checkpointId) {\n        const contents = this._manager.contents;\n        return this._manager.ready.then(() => {\n            return contents.deleteCheckpoint(this._path, checkpointId);\n        });\n    }\n    /**\n     * Restore the file to a known checkpoint state.\n     */\n    restoreCheckpoint(checkpointId) {\n        const contents = this._manager.contents;\n        const path = this._path;\n        return this._manager.ready.then(() => {\n            if (checkpointId) {\n                return contents.restoreCheckpoint(path, checkpointId);\n            }\n            return this.listCheckpoints().then(checkpoints => {\n                if (this.isDisposed || !checkpoints.length) {\n                    return;\n                }\n                checkpointId = checkpoints[checkpoints.length - 1].id;\n                return contents.restoreCheckpoint(path, checkpointId);\n            });\n        });\n    }\n    /**\n     * List available checkpoints for a file.\n     */\n    listCheckpoints() {\n        const contents = this._manager.contents;\n        return this._manager.ready.then(() => {\n            return contents.listCheckpoints(this._path);\n        });\n    }\n    /**\n     * Add a sibling widget to the document manager.\n     *\n     * @param widget - The widget to add to the document manager.\n     *\n     * @param options - The desired options for adding the sibling.\n     *\n     * @returns A disposable used to remove the sibling if desired.\n     *\n     * #### Notes\n     * It is assumed that the widget has the same model and context\n     * as the original widget.\n     */\n    addSibling(widget, options = {}) {\n        const opener = this._opener;\n        if (opener) {\n            opener(widget, options);\n        }\n        return new DisposableDelegate(() => {\n            widget.close();\n        });\n    }\n    /**\n     * Handle a change on the contents manager.\n     */\n    _onFileChanged(sender, change) {\n        var _a, _b, _c;\n        if (change.type !== 'rename') {\n            return;\n        }\n        let oldPath = change.oldValue && change.oldValue.path;\n        let newPath = change.newValue && change.newValue.path;\n        if (newPath && this._path.indexOf(oldPath || '') === 0) {\n            let changeModel = change.newValue;\n            // When folder name changed, `oldPath` is `foo`, `newPath` is `bar` and `this._path` is `foo/test`,\n            // we should update `foo/test` to `bar/test` as well\n            if (oldPath !== this._path) {\n                newPath = this._path.replace(new RegExp(`^${oldPath}/`), `${newPath}/`);\n                oldPath = this._path;\n                // Update client file model from folder change\n                changeModel = {\n                    last_modified: (_a = change.newValue) === null || _a === void 0 ? void 0 : _a.created,\n                    path: newPath\n                };\n            }\n            this._path = newPath;\n            void ((_b = this.sessionContext.session) === null || _b === void 0 ? void 0 : _b.setPath(newPath));\n            const updateModel = Object.assign(Object.assign({}, this._contentsModel), changeModel);\n            const localPath = this._manager.contents.localPath(newPath);\n            void ((_c = this.sessionContext.session) === null || _c === void 0 ? void 0 : _c.setName(PathExt.basename(localPath)));\n            this._updateContentsModel(updateModel);\n            this._pathChanged.emit(this._path);\n        }\n    }\n    /**\n     * Handle a change to a session property.\n     */\n    _onSessionChanged(sender, type) {\n        if (type !== 'path') {\n            return;\n        }\n        const path = this.sessionContext.session.path;\n        if (path !== this._path) {\n            this._path = path;\n            this._pathChanged.emit(path);\n        }\n    }\n    /**\n     * Update our contents model, without the content.\n     */\n    _updateContentsModel(model) {\n        const newModel = {\n            path: model.path,\n            name: model.name,\n            type: model.type,\n            content: undefined,\n            writable: model.writable,\n            created: model.created,\n            last_modified: model.last_modified,\n            mimetype: model.mimetype,\n            format: model.format\n        };\n        const mod = this._contentsModel ? this._contentsModel.last_modified : null;\n        this._contentsModel = newModel;\n        if (!mod || newModel.last_modified !== mod) {\n            this._fileChanged.emit(newModel);\n        }\n    }\n    /**\n     * Handle an initial population.\n     */\n    _populate() {\n        this._isPopulated = true;\n        this._isReady = true;\n        this._populatedPromise.resolve(void 0);\n        // Add a checkpoint if none exists and the file is writable.\n        return this._maybeCheckpoint(false).then(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            // Update the kernel preference.\n            const name = this._model.defaultKernelName ||\n                this.sessionContext.kernelPreference.name;\n            this.sessionContext.kernelPreference = Object.assign(Object.assign({}, this.sessionContext.kernelPreference), { name, language: this._model.defaultKernelLanguage });\n            // Note: we don't wait on the session to initialize\n            // so that the user can be shown the content before\n            // any kernel has started.\n            void this.sessionContext.initialize().then(shouldSelect => {\n                if (shouldSelect) {\n                    void this._dialogs.selectKernel(this.sessionContext);\n                }\n            });\n        });\n    }\n    /**\n     * Save the document contents to disk.\n     */\n    async _save() {\n        this._saveState.emit('started');\n        const model = this._model;\n        let content;\n        if (this._factory.fileFormat === 'json') {\n            content = model.toJSON();\n        }\n        else {\n            content = model.toString();\n            if (this._useCRLF) {\n                content = content.replace(/\\n/g, '\\r\\n');\n            }\n        }\n        const options = {\n            type: this._factory.contentType,\n            format: this._factory.fileFormat,\n            content\n        };\n        try {\n            let value;\n            await this._manager.ready;\n            if (!model.modelDB.isCollaborative) {\n                value = await this._maybeSave(options);\n            }\n            else {\n                value = await this._manager.contents.save(this._path, options);\n            }\n            if (this.isDisposed) {\n                return;\n            }\n            model.dirty = false;\n            this._updateContentsModel(value);\n            if (!this._isPopulated) {\n                await this._populate();\n            }\n            // Emit completion.\n            this._saveState.emit('completed');\n        }\n        catch (err) {\n            // If the save has been canceled by the user,\n            // throw the error so that whoever called save()\n            // can decide what to do.\n            if (err.message === 'Cancel') {\n                throw err;\n            }\n            // Otherwise show an error message and throw the error.\n            const localPath = this._manager.contents.localPath(this._path);\n            const name = PathExt.basename(localPath);\n            void this._handleError(err, `File Save Error for ${name}`);\n            // Emit failure.\n            this._saveState.emit('failed');\n            throw err;\n        }\n    }\n    /**\n     * Revert the document contents to disk contents.\n     *\n     * @param initializeModel - call the model's initialization function after\n     * deserializing the content.\n     */\n    _revert(initializeModel = false) {\n        const opts = {\n            format: this._factory.fileFormat,\n            type: this._factory.contentType,\n            content: true\n        };\n        const path = this._path;\n        const model = this._model;\n        return this._manager.ready\n            .then(() => {\n            return this._manager.contents.get(path, opts);\n        })\n            .then(contents => {\n            if (this.isDisposed) {\n                return;\n            }\n            const dirty = false;\n            if (contents.format === 'json') {\n                model.fromJSON(contents.content);\n                if (initializeModel) {\n                    model.initialize();\n                }\n            }\n            else {\n                let content = contents.content;\n                // Convert line endings if necessary, marking the file\n                // as dirty.\n                if (content.indexOf('\\r') !== -1) {\n                    this._useCRLF = true;\n                    content = content.replace(/\\r\\n/g, '\\n');\n                }\n                else {\n                    this._useCRLF = false;\n                }\n                model.fromString(content);\n                if (initializeModel) {\n                    model.initialize();\n                }\n            }\n            this._updateContentsModel(contents);\n            model.dirty = dirty;\n            if (!this._isPopulated) {\n                return this._populate();\n            }\n        })\n            .catch(async (err) => {\n            const localPath = this._manager.contents.localPath(this._path);\n            const name = PathExt.basename(localPath);\n            void this._handleError(err, `File Load Error for ${name}`);\n            throw err;\n        });\n    }\n    /**\n     * Save a file, dealing with conflicts.\n     */\n    _maybeSave(options) {\n        const path = this._path;\n        // Make sure the file has not changed on disk.\n        const promise = this._manager.contents.get(path, { content: false });\n        return promise.then(model => {\n            var _a;\n            if (this.isDisposed) {\n                return Promise.reject(new Error('Disposed'));\n            }\n            // We want to check last_modified (disk) > last_modified (client)\n            // (our last save)\n            // In some cases the filesystem reports an inconsistent time,\n            // so we allow 0.5 seconds difference before complaining.\n            const modified = (_a = this.contentsModel) === null || _a === void 0 ? void 0 : _a.last_modified;\n            const tClient = modified ? new Date(modified) : new Date();\n            const tDisk = new Date(model.last_modified);\n            if (modified && tDisk.getTime() - tClient.getTime() > 500) {\n                // 500 ms\n                return this._timeConflict(tClient, model, options);\n            }\n            return this._manager.contents.save(path, options);\n        }, err => {\n            if (err.response && err.response.status === 404) {\n                return this._manager.contents.save(path, options);\n            }\n            throw err;\n        });\n    }\n    /**\n     * Handle a save/load error with a dialog.\n     */\n    async _handleError(err, title) {\n        await showErrorMessage(title, err);\n        return;\n    }\n    /**\n     * Add a checkpoint the file is writable.\n     */\n    _maybeCheckpoint(force) {\n        let writable = this._contentsModel && this._contentsModel.writable;\n        let promise = Promise.resolve(void 0);\n        if (!writable) {\n            return promise;\n        }\n        if (force) {\n            promise = this.createCheckpoint().then( /* no-op */);\n        }\n        else {\n            promise = this.listCheckpoints().then(checkpoints => {\n                writable = this._contentsModel && this._contentsModel.writable;\n                if (!this.isDisposed && !checkpoints.length && writable) {\n                    return this.createCheckpoint().then( /* no-op */);\n                }\n            });\n        }\n        return promise.catch(err => {\n            // Handle a read-only folder.\n            if (!err.response || err.response.status !== 403) {\n                throw err;\n            }\n        });\n    }\n    /**\n     * Handle a time conflict.\n     */\n    _timeConflict(tClient, model, options) {\n        const tDisk = new Date(model.last_modified);\n        console.warn(`Last saving performed ${tClient} ` +\n            `while the current file seems to have been saved ` +\n            `${tDisk}`);\n        const body = `\"${this.path}\" has changed on disk since the last time it ` +\n            `was opened or saved. ` +\n            `Do you want to overwrite the file on disk with the version ` +\n            ` open here, or load the version on disk (revert)?`;\n        const revertBtn = Dialog.okButton({ label: 'Revert' });\n        const overwriteBtn = Dialog.warnButton({ label: 'Overwrite' });\n        return showDialog({\n            title: 'File Changed',\n            body,\n            buttons: [Dialog.cancelButton(), revertBtn, overwriteBtn]\n        }).then(result => {\n            if (this.isDisposed) {\n                return Promise.reject(new Error('Disposed'));\n            }\n            if (result.button.label === 'Overwrite') {\n                return this._manager.contents.save(this._path, options);\n            }\n            if (result.button.label === 'Revert') {\n                return this.revert().then(() => {\n                    return model;\n                });\n            }\n            return Promise.reject(new Error('Cancel')); // Otherwise cancel the save.\n        });\n    }\n    /**\n     * Handle a time conflict.\n     */\n    _maybeOverWrite(path) {\n        const body = `\"${path}\" already exists. Do you want to replace it?`;\n        const overwriteBtn = Dialog.warnButton({ label: 'Overwrite' });\n        return showDialog({\n            title: 'File Overwrite?',\n            body,\n            buttons: [Dialog.cancelButton(), overwriteBtn]\n        }).then(result => {\n            if (this.isDisposed) {\n                return Promise.reject(new Error('Disposed'));\n            }\n            if (result.button.label === 'Overwrite') {\n                return this._manager.contents.delete(path).then(() => {\n                    return this._finishSaveAs(path);\n                });\n            }\n        });\n    }\n    /**\n     * Finish a saveAs operation given a new path.\n     */\n    async _finishSaveAs(newPath) {\n        var _a, _b;\n        this._path = newPath;\n        await ((_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.setPath(newPath));\n        await ((_b = this.sessionContext.session) === null || _b === void 0 ? void 0 : _b.setName(newPath.split('/').pop()));\n        await this.save();\n        this._pathChanged.emit(this._path);\n        await this._maybeCheckpoint(true);\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get a new file path from the user.\n     */\n    function getSavePath(path) {\n        const saveBtn = Dialog.okButton({ label: 'Save' });\n        return showDialog({\n            title: 'Save File As..',\n            body: new SaveWidget(path),\n            buttons: [Dialog.cancelButton(), saveBtn]\n        }).then(result => {\n            var _a;\n            if (result.button.label === 'Save') {\n                return _a = result.value, (_a !== null && _a !== void 0 ? _a : undefined);\n            }\n            return;\n        });\n    }\n    Private.getSavePath = getSavePath;\n    /**\n     * A no-op function.\n     */\n    function noOp() {\n        /* no-op */\n    }\n    Private.noOp = noOp;\n    /*\n     * A widget that gets a file path from a user.\n     */\n    class SaveWidget extends Widget {\n        /**\n         * Construct a new save widget.\n         */\n        constructor(path) {\n            super({ node: createSaveNode(path) });\n        }\n        /**\n         * Get the value for the widget.\n         */\n        getValue() {\n            return this.node.value;\n        }\n    }\n    /**\n     * Create the node for a save widget.\n     */\n    function createSaveNode(path) {\n        const input = document.createElement('input');\n        input.value = path;\n        return input;\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=context.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Mode } from '@jupyterlab/codemirror';\nimport { Signal } from '@lumino/signaling';\nimport { MainAreaWidget } from '@jupyterlab/apputils';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { PathExt } from '@jupyterlab/coreutils';\n/**\n * The default implementation of a document model.\n */\nexport class DocumentModel extends CodeEditor.Model {\n    /**\n     * Construct a new document model.\n     */\n    constructor(languagePreference, modelDB) {\n        super({ modelDB });\n        this._defaultLang = '';\n        this._dirty = false;\n        this._readOnly = false;\n        this._contentChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._defaultLang = languagePreference || '';\n        this.value.changed.connect(this.triggerContentChange, this);\n    }\n    /**\n     * A signal emitted when the document content changes.\n     */\n    get contentChanged() {\n        return this._contentChanged;\n    }\n    /**\n     * A signal emitted when the document state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * The dirty state of the document.\n     */\n    get dirty() {\n        return this._dirty;\n    }\n    set dirty(newValue) {\n        if (newValue === this._dirty) {\n            return;\n        }\n        const oldValue = this._dirty;\n        this._dirty = newValue;\n        this.triggerStateChange({ name: 'dirty', oldValue, newValue });\n    }\n    /**\n     * The read only state of the document.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(newValue) {\n        if (newValue === this._readOnly) {\n            return;\n        }\n        const oldValue = this._readOnly;\n        this._readOnly = newValue;\n        this.triggerStateChange({ name: 'readOnly', oldValue, newValue });\n    }\n    /**\n     * The default kernel name of the document.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    get defaultKernelName() {\n        return '';\n    }\n    /**\n     * The default kernel language of the document.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    get defaultKernelLanguage() {\n        return this._defaultLang;\n    }\n    /**\n     * Serialize the model to a string.\n     */\n    toString() {\n        return this.value.text;\n    }\n    /**\n     * Deserialize the model from a string.\n     *\n     * #### Notes\n     * Should emit a [contentChanged] signal.\n     */\n    fromString(value) {\n        this.value.text = value;\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return JSON.parse(this.value.text || 'null');\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * Should emit a [contentChanged] signal.\n     */\n    fromJSON(value) {\n        this.fromString(JSON.stringify(value));\n    }\n    /**\n     * Initialize the model with its current state.\n     */\n    initialize() {\n        return;\n    }\n    /**\n     * Trigger a state change signal.\n     */\n    triggerStateChange(args) {\n        this._stateChanged.emit(args);\n    }\n    /**\n     * Trigger a content changed signal.\n     */\n    triggerContentChange() {\n        this._contentChanged.emit(void 0);\n        this.dirty = true;\n    }\n}\n/**\n * An implementation of a model factory for text files.\n */\nexport class TextModelFactory {\n    constructor() {\n        this._isDisposed = false;\n    }\n    /**\n     * The name of the model type.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    get name() {\n        return 'text';\n    }\n    /**\n     * The type of the file.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    get contentType() {\n        return 'file';\n    }\n    /**\n     * The format of the file.\n     *\n     * This is a read-only property.\n     */\n    get fileFormat() {\n        return 'text';\n    }\n    /**\n     * Get whether the model factory has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the model factory.\n     */\n    dispose() {\n        this._isDisposed = true;\n    }\n    /**\n     * Create a new model.\n     *\n     * @param languagePreference - An optional kernel language preference.\n     *\n     * @returns A new document model.\n     */\n    createNew(languagePreference, modelDB) {\n        return new DocumentModel(languagePreference, modelDB);\n    }\n    /**\n     * Get the preferred kernel language given a file path.\n     */\n    preferredLanguage(path) {\n        const mode = Mode.findByFileName(path);\n        return mode && mode.mode;\n    }\n}\n/**\n * An implementation of a model factory for base64 files.\n */\nexport class Base64ModelFactory extends TextModelFactory {\n    /**\n     * The name of the model type.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    get name() {\n        return 'base64';\n    }\n    /**\n     * The type of the file.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    get contentType() {\n        return 'file';\n    }\n    /**\n     * The format of the file.\n     *\n     * This is a read-only property.\n     */\n    get fileFormat() {\n        return 'base64';\n    }\n}\n/**\n * The default implementation of a widget factory.\n */\nexport class ABCWidgetFactory {\n    /**\n     * Construct a new `ABCWidgetFactory`.\n     */\n    constructor(options) {\n        this._isDisposed = false;\n        this._widgetCreated = new Signal(this);\n        this._name = options.name;\n        this._readOnly = options.readOnly === undefined ? false : options.readOnly;\n        this._defaultFor = options.defaultFor ? options.defaultFor.slice() : [];\n        this._defaultRendered = (options.defaultRendered || []).slice();\n        this._fileTypes = options.fileTypes.slice();\n        this._modelName = options.modelName || 'text';\n        this._preferKernel = !!options.preferKernel;\n        this._canStartKernel = !!options.canStartKernel;\n        this._shutdownOnClose = !!options.shutdownOnClose;\n        this._toolbarFactory = options.toolbarFactory;\n    }\n    /**\n     * A signal emitted when a widget is created.\n     */\n    get widgetCreated() {\n        return this._widgetCreated;\n    }\n    /**\n     * Get whether the model factory has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the document manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Whether the widget factory is read only.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    /**\n     * The name of the widget to display in dialogs.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The file types the widget can view.\n     */\n    get fileTypes() {\n        return this._fileTypes.slice();\n    }\n    /**\n     * The registered name of the model type used to create the widgets.\n     */\n    get modelName() {\n        return this._modelName;\n    }\n    /**\n     * The file types for which the factory should be the default.\n     */\n    get defaultFor() {\n        return this._defaultFor.slice();\n    }\n    /**\n     * The file types for which the factory should be the default for\n     * rendering a document model, if different from editing.\n     */\n    get defaultRendered() {\n        return this._defaultRendered.slice();\n    }\n    /**\n     * Whether the widgets prefer having a kernel started.\n     */\n    get preferKernel() {\n        return this._preferKernel;\n    }\n    /**\n     * Whether the widgets can start a kernel when opened.\n     */\n    get canStartKernel() {\n        return this._canStartKernel;\n    }\n    /**\n     * Whether the kernel should be shutdown when the widget is closed.\n     */\n    get shutdownOnClose() {\n        return this._shutdownOnClose;\n    }\n    set shutdownOnClose(value) {\n        this._shutdownOnClose = value;\n    }\n    /**\n     * Create a new widget given a document model and a context.\n     *\n     * #### Notes\n     * It should emit the [widgetCreated] signal with the new widget.\n     */\n    createNew(context, source) {\n        // Create the new widget\n        const widget = this.createNewWidget(context, source);\n        // Add toolbar items\n        let items;\n        if (this._toolbarFactory) {\n            items = this._toolbarFactory(widget);\n        }\n        else {\n            items = this.defaultToolbarFactory(widget);\n        }\n        items.forEach(({ name, widget: item }) => {\n            widget.toolbar.addItem(name, item);\n        });\n        // Emit widget created signal\n        this._widgetCreated.emit(widget);\n        return widget;\n    }\n    /**\n     * Default factory for toolbar items to be added after the widget is created.\n     */\n    defaultToolbarFactory(widget) {\n        return [];\n    }\n}\n/**\n * The class name added to a dirty widget.\n */\nconst DIRTY_CLASS = 'jp-mod-dirty';\n/**\n * A document widget implementation.\n */\nexport class DocumentWidget extends MainAreaWidget {\n    constructor(options) {\n        // Include the context ready promise in the widget reveal promise\n        options.reveal = Promise.all([options.reveal, options.context.ready]);\n        super(options);\n        this.context = options.context;\n        // Handle context path changes\n        this.context.pathChanged.connect(this._onPathChanged, this);\n        this._onPathChanged(this.context, this.context.path);\n        // Listen for changes in the dirty state.\n        this.context.model.stateChanged.connect(this._onModelStateChanged, this);\n        void this.context.ready.then(() => {\n            this._handleDirtyState();\n        });\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        /* no-op */\n    }\n    /**\n     * Handle a path change.\n     */\n    _onPathChanged(sender, path) {\n        this.title.label = PathExt.basename(sender.localPath);\n    }\n    /**\n     * Handle a change to the context model state.\n     */\n    _onModelStateChanged(sender, args) {\n        if (args.name === 'dirty') {\n            this._handleDirtyState();\n        }\n    }\n    /**\n     * Handle the dirty state of the context model.\n     */\n    _handleDirtyState() {\n        if (this.context.model.dirty) {\n            this.title.className += ` ${DIRTY_CLASS}`;\n        }\n        else {\n            this.title.className = this.title.className.replace(DIRTY_CLASS, '');\n        }\n    }\n}\n//# sourceMappingURL=default.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage, Printing } from '@jupyterlab/apputils';\nimport { ActivityMonitor } from '@jupyterlab/coreutils';\nimport { MimeModel } from '@jupyterlab/rendermime';\nimport { PromiseDelegate, JSONExt } from '@lumino/coreutils';\nimport { MessageLoop } from '@lumino/messaging';\nimport { StackedLayout, Widget } from '@lumino/widgets';\nimport { ABCWidgetFactory, DocumentWidget } from './default';\n/**\n * A content widget for a rendered mimetype document.\n */\nexport class MimeContent extends Widget {\n    /**\n     * Construct a new widget.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A bound change callback.\n         */\n        this._changeCallback = (options) => {\n            if (!options.data || !options.data[this.mimeType]) {\n                return;\n            }\n            const data = options.data[this.mimeType];\n            if (typeof data === 'string') {\n                if (data !== this._context.model.toString()) {\n                    this._context.model.fromString(data);\n                }\n            }\n            else if (data !== null &&\n                data !== undefined &&\n                !JSONExt.deepEqual(data, this._context.model.toJSON())) {\n                this._context.model.fromJSON(data);\n            }\n        };\n        this._fragment = '';\n        this._ready = new PromiseDelegate();\n        this._isRendering = false;\n        this._renderRequested = false;\n        this.addClass('jp-MimeDocument');\n        this.mimeType = options.mimeType;\n        this._dataType = options.dataType || 'string';\n        this._context = options.context;\n        this.renderer = options.renderer;\n        const layout = (this.layout = new StackedLayout());\n        layout.addWidget(this.renderer);\n        this._context.ready\n            .then(() => {\n            return this._render();\n        })\n            .then(() => {\n            // After rendering for the first time, send an activation request if we\n            // are currently focused.\n            if (this.node === document.activeElement) {\n                // We want to synchronously send (not post) the activate message, while\n                // we know this node still has focus.\n                MessageLoop.sendMessage(this.renderer, Widget.Msg.ActivateRequest);\n            }\n            // Throttle the rendering rate of the widget.\n            this._monitor = new ActivityMonitor({\n                signal: this._context.model.contentChanged,\n                timeout: options.renderTimeout\n            });\n            this._monitor.activityStopped.connect(this.update, this);\n            this._ready.resolve(undefined);\n        })\n            .catch(reason => {\n            // Dispose the document if rendering fails.\n            requestAnimationFrame(() => {\n                this.dispose();\n            });\n            void showErrorMessage(`Renderer Failure: ${this._context.path}`, reason);\n        });\n    }\n    /**\n     * Print method. Defered to the renderer.\n     */\n    [Printing.symbol]() {\n        return Printing.getPrintFunction(this.renderer);\n    }\n    /**\n     * A promise that resolves when the widget is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        this._fragment = fragment;\n        this.update();\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._monitor) {\n            this._monitor.dispose();\n        }\n        this._monitor = null;\n        super.dispose();\n    }\n    /**\n     * Handle an `update-request` message to the widget.\n     */\n    onUpdateRequest(msg) {\n        if (this._context.isReady) {\n            void this._render();\n            this._fragment = '';\n        }\n    }\n    /**\n     * Render the mime content.\n     */\n    async _render() {\n        if (this.isDisposed) {\n            return;\n        }\n        // Since rendering is async, we note render requests that happen while we\n        // actually are rendering for a future rendering.\n        if (this._isRendering) {\n            this._renderRequested = true;\n            return;\n        }\n        // Set up for this rendering pass.\n        this._renderRequested = false;\n        const context = this._context;\n        const model = context.model;\n        const data = {};\n        if (this._dataType === 'string') {\n            data[this.mimeType] = model.toString();\n        }\n        else {\n            data[this.mimeType] = model.toJSON();\n        }\n        const mimeModel = new MimeModel({\n            data,\n            callback: this._changeCallback,\n            metadata: { fragment: this._fragment }\n        });\n        try {\n            // Do the rendering asynchronously.\n            this._isRendering = true;\n            await this.renderer.renderModel(mimeModel);\n            this._isRendering = false;\n            // If there is an outstanding request to render, go ahead and render\n            if (this._renderRequested) {\n                return this._render();\n            }\n        }\n        catch (reason) {\n            // Dispose the document if rendering fails.\n            requestAnimationFrame(() => {\n                this.dispose();\n            });\n            void showErrorMessage(`Renderer Failure: ${context.path}`, reason);\n        }\n    }\n}\n/**\n * A document widget for mime content.\n */\nexport class MimeDocument extends DocumentWidget {\n    setFragment(fragment) {\n        this.content.setFragment(fragment);\n    }\n}\n/**\n * An implementation of a widget factory for a rendered mimetype document.\n */\nexport class MimeDocumentFactory extends ABCWidgetFactory {\n    /**\n     * Construct a new mimetype widget factory.\n     */\n    constructor(options) {\n        super(Private.createRegistryOptions(options));\n        this._rendermime = options.rendermime;\n        this._renderTimeout = options.renderTimeout || 1000;\n        this._dataType = options.dataType || 'string';\n        this._fileType = options.primaryFileType;\n    }\n    /**\n     * Create a new widget given a context.\n     */\n    createNewWidget(context) {\n        var _a, _b, _c, _d, _e, _f;\n        const ft = this._fileType;\n        const mimeType = ((_a = ft) === null || _a === void 0 ? void 0 : _a.mimeTypes.length) ? ft.mimeTypes[0] : 'text/plain';\n        const rendermime = this._rendermime.clone({\n            resolver: context.urlResolver\n        });\n        const renderer = rendermime.createRenderer(mimeType);\n        const content = new MimeContent({\n            context,\n            renderer,\n            mimeType,\n            renderTimeout: this._renderTimeout,\n            dataType: this._dataType\n        });\n        content.title.icon = (_b = ft) === null || _b === void 0 ? void 0 : _b.icon;\n        content.title.iconClass = (_d = (_c = ft) === null || _c === void 0 ? void 0 : _c.iconClass, (_d !== null && _d !== void 0 ? _d : ''));\n        content.title.iconLabel = (_f = (_e = ft) === null || _e === void 0 ? void 0 : _e.iconLabel, (_f !== null && _f !== void 0 ? _f : ''));\n        const widget = new MimeDocument({ content, context });\n        return widget;\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the document registry options.\n     */\n    function createRegistryOptions(options) {\n        return Object.assign(Object.assign({}, options), { readOnly: true });\n    }\n    Private.createRegistryOptions = createRegistryOptions;\n})(Private || (Private = {}));\n//# sourceMappingURL=mimedocument.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, ArrayIterator, each, empty, find, map } from '@lumino/algorithm';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { fileIcon, folderIcon, imageIcon, jsonIcon, markdownIcon, notebookIcon, pythonIcon, rKernelIcon, spreadsheetIcon, yamlIcon } from '@jupyterlab/ui-components';\nimport { TextModelFactory } from './default';\n/**\n * The document registry.\n */\nexport class DocumentRegistry {\n    /**\n     * Construct a new document registry.\n     */\n    constructor(options = {}) {\n        this._modelFactories = Object.create(null);\n        this._widgetFactories = Object.create(null);\n        this._defaultWidgetFactory = '';\n        this._defaultWidgetFactoryOverrides = Object.create(null);\n        this._defaultWidgetFactories = Object.create(null);\n        this._defaultRenderedWidgetFactories = Object.create(null);\n        this._widgetFactoriesForFileType = Object.create(null);\n        this._fileTypes = [];\n        this._extenders = Object.create(null);\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        const factory = options.textModelFactory;\n        if (factory && factory.name !== 'text') {\n            throw new Error('Text model factory must have the name `text`');\n        }\n        this._modelFactories['text'] = factory || new TextModelFactory();\n        const fts = options.initialFileTypes || DocumentRegistry.defaultFileTypes;\n        fts.forEach(ft => {\n            const value = Object.assign(Object.assign({}, DocumentRegistry.fileTypeDefaults), ft);\n            this._fileTypes.push(value);\n        });\n    }\n    /**\n     * A signal emitted when the registry has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get whether the document registry has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the document registery.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        for (const modelName in this._modelFactories) {\n            this._modelFactories[modelName].dispose();\n        }\n        for (const widgetName in this._widgetFactories) {\n            this._widgetFactories[widgetName].dispose();\n        }\n        for (const widgetName in this._extenders) {\n            this._extenders[widgetName].length = 0;\n        }\n        this._fileTypes.length = 0;\n        Signal.clearData(this);\n    }\n    /**\n     * Add a widget factory to the registry.\n     *\n     * @param factory - The factory instance to register.\n     *\n     * @returns A disposable which will unregister the factory.\n     *\n     * #### Notes\n     * If a factory with the given `'name'` is already registered,\n     * a warning will be logged, and this will be a no-op.\n     * If `'*'` is given as a default extension, the factory will be registered\n     * as the global default.\n     * If an extension or global default is already registered, this factory\n     * will override the existing default.\n     * The factory cannot be named an empty string or the string `'default'`.\n     */\n    addWidgetFactory(factory) {\n        const name = factory.name.toLowerCase();\n        if (!name || name === 'default') {\n            throw Error('Invalid factory name');\n        }\n        if (this._widgetFactories[name]) {\n            console.warn(`Duplicate registered factory ${name}`);\n            return new DisposableDelegate(Private.noOp);\n        }\n        this._widgetFactories[name] = factory;\n        for (const ft of factory.defaultFor || []) {\n            if (factory.fileTypes.indexOf(ft) === -1) {\n                continue;\n            }\n            if (ft === '*') {\n                this._defaultWidgetFactory = name;\n            }\n            else {\n                this._defaultWidgetFactories[ft] = name;\n            }\n        }\n        for (const ft of factory.defaultRendered || []) {\n            if (factory.fileTypes.indexOf(ft) === -1) {\n                continue;\n            }\n            this._defaultRenderedWidgetFactories[ft] = name;\n        }\n        // For convenience, store a mapping of file type name -> name\n        for (const ft of factory.fileTypes) {\n            if (!this._widgetFactoriesForFileType[ft]) {\n                this._widgetFactoriesForFileType[ft] = [];\n            }\n            this._widgetFactoriesForFileType[ft].push(name);\n        }\n        this._changed.emit({\n            type: 'widgetFactory',\n            name,\n            change: 'added'\n        });\n        return new DisposableDelegate(() => {\n            delete this._widgetFactories[name];\n            if (this._defaultWidgetFactory === name) {\n                this._defaultWidgetFactory = '';\n            }\n            for (const ext of Object.keys(this._defaultWidgetFactories)) {\n                if (this._defaultWidgetFactories[ext] === name) {\n                    delete this._defaultWidgetFactories[ext];\n                }\n            }\n            for (const ext of Object.keys(this._defaultRenderedWidgetFactories)) {\n                if (this._defaultRenderedWidgetFactories[ext] === name) {\n                    delete this._defaultRenderedWidgetFactories[ext];\n                }\n            }\n            for (const ext of Object.keys(this._widgetFactoriesForFileType)) {\n                ArrayExt.removeFirstOf(this._widgetFactoriesForFileType[ext], name);\n                if (this._widgetFactoriesForFileType[ext].length === 0) {\n                    delete this._widgetFactoriesForFileType[ext];\n                }\n            }\n            for (const ext of Object.keys(this._defaultWidgetFactoryOverrides)) {\n                if (this._defaultWidgetFactoryOverrides[ext] === name) {\n                    delete this._defaultWidgetFactoryOverrides[ext];\n                }\n            }\n            this._changed.emit({\n                type: 'widgetFactory',\n                name,\n                change: 'removed'\n            });\n        });\n    }\n    /**\n     * Add a model factory to the registry.\n     *\n     * @param factory - The factory instance.\n     *\n     * @returns A disposable which will unregister the factory.\n     *\n     * #### Notes\n     * If a factory with the given `name` is already registered, or\n     * the given factory is already registered, a warning will be logged\n     * and this will be a no-op.\n     */\n    addModelFactory(factory) {\n        const name = factory.name.toLowerCase();\n        if (this._modelFactories[name]) {\n            console.warn(`Duplicate registered factory ${name}`);\n            return new DisposableDelegate(Private.noOp);\n        }\n        this._modelFactories[name] = factory;\n        this._changed.emit({\n            type: 'modelFactory',\n            name,\n            change: 'added'\n        });\n        return new DisposableDelegate(() => {\n            delete this._modelFactories[name];\n            this._changed.emit({\n                type: 'modelFactory',\n                name,\n                change: 'removed'\n            });\n        });\n    }\n    /**\n     * Add a widget extension to the registry.\n     *\n     * @param widgetName - The name of the widget factory.\n     *\n     * @param extension - A widget extension.\n     *\n     * @returns A disposable which will unregister the extension.\n     *\n     * #### Notes\n     * If the extension is already registered for the given\n     * widget name, a warning will be logged and this will be a no-op.\n     */\n    addWidgetExtension(widgetName, extension) {\n        widgetName = widgetName.toLowerCase();\n        if (!(widgetName in this._extenders)) {\n            this._extenders[widgetName] = [];\n        }\n        const extenders = this._extenders[widgetName];\n        const index = ArrayExt.firstIndexOf(extenders, extension);\n        if (index !== -1) {\n            console.warn(`Duplicate registered extension for ${widgetName}`);\n            return new DisposableDelegate(Private.noOp);\n        }\n        this._extenders[widgetName].push(extension);\n        this._changed.emit({\n            type: 'widgetExtension',\n            name: widgetName,\n            change: 'added'\n        });\n        return new DisposableDelegate(() => {\n            ArrayExt.removeFirstOf(this._extenders[widgetName], extension);\n            this._changed.emit({\n                type: 'widgetExtension',\n                name: widgetName,\n                change: 'removed'\n            });\n        });\n    }\n    /**\n     * Add a file type to the document registry.\n     *\n     * @params fileType - The file type object to register.\n     *\n     * @returns A disposable which will unregister the command.\n     *\n     * #### Notes\n     * These are used to populate the \"Create New\" dialog.\n     */\n    addFileType(fileType) {\n        const value = Object.assign(Object.assign(Object.assign({}, DocumentRegistry.fileTypeDefaults), fileType), (!(fileType.icon || fileType.iconClass) && { icon: fileIcon }));\n        this._fileTypes.push(value);\n        this._changed.emit({\n            type: 'fileType',\n            name: value.name,\n            change: 'added'\n        });\n        return new DisposableDelegate(() => {\n            ArrayExt.removeFirstOf(this._fileTypes, value);\n            this._changed.emit({\n                type: 'fileType',\n                name: fileType.name,\n                change: 'removed'\n            });\n        });\n    }\n    /**\n     * Get a list of the preferred widget factories.\n     *\n     * @param path - The file path to filter the results.\n     *\n     * @returns A new array of widget factories.\n     *\n     * #### Notes\n     * Only the widget factories whose associated model factory have\n     * been registered will be returned.\n     * The first item is considered the default. The returned array\n     * has widget factories in the following order:\n     * - path-specific default factory\n     * - path-specific default rendered factory\n     * - global default factory\n     * - all other path-specific factories\n     * - all other global factories\n     */\n    preferredWidgetFactories(path) {\n        const factories = new Set();\n        // Get the ordered matching file types.\n        const fts = this.getFileTypesForPath(PathExt.basename(path));\n        // Start with any user overrides for the defaults.\n        fts.forEach(ft => {\n            if (ft.name in this._defaultWidgetFactoryOverrides) {\n                factories.add(this._defaultWidgetFactoryOverrides[ft.name]);\n            }\n        });\n        // Next add the file type default factories.\n        fts.forEach(ft => {\n            if (ft.name in this._defaultWidgetFactories) {\n                factories.add(this._defaultWidgetFactories[ft.name]);\n            }\n        });\n        // Add the file type default rendered factories.\n        fts.forEach(ft => {\n            if (ft.name in this._defaultRenderedWidgetFactories) {\n                factories.add(this._defaultRenderedWidgetFactories[ft.name]);\n            }\n        });\n        // Add the global default factory.\n        if (this._defaultWidgetFactory) {\n            factories.add(this._defaultWidgetFactory);\n        }\n        // Add the file type factories in registration order.\n        fts.forEach(ft => {\n            if (ft.name in this._widgetFactoriesForFileType) {\n                each(this._widgetFactoriesForFileType[ft.name], n => {\n                    factories.add(n);\n                });\n            }\n        });\n        // Add the rest of the global factories, in registration order.\n        if ('*' in this._widgetFactoriesForFileType) {\n            each(this._widgetFactoriesForFileType['*'], n => {\n                factories.add(n);\n            });\n        }\n        // Construct the return list, checking to make sure the corresponding\n        // model factories are registered.\n        const factoryList = [];\n        factories.forEach(name => {\n            const factory = this._widgetFactories[name];\n            if (!factory) {\n                return;\n            }\n            const modelName = factory.modelName || 'text';\n            if (modelName in this._modelFactories) {\n                factoryList.push(factory);\n            }\n        });\n        return factoryList;\n    }\n    /**\n     * Get the default rendered widget factory for a path.\n     *\n     * @param path - The path to for which to find a widget factory.\n     *\n     * @returns The default rendered widget factory for the path.\n     *\n     * ### Notes\n     * If the widget factory has registered a separate set of `defaultRendered`\n     * file types and there is a match in that set, this returns that.\n     * Otherwise, this returns the same widget factory as\n     * [[defaultWidgetFactory]].\n     */\n    defaultRenderedWidgetFactory(path) {\n        // Get the matching file types.\n        const fts = this.getFileTypesForPath(PathExt.basename(path));\n        let factory = undefined;\n        // Find if a there is a default rendered factory for this type.\n        for (const ft of fts) {\n            if (ft.name in this._defaultRenderedWidgetFactories) {\n                factory = this._widgetFactories[this._defaultRenderedWidgetFactories[ft.name]];\n                break;\n            }\n        }\n        return factory || this.defaultWidgetFactory(path);\n    }\n    /**\n     * Get the default widget factory for a path.\n     *\n     * @param path - An optional file path to filter the results.\n     *\n     * @returns The default widget factory for an path.\n     *\n     * #### Notes\n     * This is equivalent to the first value in [[preferredWidgetFactories]].\n     */\n    defaultWidgetFactory(path) {\n        if (!path) {\n            return this._widgetFactories[this._defaultWidgetFactory];\n        }\n        return this.preferredWidgetFactories(path)[0];\n    }\n    /**\n     * Set overrides for the default widget factory for a file type.\n     *\n     * Normally, a widget factory informs the document registry which file types\n     * it should be the default for using the `defaultFor` option in the\n     * IWidgetFactoryOptions. This function can be used to override that after\n     * the fact.\n     *\n     * @param fileType: The name of the file type.\n     *\n     * @param factory: The name of the factory.\n     *\n     * #### Notes\n     * If `factory` is undefined, then any override will be unset, and the\n     * default factory will revert to the original value.\n     *\n     * If `factory` or `fileType` are not known to the docregistry, or\n     * if `factory` cannot open files of type `fileType`, this will throw\n     * an error.\n     */\n    setDefaultWidgetFactory(fileType, factory) {\n        fileType = fileType.toLowerCase();\n        if (!this.getFileType(fileType)) {\n            throw Error(`Cannot find file type ${fileType}`);\n        }\n        if (!factory) {\n            if (this._defaultWidgetFactoryOverrides[fileType]) {\n                delete this._defaultWidgetFactoryOverrides[fileType];\n            }\n            return;\n        }\n        if (!this.getWidgetFactory(factory)) {\n            throw Error(`Cannot find widget factory ${factory}`);\n        }\n        factory = factory.toLowerCase();\n        const factories = this._widgetFactoriesForFileType[fileType];\n        if (factory !== this._defaultWidgetFactory &&\n            !(factories && factories.includes(factory))) {\n            throw Error(`Factory ${factory} cannot view file type ${fileType}`);\n        }\n        this._defaultWidgetFactoryOverrides[fileType] = factory;\n    }\n    /**\n     * Create an iterator over the widget factories that have been registered.\n     *\n     * @returns A new iterator of widget factories.\n     */\n    widgetFactories() {\n        return map(Object.keys(this._widgetFactories), name => {\n            return this._widgetFactories[name];\n        });\n    }\n    /**\n     * Create an iterator over the model factories that have been registered.\n     *\n     * @returns A new iterator of model factories.\n     */\n    modelFactories() {\n        return map(Object.keys(this._modelFactories), name => {\n            return this._modelFactories[name];\n        });\n    }\n    /**\n     * Create an iterator over the registered extensions for a given widget.\n     *\n     * @param widgetName - The name of the widget factory.\n     *\n     * @returns A new iterator over the widget extensions.\n     */\n    widgetExtensions(widgetName) {\n        widgetName = widgetName.toLowerCase();\n        if (!(widgetName in this._extenders)) {\n            return empty();\n        }\n        return new ArrayIterator(this._extenders[widgetName]);\n    }\n    /**\n     * Create an iterator over the file types that have been registered.\n     *\n     * @returns A new iterator of file types.\n     */\n    fileTypes() {\n        return new ArrayIterator(this._fileTypes);\n    }\n    /**\n     * Get a widget factory by name.\n     *\n     * @param widgetName - The name of the widget factory.\n     *\n     * @returns A widget factory instance.\n     */\n    getWidgetFactory(widgetName) {\n        return this._widgetFactories[widgetName.toLowerCase()];\n    }\n    /**\n     * Get a model factory by name.\n     *\n     * @param name - The name of the model factory.\n     *\n     * @returns A model factory instance.\n     */\n    getModelFactory(name) {\n        return this._modelFactories[name.toLowerCase()];\n    }\n    /**\n     * Get a file type by name.\n     */\n    getFileType(name) {\n        name = name.toLowerCase();\n        return find(this._fileTypes, fileType => {\n            return fileType.name.toLowerCase() === name;\n        });\n    }\n    /**\n     * Get a kernel preference.\n     *\n     * @param path - The file path.\n     *\n     * @param widgetName - The name of the widget factory.\n     *\n     * @param kernel - An optional existing kernel model.\n     *\n     * @returns A kernel preference.\n     */\n    getKernelPreference(path, widgetName, kernel) {\n        widgetName = widgetName.toLowerCase();\n        const widgetFactory = this._widgetFactories[widgetName];\n        if (!widgetFactory) {\n            return void 0;\n        }\n        const modelFactory = this.getModelFactory(widgetFactory.modelName || 'text');\n        if (!modelFactory) {\n            return void 0;\n        }\n        const language = modelFactory.preferredLanguage(PathExt.basename(path));\n        const name = kernel && kernel.name;\n        const id = kernel && kernel.id;\n        return {\n            id,\n            name,\n            language,\n            shouldStart: widgetFactory.preferKernel,\n            canStart: widgetFactory.canStartKernel,\n            shutdownOnDispose: widgetFactory.shutdownOnClose\n        };\n    }\n    /**\n     * Get the best file type given a contents model.\n     *\n     * @param model - The contents model of interest.\n     *\n     * @returns The best matching file type.\n     */\n    getFileTypeForModel(model) {\n        switch (model.type) {\n            case 'directory':\n                return (find(this._fileTypes, ft => ft.contentType === 'directory') ||\n                    DocumentRegistry.defaultDirectoryFileType);\n            case 'notebook':\n                return (find(this._fileTypes, ft => ft.contentType === 'notebook') ||\n                    DocumentRegistry.defaultNotebookFileType);\n            default:\n                // Find the best matching extension.\n                if (model.name || model.path) {\n                    const name = model.name || PathExt.basename(model.path);\n                    const fts = this.getFileTypesForPath(name);\n                    if (fts.length > 0) {\n                        return fts[0];\n                    }\n                }\n                return this.getFileType('text') || DocumentRegistry.defaultTextFileType;\n        }\n    }\n    /**\n     * Get the file types that match a file name.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns An ordered list of matching file types.\n     */\n    getFileTypesForPath(path) {\n        const fts = [];\n        const name = PathExt.basename(path);\n        // Look for a pattern match first.\n        let ft = find(this._fileTypes, ft => {\n            return !!(ft.pattern && ft.pattern.match(name) !== null);\n        });\n        if (ft) {\n            fts.push(ft);\n        }\n        // Then look by extension name, starting with the longest\n        let ext = Private.extname(name);\n        while (ext.length > 1) {\n            ft = find(this._fileTypes, ft => ft.extensions.indexOf(ext) !== -1);\n            if (ft) {\n                fts.push(ft);\n            }\n            ext =\n                '.' +\n                    ext\n                        .split('.')\n                        .slice(2)\n                        .join('.');\n        }\n        return fts;\n    }\n}\n/**\n * The namespace for the `DocumentRegistry` class statics.\n */\n(function (DocumentRegistry) {\n    /**\n     * The defaults used for a file type.\n     */\n    DocumentRegistry.fileTypeDefaults = {\n        name: 'default',\n        extensions: [],\n        mimeTypes: [],\n        contentType: 'file',\n        fileFormat: 'text'\n    };\n    /**\n     * The default text file type used by the document registry.\n     */\n    DocumentRegistry.defaultTextFileType = Object.assign(Object.assign({}, DocumentRegistry.fileTypeDefaults), { name: 'text', mimeTypes: ['text/plain'], extensions: ['.txt'], icon: fileIcon });\n    /**\n     * The default notebook file type used by the document registry.\n     */\n    DocumentRegistry.defaultNotebookFileType = Object.assign(Object.assign({}, DocumentRegistry.fileTypeDefaults), { name: 'notebook', displayName: 'Notebook', mimeTypes: ['application/x-ipynb+json'], extensions: ['.ipynb'], contentType: 'notebook', fileFormat: 'json', icon: notebookIcon });\n    /**\n     * The default directory file type used by the document registry.\n     */\n    DocumentRegistry.defaultDirectoryFileType = Object.assign(Object.assign({}, DocumentRegistry.fileTypeDefaults), { name: 'directory', extensions: [], mimeTypes: ['text/directory'], contentType: 'directory', icon: folderIcon });\n    /**\n     * The default file types used by the document registry.\n     */\n    DocumentRegistry.defaultFileTypes = [\n        DocumentRegistry.defaultTextFileType,\n        DocumentRegistry.defaultNotebookFileType,\n        DocumentRegistry.defaultDirectoryFileType,\n        {\n            name: 'markdown',\n            displayName: 'Markdown File',\n            extensions: ['.md'],\n            mimeTypes: ['text/markdown'],\n            icon: markdownIcon\n        },\n        {\n            name: 'python',\n            displayName: 'Python File',\n            extensions: ['.py'],\n            mimeTypes: ['text/x-python'],\n            icon: pythonIcon\n        },\n        {\n            name: 'json',\n            displayName: 'JSON File',\n            extensions: ['.json'],\n            mimeTypes: ['application/json'],\n            icon: jsonIcon\n        },\n        {\n            name: 'csv',\n            displayName: 'CSV File',\n            extensions: ['.csv'],\n            mimeTypes: ['text/csv'],\n            icon: spreadsheetIcon\n        },\n        {\n            name: 'tsv',\n            displayName: 'TSV File',\n            extensions: ['.tsv'],\n            mimeTypes: ['text/csv'],\n            icon: spreadsheetIcon\n        },\n        {\n            name: 'r',\n            displayName: 'R File',\n            mimeTypes: ['text/x-rsrc'],\n            extensions: ['.r'],\n            icon: rKernelIcon\n        },\n        {\n            name: 'yaml',\n            displayName: 'YAML File',\n            mimeTypes: ['text/x-yaml', 'text/yaml'],\n            extensions: ['.yaml', '.yml'],\n            icon: yamlIcon\n        },\n        {\n            name: 'svg',\n            displayName: 'Image',\n            mimeTypes: ['image/svg+xml'],\n            extensions: ['.svg'],\n            icon: imageIcon,\n            fileFormat: 'base64'\n        },\n        {\n            name: 'tiff',\n            displayName: 'Image',\n            mimeTypes: ['image/tiff'],\n            extensions: ['.tif', '.tiff'],\n            icon: imageIcon,\n            fileFormat: 'base64'\n        },\n        {\n            name: 'jpeg',\n            displayName: 'Image',\n            mimeTypes: ['image/jpeg'],\n            extensions: ['.jpg', '.jpeg'],\n            icon: imageIcon,\n            fileFormat: 'base64'\n        },\n        {\n            name: 'gif',\n            displayName: 'Image',\n            mimeTypes: ['image/gif'],\n            extensions: ['.gif'],\n            icon: imageIcon,\n            fileFormat: 'base64'\n        },\n        {\n            name: 'png',\n            displayName: 'Image',\n            mimeTypes: ['image/png'],\n            extensions: ['.png'],\n            icon: imageIcon,\n            fileFormat: 'base64'\n        },\n        {\n            name: 'bmp',\n            displayName: 'Image',\n            mimeTypes: ['image/bmp'],\n            extensions: ['.bmp'],\n            icon: imageIcon,\n            fileFormat: 'base64'\n        }\n    ];\n})(DocumentRegistry || (DocumentRegistry = {}));\n/**\n * A private namespace for DocumentRegistry data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the extension name of a path.\n     *\n     * @param file - string.\n     *\n     * #### Notes\n     * Dotted filenames (e.g. `\".table.json\"` are allowed).\n     */\n    function extname(path) {\n        const parts = PathExt.basename(path).split('.');\n        parts.shift();\n        const ext = '.' + parts.join('.');\n        return ext.toLowerCase();\n    }\n    Private.extname = extname;\n    /**\n     * A no-op function.\n     */\n    function noOp() {\n        /* no-op */\n    }\n    Private.noOp = noOp;\n})(Private || (Private = {}));\n//# sourceMappingURL=registry.js.map"],"names":["Private","Context","constructor","options","this","_path","_useCRLF","_contentsModel","_populatedPromise","PromiseDelegate","_isPopulated","_isReady","_isDisposed","_pathChanged","Signal","_fileChanged","_saveState","_disposed","manager","_manager","_factory","factory","_dialogs","sessionDialogs","sessionContextDialogs","_opener","opener","noOp","contents","normalize","path","localPath","lang","preferredLanguage","PathExt","dbFactory","modelDBFactory","_modelDB","createNew","_model","_readyPromise","ready","then","promise","ext","sessionContext","SessionContext","sessionManager","sessions","specsManager","kernelspecs","type","name","kernelPreference","shouldStart","setBusy","propertyChanged","connect","_onSessionChanged","fileChanged","_onFileChanged","urlResolver","RenderMimeRegistry","pathChanged","sender","newPath","saveState","disposed","model","contentsModel","factoryName","isDisposed","dispose","emit","isReady","initialize","isNew","_save","connected","isPrepopulated","_revert","save","saveAs","getSavePath","get","_maybeOverWrite","catch","err","response","status","_finishSaveAs","async","url","getDownloadUrl","element","document","createElement","href","download","body","appendChild","click","removeChild","revert","createCheckpoint","deleteCheckpoint","checkpointId","restoreCheckpoint","listCheckpoints","checkpoints","length","id","addSibling","widget","DisposableDelegate","close","change","_a","_b","_c","oldPath","oldValue","newValue","indexOf","changeModel","replace","RegExp","last_modified","created","session","setPath","updateModel","Object","assign","setName","_updateContentsModel","newModel","content","undefined","writable","mimetype","format","mod","_populate","resolve","_maybeCheckpoint","defaultKernelName","language","defaultKernelLanguage","shouldSelect","selectKernel","fileFormat","toJSON","toString","contentType","value","modelDB","isCollaborative","_maybeSave","dirty","message","_handleError","initializeModel","opts","fromJSON","fromString","Promise","reject","Error","modified","tClient","Date","tDisk","getTime","_timeConflict","title","showErrorMessage","force","console","warn","revertBtn","Dialog","label","overwriteBtn","showDialog","buttons","result","button","delete","split","pop","saveBtn","SaveWidget","Widget","super","node","createSaveNode","getValue","input","DocumentModel","CodeEditor","languagePreference","_defaultLang","_dirty","_readOnly","_contentChanged","_stateChanged","changed","triggerContentChange","contentChanged","stateChanged","triggerStateChange","readOnly","text","JSON","parse","stringify","args","TextModelFactory","mode","Mode","Base64ModelFactory","ABCWidgetFactory","_widgetCreated","_name","_defaultFor","defaultFor","slice","_defaultRendered","defaultRendered","_fileTypes","fileTypes","_modelName","modelName","_preferKernel","preferKernel","_canStartKernel","canStartKernel","_shutdownOnClose","shutdownOnClose","_toolbarFactory","toolbarFactory","widgetCreated","context","source","createNewWidget","items","defaultToolbarFactory","forEach","item","toolbar","addItem","DocumentWidget","MainAreaWidget","reveal","all","_onPathChanged","_onModelStateChanged","_handleDirtyState","setFragment","fragment","className","MimeContent","_changeCallback","data","mimeType","_context","JSONExt","_fragment","_ready","_isRendering","_renderRequested","addClass","_dataType","dataType","renderer","layout","StackedLayout","addWidget","_render","activeElement","MessageLoop","_monitor","ActivityMonitor","signal","timeout","renderTimeout","activityStopped","update","reason","requestAnimationFrame","Printing","onUpdateRequest","msg","mimeModel","MimeModel","callback","metadata","renderModel","MimeDocument","MimeDocumentFactory","createRegistryOptions","_rendermime","rendermime","_renderTimeout","_fileType","primaryFileType","_d","_e","_f","ft","mimeTypes","clone","resolver","createRenderer","icon","iconClass","iconLabel","DocumentRegistry","_modelFactories","create","_widgetFactories","_defaultWidgetFactory","_defaultWidgetFactoryOverrides","_defaultWidgetFactories","_defaultRenderedWidgetFactories","_widgetFactoriesForFileType","_extenders","_changed","textModelFactory","initialFileTypes","defaultFileTypes","fileTypeDefaults","push","widgetName","addWidgetFactory","toLowerCase","keys","ArrayExt","addModelFactory","addWidgetExtension","extension","extenders","addFileType","fileType","fileIcon","preferredWidgetFactories","factories","Set","fts","getFileTypesForPath","add","each","n","factoryList","defaultRenderedWidgetFactory","defaultWidgetFactory","setDefaultWidgetFactory","getFileType","getWidgetFactory","includes","widgetFactories","map","modelFactories","widgetExtensions","ArrayIterator","empty","getModelFactory","find","getKernelPreference","kernel","widgetFactory","modelFactory","canStart","shutdownOnDispose","getFileTypeForModel","defaultDirectoryFileType","defaultNotebookFileType","defaultTextFileType","pattern","match","extname","extensions","join","displayName","notebookIcon","folderIcon","markdownIcon","pythonIcon","jsonIcon","spreadsheetIcon","rKernelIcon","yamlIcon","imageIcon","parts","shift"],"sourceRoot":""}