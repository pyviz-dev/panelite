{"version":3,"file":"3090.e048ab1.js","mappings":"kIAGAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMC,EAAc,EAAQ,OACtBC,EAAqB,EAAQ,OA+BnCH,EAAQI,YA9BR,MACIC,YAAYC,GACR,IAAIC,EACJC,KAAKC,aAAc,EACnBD,KAAKE,UAAY,IAAIR,EAAYS,OAAOH,MACxCA,KAAKI,eAAgDL,OAA9BA,EAAKD,EAAQM,gBAAgDL,EAAKJ,EAAmBU,iBAAiBC,eAK7HC,eACA,OAAOP,KAAKE,UAKZM,iBACA,OAAOR,KAAKC,YAKhBQ,UACQT,KAAKQ,aAGTR,KAAKE,UAAUQ,UAAKC,GACpBjB,EAAYS,OAAOS,UAAUZ,U,gBC9BrCV,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtBlB,EAAqB,EAAQ,OAqFnCH,EAAQsB,aA7ER,MAIIjB,YAAYC,EAAU,IAClB,IAAIC,EACJC,KAAKe,KAAO,GACZf,KAAKI,eAAgDL,OAA9BA,EAAKD,EAAQM,gBAAgDL,EAAKJ,EAAmBU,iBAAiBC,eAC7H,MAAM,QAAEU,EAAO,OAAEC,GAAWjB,KAAKI,eACjCJ,KAAKe,KAAOF,EAAYK,OAAOC,KAAKH,EAASC,EAb1B,aAkBnBG,kBACA,MAA4E,SAArEP,EAAYQ,WAAWC,UAAU,kBAAkBC,cAK1DC,kBACA,MAAwE,SAAjEX,EAAYQ,WAAWC,UAAU,cAAcC,cAK1DE,YACI,MAAM,KAAEV,EAAI,eAAEX,GAAmBJ,KAEjC,OADgBL,EAAmBU,iBAAiBqB,YAAYX,EAAM,GAAIX,GAErEuB,MAAKC,IACN,GAAwB,MAApBA,EAASC,OACT,MAAM,IAAIlC,EAAmBU,iBAAiByB,cAAcF,GAEhE,OAAOA,EAASG,UAEfJ,MAAKK,IACN,GAA2B,iBAAhBA,EAAKH,OACZ,MAAM,IAAII,MAAM,gBAEpB,GAA4B,iBAAjBD,EAAKE,QACZ,MAAM,IAAID,MAAM,gBAEpB,OAAOD,KAMfG,QACI,MAAM,KAAEpB,EAAI,eAAEX,GAAmBJ,KAGjC,OADgBL,EAAmBU,iBAAiBqB,YAAYX,EADnD,CAAEqB,OAAQ,QACqDhC,GAC7DuB,MAAKC,IAChB,GAAwB,MAApBA,EAASC,OACT,MAAM,IAAIlC,EAAmBU,iBAAiByB,cAAcF,EAAU,iBAE1E,GAAwB,MAApBA,EAASC,OAAgB,CACzB,MAAMK,EAAU,qBAAqBN,EAASC,uEAC9C,MAAM,IAAIlC,EAAmBU,iBAAiByB,cAAcF,EAAUM,OAOlFG,SACI,MAAM,KAAEtB,EAAI,eAAEX,GAAmBJ,KAGjC,OADgBL,EAAmBU,iBAAiBqB,YAAYX,EADnD,CAAEqB,OAAQ,UACqDhC,GAC7DuB,MAAKC,IAChB,GAAwB,MAApBA,EAASC,OACT,MAAM,IAAIlC,EAAmBU,iBAAiByB,cAAcF,S,gBClF5EtC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtByB,EAAM,EAAQ,QAsBD9C,EAAQ+C,gBAAkB/C,EAAQ+C,cAAgB,KADnDC,OANd,SAAgB1C,GACZ,MAAM2C,EAAU,IAAIC,EAAqB5C,GACzC,OAAO2C,EAAQE,OAAOhB,MAAK,IAChBc,KAQnB,MAAMC,EAIF7C,YAAYC,GACR,IAAIC,EACJC,KAAKe,KAAO,UACZ,MAAM6B,EAAY5C,KAAKI,eAAgDL,OAA9BA,EAAKD,EAAQM,gBAAgDL,EAAKuC,EAAIjC,iBAAiBC,eAChIN,KAAKe,KAAOF,EAAYK,OAAOC,KAAKyB,EAAS5B,QA9B1B,aA8BuD6B,mBAAmB/C,EAAQgD,OAKrGd,WACA,OAAOhC,KAAK+C,MAUhBC,aACI,MAAMpB,QAAiBU,EAAIjC,iBAAiBqB,YAAY1B,KAAKe,KAAM,GAAIf,KAAKI,gBAC5E,GAAwB,MAApBwB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAGhE5B,KAAK+C,YAAcnB,EAASG,OAchCiB,aAAaC,GACTjD,KAAK+C,MAAQzD,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIlD,KAAK+C,OAAQE,GAC1D,MAAME,EAAO,CACTf,OAAQ,QACRgB,KAAMC,KAAKC,UAAUL,IAEnBrB,QAAiBU,EAAIjC,iBAAiBqB,YAAY1B,KAAKe,KAAMoC,EAAMnD,KAAKI,gBAC9E,GAAwB,MAApBwB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAIhE,OADA5B,KAAK+C,YAAcnB,EAASG,OACrB/B,KAAK+C,OA6DpBvD,EAAQ+D,mBAvDR,MAII1D,YAAYC,GACR,IAAIC,EAAIyD,EACRxD,KAAKyD,WAAa,GAClBzD,KAAK0D,SAAW5D,EAAQ2C,QACxBzC,KAAK2D,UAAqC5D,OAAxBA,EAAKD,EAAQ8D,UAA0C7D,EAAK,GAC9EC,KAAKyD,WAAuCD,OAAzBA,EAAK1D,EAAQ+D,WAA2CL,EAAK,GAKpFM,IAAIC,GACA,MAAM/B,EAAOhC,KAAKgE,aAClB,OAAOD,KAAO/B,EAAOA,EAAK+B,GAAO/D,KAAK2D,UAAUI,GAapDE,IAAIF,EAAKtE,GACL,MAAMyE,EAAI,GAEV,GADAA,EAAEH,GAAOtE,EACLO,KAAKyD,WAAY,CACjB,MAAMU,EAAK,GAEX,OADAA,EAAGnE,KAAKyD,YAAcS,EACflE,KAAK0D,SAASU,OAAOD,GAG5B,OAAOnE,KAAK0D,SAASU,OAAOF,GASpCF,aACI,MAAMhC,EAAOhC,KAAK0D,SAAS1B,KAC3B,OAAIhC,KAAKyD,YAAczD,KAAKyD,cAAczB,EAC/BA,EAAKhC,KAAKyD,YAEdzB,K,sBC9If,IAAIqC,EAAgBrE,MAAQA,KAAKqE,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EAAa,IAAK,IAAIG,KAAKH,EAAShF,OAAOoF,eAAeC,KAAKL,EAAKG,KAAID,EAAOC,GAAKH,EAAIG,IAE5F,OADAD,EAAgB,QAAIF,EACbE,GAEXlF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtB+D,EAAc,EAAQ,OACtBlF,EAAc,EAAQ,OACtB4C,EAAM,EAAQ,OACduC,EAAWR,EAAa,EAAQ,QAYtC,IAuwBIS,EAtwBOC,GAAAA,EAeGvF,EAAQuF,WAAavF,EAAQuF,SAAW,KARzCC,sBAHT,SAA+BC,GAC3BJ,EAASG,sBAAsBC,IASnCF,EAASG,wBAHT,SAAiCC,GAC7BN,EAASK,wBAAwBC,IAqYzC3F,EAAQ4F,gBAzXR,MAMIvF,YAAYC,EAAU,IAClB,IAAIC,EAAIyD,EACRxD,KAAKC,aAAc,EACnBD,KAAKqF,kBAAoB,IAAIC,IAC7BtF,KAAKuF,aAAe,IAAI7F,EAAYS,OAAOH,MAC3C,MAAMI,EAAkBJ,KAAKI,eAAgDL,OAA9BA,EAAKD,EAAQM,gBAAgDL,EAAKuC,EAAIjC,iBAAiBC,eACtIN,KAAKwF,cAA6ChC,OAA5BA,EAAK1D,EAAQ2F,cAA8CjC,EAAK,IAAIkC,EAAM,CAAEtF,eAAAA,IAClGJ,KAAKwF,cAAcG,YAAYC,QAAQ5F,KAAK6F,eAAgB7F,MAK5D2F,kBACA,OAAO3F,KAAKuF,aAKZ/E,iBACA,OAAOR,KAAKC,YAKhBQ,UACQT,KAAKQ,aAGTR,KAAKC,aAAc,EACnBP,EAAYS,OAAOS,UAAUZ,OAKjC8F,SAASC,GACL/F,KAAKqF,kBAAkBpB,IAAI8B,EAAMjD,KAAMiD,GACvCA,EAAMJ,YAAYC,QAAQ5F,KAAK6F,eAAgB7F,MAOnDgG,kBAAkBC,GACd,IAAIlG,EAAIyD,EACR,MAAOuC,GAAS/F,KAAKkG,cAAcD,GACnC,OAAkFzC,OAA3EA,EAAsB,QAAhBzD,EAAKgG,SAA0B,IAAPhG,OAAgB,EAASA,EAAGoG,gBAAgD3C,EAAK,KAU1H4C,UAAUH,GACN,MAAMI,EAAQJ,EAAKK,MAAM,KACnBC,EAAaF,EAAM,GAAGC,MAAM,KAClC,OAA0B,IAAtBC,EAAWC,QAAiBxG,KAAKqF,kBAAkBoB,IAAIF,EAAW,IAG/D1F,EAAY6F,QAAQvF,KAAKoF,EAAWI,MAAM,GAAGxF,KAAK,QAASkF,EAAMM,MAAM,IAFnE9F,EAAY6F,QAAQE,YAAYX,GAa/CY,UAAUZ,GACN,MAAMI,EAAQJ,EAAKK,MAAM,KACzB,OAAqB,IAAjBD,EAAMG,OACC3F,EAAY6F,QAAQG,UAAUZ,GAElC,GAAGI,EAAM,MAAMxF,EAAY6F,QAAQG,UAAUR,EAAMM,MAAM,GAAGxF,KAAK,QAa5E2F,YAAYC,EAAMd,GACd,MAAMe,EAAYhH,KAAKgH,UAAUD,GAC3BX,EAAYpG,KAAKoG,UAAUW,GAC3BE,EAAWpG,EAAY6F,QAAQQ,QAAQ,IAAKd,EAAWH,GAC7D,OAAOe,EAAY,GAAGA,KAAaC,IAAaA,EAWpDD,UAAUf,GACN,MACMM,EADQN,EAAKK,MAAM,KACA,GAAGA,MAAM,KAClC,OAA0B,IAAtBC,EAAWC,OACJ,GAEPxG,KAAKqF,kBAAkBoB,IAAIF,EAAW,IAC/BA,EAAW,GAEf,GAWXzC,IAAImC,EAAMnG,GACN,MAAOiG,EAAOK,GAAapG,KAAKkG,cAAcD,GAC9C,OAAOF,EAAMjC,IAAIsC,EAAWtG,GAAS6B,MAAKwF,IACtC,MAAMC,EAAU,GAChB,MAA2B,cAAvBD,EAAcE,MAAwBF,EAAcG,SACpD1C,EAAY2C,KAAKJ,EAAcG,SAAUE,IACrCJ,EAAQK,KAAKnI,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIsE,GAAO,CAAEvB,KAAMjG,KAAK0H,cAAc3B,EAAOyB,EAAKvB,YAExF3G,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIiE,GAAgB,CAAElB,KAAMjG,KAAK0H,cAAc3B,EAAOK,GAAYkB,QAASF,KAGvG9H,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIiE,GAAgB,CAAElB,KAAMjG,KAAK0H,cAAc3B,EAAOK,QAcrGuB,eAAe1B,GACX,MAAOF,EAAOK,GAAapG,KAAKkG,cAAcD,GAC9C,OAAOF,EAAM4B,eAAevB,GAUhCwB,YAAY9H,EAAU,IAClB,GAAIA,EAAQmG,KAAM,CACd,MAAM4B,EAAa7H,KAAK6G,UAAU/G,EAAQmG,OACnCF,EAAOK,GAAapG,KAAKkG,cAAc2B,GAC9C,OAAO9B,EACF6B,YAAYtI,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIpD,GAAU,CAAEmG,KAAMG,KAC9DzE,MAAKwF,GACC7H,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIiE,GAAgB,CAAElB,KAAMpF,EAAY6F,QAAQvF,KAAK0G,EAAYV,EAAcrE,UAItH,OAAO9C,KAAKwF,cAAcoC,YAAY9H,GAU9CgI,OAAO7B,GACH,MAAOF,EAAOK,GAAapG,KAAKkG,cAAcD,GAC9C,OAAOF,EAAM+B,OAAO1B,GAYxB2B,OAAO9B,EAAM+B,GACT,MAAOC,EAAQC,GAASlI,KAAKkG,cAAcD,IACpCkC,EAAQC,GAASpI,KAAKkG,cAAc8B,GAC3C,GAAIC,IAAWE,EACX,MAAMlG,MAAM,6DAEhB,OAAOgG,EAAOF,OAAOG,EAAOE,GAAOzG,MAAKwF,GAC7B7H,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIiE,GAAgB,CAAElB,KAAMjG,KAAK0H,cAAcO,EAAQG,OAgBlGC,KAAKpC,EAAMnG,EAAU,IACjB,MAAM+H,EAAa7H,KAAK6G,UAAUZ,IAC3BF,EAAOK,GAAapG,KAAKkG,cAAcD,GAC9C,OAAOF,EACFsC,KAAKjC,EAAW9G,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIpD,GAAU,CAAEmG,KAAMG,KAClEzE,MAAKwF,GACC7H,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIiE,GAAgB,CAAElB,KAAM4B,MAgBvES,KAAKC,EAAUC,GACX,MAAOP,EAAQC,GAASlI,KAAKkG,cAAcqC,IACpCJ,EAAQC,GAASpI,KAAKkG,cAAcsC,GAC3C,GAAIP,IAAWE,EACX,OAAOF,EAAOK,KAAKJ,EAAOE,GAAOzG,MAAKwF,GAC3B7H,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIiE,GAAgB,CAAElB,KAAMjG,KAAK0H,cAAcO,EAAQd,EAAclB,UAI5G,MAAMhE,MAAM,6DAWpBwG,iBAAiBxC,GACb,MAAOF,EAAOK,GAAapG,KAAKkG,cAAcD,GAC9C,OAAOF,EAAM0C,iBAAiBrC,GAUlCsC,gBAAgBzC,GACZ,MAAOF,EAAOK,GAAapG,KAAKkG,cAAcD,GAC9C,OAAOF,EAAM2C,gBAAgBtC,GAWjCuC,kBAAkB1C,EAAM2C,GACpB,MAAO7C,EAAOK,GAAapG,KAAKkG,cAAcD,GAC9C,OAAOF,EAAM4C,kBAAkBvC,EAAWwC,GAW9CC,iBAAiB5C,EAAM2C,GACnB,MAAO7C,EAAOK,GAAapG,KAAKkG,cAAcD,GAC9C,OAAOF,EAAM8C,iBAAiBzC,EAAWwC,GAY7ClB,cAAc3B,EAAOK,GACjB,OAAIL,IAAU/F,KAAKwF,cACR3E,EAAY6F,QAAQE,YAAYR,GAGhC,GAAGL,EAAMjD,QAAQjC,EAAY6F,QAAQE,YAAYR,KAchEF,cAAcD,GACV,MAAMe,EAAYhH,KAAKgH,UAAUf,GAC3BG,EAAYpG,KAAKoG,UAAUH,GACjC,OAAIe,EACO,CAAChH,KAAKqF,kBAAkBvB,IAAIkD,GAAYZ,GAGxC,CAACpG,KAAKwF,cAAeY,GAQpCP,eAAeiD,EAAQC,GACnB,IAAIhJ,EAAIyD,EACR,GAAIsF,IAAW9I,KAAKwF,cAChBxF,KAAKuF,aAAa7E,KAAKqI,OAEtB,CACD,IAAIC,EAAW,KACXC,EAAW,MACc,QAAxBlJ,EAAKgJ,EAAKC,gBAA6B,IAAPjJ,OAAgB,EAASA,EAAGkG,QAC7D+C,EAAW1J,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAI6F,EAAKC,UAAW,CAAE/C,KAAMjG,KAAK0H,cAAcoB,EAAQC,EAAKC,SAAS/C,UAEnF,QAAxBzC,EAAKuF,EAAKE,gBAA6B,IAAPzF,OAAgB,EAASA,EAAGyC,QAC7DgD,EAAW3J,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAI6F,EAAKE,UAAW,CAAEhD,KAAMjG,KAAK0H,cAAcoB,EAAQC,EAAKE,SAAShD,SAEhHjG,KAAKuF,aAAa7E,KAAK,CACnB2G,KAAM0B,EAAK1B,KACX2B,SAAAA,EACAC,SAAAA,OAUhB,MAAMvD,EAMF7F,YAAYC,EAAU,IAClB,IAAIC,EAAIyD,EAAI0F,EACZlJ,KAAKC,aAAc,EACnBD,KAAKuF,aAAe,IAAI7F,EAAYS,OAAOH,MAC3CA,KAAK8C,KAA4B/C,OAApBA,EAAKD,EAAQgD,MAAsC/C,EAAK,UACrEC,KAAKmJ,aAA2C3F,OAA3BA,EAAK1D,EAAQsJ,aAA6C5F,EA1a7D,eA2alBxD,KAAKI,eAAgD8I,OAA9BA,EAAKpJ,EAAQM,gBAAgD8I,EAAK5G,EAAIjC,iBAAiBC,eAK9GqF,kBACA,OAAO3F,KAAKuF,aAKZ/E,iBACA,OAAOR,KAAKC,YAKhBQ,UACQT,KAAKQ,aAGTR,KAAKC,aAAc,EACnBP,EAAYS,OAAOS,UAAUZ,OAajCgD,UAAUoD,EAAWtG,GACjB,IAAIuJ,EAAMrJ,KAAKsJ,QAAQlD,GACvB,GAAItG,EAAS,CAEY,aAAjBA,EAAQuH,aACDvH,EAAgB,OAE3B,MAAMwH,EAAUxH,EAAQwH,QAAU,IAAM,IAClCiC,EAASjK,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIpD,GAAU,CAAEwH,QAAAA,IAC3D+B,GAAOxI,EAAYK,OAAOsI,oBAAoBD,GAElD,MAAM3G,EAAW5C,KAAKI,eAChBwB,QAAiBU,EAAIjC,iBAAiBqB,YAAY2H,EAAK,GAAIzG,GACjE,GAAwB,MAApBhB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAGhE,MAAMI,QAAaJ,EAASG,OAE5B,OADA8C,EAASG,sBAAsBhD,GACxBA,EAYX2F,eAAevB,GACX,MAAMpF,EAAUhB,KAAKI,eAAeY,QACpC,IAAIqI,EAAMxI,EAAYK,OAAOC,KAAKH,EA3exB,QA2e4CH,EAAYK,OAAOuI,YAAYrD,IACrF,MAAMsD,EAAiBC,SAASC,OAAOC,MAAM,uBAC7C,GAAIH,EAAgB,CAChB,MAAMI,EAAU,IAAIC,IAAIV,GACxBS,EAAQE,aAAaC,OAAO,QAASP,EAAe,IACpDL,EAAMS,EAAQI,WAElB,OAAOC,QAAQjD,QAAQmC,GAa3BrG,kBAAkBlD,EAAU,IACxB,IAAIC,EACJ,IAAIqD,EAAO,KACPtD,IACIA,EAAQsK,MACRtK,EAAQsK,IAAMtF,EAAQuF,mBAAmBvK,EAAQsK,MAErDhH,EAAOC,KAAKC,UAAUxD,IAE1B,MAAM8C,EAAW5C,KAAKI,eAChBiJ,EAAMrJ,KAAKsJ,QAA6BvJ,OAApBA,EAAKD,EAAQmG,MAAsClG,EAAK,IAC5EoD,EAAO,CACTf,OAAQ,OACRgB,KAAAA,GAEExB,QAAiBU,EAAIjC,iBAAiBqB,YAAY2H,EAAKlG,EAAMP,GACnE,GAAwB,MAApBhB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAGhE,MAAMI,QAAaJ,EAASG,OAO5B,OANA8C,EAASG,sBAAsBhD,GAC/BhC,KAAKuF,aAAa7E,KAAK,CACnB2G,KAAM,MACN4B,SAAU,KACVD,SAAUhH,IAEPA,EAYXgB,aAAaoD,GACT,MAAMiD,EAAMrJ,KAAKsJ,QAAQlD,GACnBxD,EAAW5C,KAAKI,eAEhBwB,QAAiBU,EAAIjC,iBAAiBqB,YAAY2H,EAD3C,CAAEjH,OAAQ,UAC4CQ,GAGnE,GAAwB,MAApBhB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAGhE5B,KAAKuF,aAAa7E,KAAK,CACnB2G,KAAM,SACN4B,SAAU,CAAEhD,KAAMG,GAClB4C,SAAU,OAgBlBhG,aAAasH,EAAcC,GACvB,MAAM3H,EAAW5C,KAAKI,eAChBiJ,EAAMrJ,KAAKsJ,QAAQgB,GACnBnH,EAAO,CACTf,OAAQ,QACRgB,KAAMC,KAAKC,UAAU,CAAE2C,KAAMsE,KAE3B3I,QAAiBU,EAAIjC,iBAAiBqB,YAAY2H,EAAKlG,EAAMP,GACnE,GAAwB,MAApBhB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAGhE,MAAMI,QAAaJ,EAASG,OAO5B,OANA8C,EAASG,sBAAsBhD,GAC/BhC,KAAKuF,aAAa7E,KAAK,CACnB2G,KAAM,SACN4B,SAAU,CAAEhD,KAAMqE,GAClBtB,SAAUhH,IAEPA,EAiBXgB,WAAWoD,EAAWtG,EAAU,IAC5B,MAAM8C,EAAW5C,KAAKI,eAChBiJ,EAAMrJ,KAAKsJ,QAAQlD,GACnBjD,EAAO,CACTf,OAAQ,MACRgB,KAAMC,KAAKC,UAAUxD,IAEnB8B,QAAiBU,EAAIjC,iBAAiBqB,YAAY2H,EAAKlG,EAAMP,GAEnE,GAAwB,MAApBhB,EAASC,QAAsC,MAApBD,EAASC,OAEpC,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAGhE,MAAMI,QAAaJ,EAASG,OAO5B,OANA8C,EAASG,sBAAsBhD,GAC/BhC,KAAKuF,aAAa7E,KAAK,CACnB2G,KAAM,OACN4B,SAAU,KACVD,SAAUhH,IAEPA,EAiBXgB,WAAWuF,EAAUC,GACjB,MAAM5F,EAAW5C,KAAKI,eAChBiJ,EAAMrJ,KAAKsJ,QAAQd,GACnBrF,EAAO,CACTf,OAAQ,OACRgB,KAAMC,KAAKC,UAAU,CAAEkH,UAAWjC,KAEhC3G,QAAiBU,EAAIjC,iBAAiBqB,YAAY2H,EAAKlG,EAAMP,GACnE,GAAwB,MAApBhB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAGhE,MAAMI,QAAaJ,EAASG,OAO5B,OANA8C,EAASG,sBAAsBhD,GAC/BhC,KAAKuF,aAAa7E,KAAK,CACnB2G,KAAM,MACN4B,SAAU,KACVD,SAAUhH,IAEPA,EAaXgB,uBAAuBoD,GACnB,MAAMiD,EAAMrJ,KAAKsJ,QAAQlD,EAAW,eAE9BxE,QAAiBU,EAAIjC,iBAAiBqB,YAAY2H,EAD3C,CAAEjH,OAAQ,QAC4CpC,KAAKI,gBACxE,GAAwB,MAApBwB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAGhE,MAAMI,QAAaJ,EAASG,OAE5B,OADA8C,EAASK,wBAAwBlD,GAC1BA,EAaXgB,sBAAsBoD,GAClB,MAAMiD,EAAMrJ,KAAKsJ,QAAQlD,EAAW,eAC9BxE,QAAiBU,EAAIjC,iBAAiBqB,YAAY2H,EAAK,GAAIrJ,KAAKI,gBACtE,GAAwB,MAApBwB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAGhE,MAAMI,QAAaJ,EAASG,OAC5B,IAAK0I,MAAMC,QAAQ1I,GACf,MAAM,IAAIC,MAAM,2BAEpB,IAAK,IAAI0I,EAAI,EAAGA,EAAI3I,EAAKwE,OAAQmE,IAC7B9F,EAASK,wBAAwBlD,EAAK2I,IAE1C,OAAO3I,EAcXgB,wBAAwBoD,EAAWwC,GAC/B,MAAMS,EAAMrJ,KAAKsJ,QAAQlD,EAAW,cAAewC,GAE7ChH,QAAiBU,EAAIjC,iBAAiBqB,YAAY2H,EAD3C,CAAEjH,OAAQ,QAC4CpC,KAAKI,gBACxE,GAAwB,MAApBwB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAgBpEoB,uBAAuBoD,EAAWwC,GAC9B,MAAMS,EAAMrJ,KAAKsJ,QAAQlD,EAAW,cAAewC,GAE7ChH,QAAiBU,EAAIjC,iBAAiBqB,YAAY2H,EAD3C,CAAEjH,OAAQ,UAC4CpC,KAAKI,gBACxE,GAAwB,MAApBwB,EAASC,OAET,YADkBS,EAAIjC,iBAAiByB,cAAcU,OAAOZ,GAOpE0H,WAAWP,GACP,MAAM1C,EAAQ0C,EAAK6B,KAAI3E,GAAQpF,EAAYK,OAAOuI,YAAYxD,KACxDjF,EAAUhB,KAAKI,eAAeY,QACpC,OAAOH,EAAYK,OAAOC,KAAKH,EAAShB,KAAKmJ,gBAAiB9C,IAGtE7G,EAAQkG,MAAQA,EAKhB,SAAWZ,GAYPA,EAAQuF,mBANR,SAA4BQ,GAIxB,OAHIA,EAAUrE,OAAS,GAAgC,IAA3BqE,EAAUC,QAAQ,OAC1CD,EAAY,IAAIA,KAEbA,GAVf,CAaG/F,IAAYA,EAAU,M,gBC7yBzBxF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMsL,EAAa,EAAQ,OAc3BvL,EAAQwF,sBAVR,SAA+BgG,GAC3BD,EAAWE,iBAAiBD,EAAO,OAAQ,UAC3CD,EAAWE,iBAAiBD,EAAO,OAAQ,UAC3CD,EAAWE,iBAAiBD,EAAO,OAAQ,UAC3CD,EAAWE,iBAAiBD,EAAO,UAAW,UAC9CD,EAAWE,iBAAiBD,EAAO,gBAAiB,UACpDD,EAAWE,iBAAiBD,EAAO,WAAY,UAC/CD,EAAWE,iBAAiBD,EAAO,UAAW,UAC9CD,EAAWE,iBAAiBD,EAAO,SAAU,WAUjDxL,EAAQ0F,wBAJR,SAAiC8F,GAC7BD,EAAWE,iBAAiBD,EAAO,KAAM,UACzCD,EAAWE,iBAAiBD,EAAO,gBAAiB,Y,gBCrBxD,SAASE,EAASC,GACd,IAAK,IAAIC,KAAKD,EAAQ3L,EAAQkF,eAAe0G,KAAI5L,EAAQ4L,GAAKD,EAAEC,IAEpE9L,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDyL,EAAS,EAAQ,QACjBA,EAAS,EAAQ,QACjBA,EAAS,EAAQ,QACjBA,EAAS,EAAQ,QACjBA,EAAS,EAAQ,QACjBA,EAAS,EAAQ,QACjBA,EAAS,EAAQ,QACjBA,EAAS,EAAQ,QACjBA,EAAS,EAAQ,QACjBA,EAAS,EAAQ,QACjBA,EAAS,EAAQ,S,sBCdjB,IAAI7G,EAAgBrE,MAAQA,KAAKqE,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EAAa,IAAK,IAAIG,KAAKH,EAAShF,OAAOoF,eAAeC,KAAKL,EAAKG,KAAID,EAAOC,GAAKH,EAAIG,IAE5F,OADAD,EAAgB,QAAIF,EACbE,GAEXlF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAM4L,EAAe,EAAQ,OACvBC,EAAgBjH,EAAa,EAAQ,OAI3C,MAAMkH,UAAoBF,EAAaG,mBAInC3L,YAAY4L,EAAQC,EAAIC,EAAQC,GAC5BC,MAAMD,GACN5L,KAAK8L,QAAU,GACf9L,KAAK+L,IAAM,GACX/L,KAAK+L,IAAML,EACX1L,KAAK8L,QAAUL,EACfzL,KAAKgM,QAAUL,EAKfM,aACA,OAAOjM,KAAK+L,IAKZG,iBACA,OAAOlM,KAAK8L,QAUZK,cACA,OAAOnM,KAAKoM,SAaZD,YAAQE,GACRrM,KAAKoM,SAAWC,EAKhBC,YACA,OAAOtM,KAAKuM,OASZD,UAAMD,GACNrM,KAAKuM,OAASF,EAUlBG,KAAKxK,EAAMyK,EAAUC,EAAU,IAC3B,GAAI1M,KAAKQ,YAAcR,KAAKgM,QAAQxL,WAChC,MAAM,IAAIyB,MAAM,eAEpB,MAAM0K,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,YACTC,QAAS,QACTC,SAAU/M,KAAKgM,QAAQe,SACvBC,QAAShN,KAAKgM,QAAQiB,SACtB3F,QAAS,CACL4F,QAASlN,KAAK+L,IACdoB,YAAanN,KAAK8L,QAClB9J,KAAOA,MAAAA,EAAmCA,EAAO,IAErDyK,SAAAA,EACAC,QAAAA,IAEJ,OAAO1M,KAAKgM,QAAQoB,iBAAiBT,GAAK,GAAO,GAUrDU,KAAKrL,EAAMyK,EAAUC,EAAU,GAAIY,GAAgB,GAC/C,GAAItN,KAAKQ,YAAcR,KAAKgM,QAAQxL,WAChC,MAAM,IAAIyB,MAAM,eAEpB,MAAM0K,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,WACTC,QAAS,QACTC,SAAU/M,KAAKgM,QAAQe,SACvBC,QAAShN,KAAKgM,QAAQiB,SACtB3F,QAAS,CACL4F,QAASlN,KAAK+L,IACd/J,KAAMA,GAEVyK,SAAAA,EACAC,QAAAA,IAEJ,OAAO1M,KAAKgM,QAAQoB,iBAAiBT,GAAK,EAAOW,GAarDC,MAAMvL,EAAMyK,EAAUC,EAAU,IAC5B,GAAI1M,KAAKQ,YAAcR,KAAKgM,QAAQxL,WAChC,MAAM,IAAIyB,MAAM,gBAEpB,MAAM0K,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,aACTC,QAAS,QACTC,SAAU/M,KAAKgM,QAAQe,SACvBC,QAAShN,KAAKgM,QAAQiB,SACtB3F,QAAS,CACL4F,QAASlN,KAAK+L,IACd/J,KAAOA,MAAAA,EAAmCA,EAAO,IAErDyK,SAAAA,EACAC,QAAAA,IAEEc,EAASxN,KAAKgM,QAAQoB,iBAAiBT,GAAK,GAAO,GACnDR,EAAUnM,KAAKoM,SAmBrB,OAlBID,GAeKA,EAdSb,EAAcsB,cAAc,CACtCC,QAAS,aACTC,QAAS,QACTC,SAAU/M,KAAKgM,QAAQe,SACvBC,QAAShN,KAAKgM,QAAQiB,SACtB3F,QAAS,CACL4F,QAASlN,KAAK+L,IACd/J,KAAOA,MAAAA,EAAmCA,EAAO,IAErDyK,SAAAA,EACAC,QAAAA,KAMR1M,KAAKS,UACE+M,GAGfhO,EAAQ+L,YAAcA,G,sBCrLtB,IAAIlH,EAAgBrE,MAAQA,KAAKqE,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EAAa,IAAK,IAAIG,KAAKH,EAAShF,OAAOoF,eAAeC,KAAKL,EAAKG,KAAID,EAAOC,GAAKH,EAAIG,IAE5F,OADAD,EAAgB,QAAIF,EACbE,GAEXlF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtB4M,EAAc,EAAQ,OACtB/N,EAAc,EAAQ,OACtB4C,EAAM,EAAQ,OACdoL,EAAS,EAAQ,OACjBpC,EAAgBjH,EAAa,EAAQ,OACrCsJ,EAAW,EAAQ,MACnBC,EAAYvJ,EAAa,EAAQ,QACjCQ,EAAWR,EAAa,EAAQ,QAChCwJ,EAAe,EAAQ,OACvBC,EAAUzJ,EAAa,EAAQ,QAC/B0J,EAA4B,eASlC,MAAMC,EAIFnO,YAAYC,GACR,IAAIC,EAAIyD,EAAI0F,EAAI+E,EAIhBjO,KAAKkO,cAAgB,KACjBlO,KAAKmO,mBAELnO,KAAKoO,eAELpO,KAAKqO,wBAAwB,cAC7B,MAAMzL,EAAW5C,KAAKI,eAChBkO,EAAazN,EAAYK,OAAOC,KAAKyB,EAAS2L,MAAOT,EAAQU,mBAAoB3L,mBAAmB7C,KAAK+L,MAEzG0C,EAAUH,EAAWI,QAAQ,+BAAgC,MACnEC,QAAQC,MAAM,uBAAuBH,KACrC,IAAIpF,EAAMxI,EAAYK,OAAOC,KAAKmN,EAAY,uBAAyBzL,mBAAmB7C,KAAK6O,YAC/F7O,KAAK8O,IAAM,IAAIlM,EAASmM,UAAU1F,GAElCrJ,KAAK8O,IAAIE,WAAa,cACtBhP,KAAK8O,IAAIG,UAAYjP,KAAKkP,aAC1BlP,KAAK8O,IAAIK,OAASnP,KAAKoP,UACvBpP,KAAK8O,IAAIO,QAAUrP,KAAKsP,WACxBtP,KAAK8O,IAAIS,QAAUvP,KAAKsP,YAM5BtP,KAAKoP,UAAaI,IACdxP,KAAKqO,wBAAwB,cAKjCrO,KAAKkP,aAAgBM,IAEjB,IAAI7C,EACJ,IACIA,EAAMiB,EAAU6B,YAAYD,EAAIxN,MAChC6C,EAAS6K,gBAAgB/C,GAE7B,MAAOgD,GAGH,MAFAA,EAAMzN,QAAU,oCAAoCyN,EAAMzN,UAEpDyN,EAGV3P,KAAK4P,eAAiBjD,EAAIkD,OAAO7C,QAEjChN,KAAK8P,UAAY9P,KAAK8P,UACjBnO,MAAK,IAGC3B,KAAK+P,eAAepD,KAE1BqD,OAAML,IAIHA,EAAMzN,QAAQ+N,WAAW,yBACzBtB,QAAQgB,MAAMA,MAItB3P,KAAKkQ,YAAYxP,KAAK,CAAEiM,IAAAA,EAAKwD,UAAW,UAK5CnQ,KAAKsP,WAAcE,IACVxP,KAAKQ,YACNR,KAAKoQ,cAGbpQ,KAAK+L,IAAM,GACX/L,KAAKqQ,MAAQ,GACbrQ,KAAKsQ,QAAU,UACftQ,KAAKuQ,kBAAoB,aACzBvQ,KAAK4P,eAAiB,GACtB5P,KAAKC,aAAc,EAInBD,KAAK8O,IAAM,KACX9O,KAAKwQ,UAAY,GACjBxQ,KAAKyQ,gBAAkB,EACvBzQ,KAAK0Q,kBAAoB,EACzB1Q,KAAK2Q,kBAAoB,KACzB3Q,KAAK4Q,SAAW,IAAItL,IACpBtF,KAAK6Q,OAAS,IAAIvL,IAClBtF,KAAK8Q,gBAAkBxR,OAAOkD,OAAO,MACrCxC,KAAK+Q,MAAQ,IAAItD,EAAYuD,gBAC7BhR,KAAKiR,iBAAmB,GACxBjR,KAAKkR,eAAiB,IAAIxR,EAAYS,OAAOH,MAC7CA,KAAKmR,yBAA2B,IAAIzR,EAAYS,OAAOH,MACvDA,KAAKE,UAAY,IAAIR,EAAYS,OAAOH,MACxCA,KAAKoR,cAAgB,IAAI1R,EAAYS,OAAOH,MAC5CA,KAAKkQ,YAAc,IAAIxQ,EAAYS,OAAOH,MAC1CA,KAAKqR,kBAAoB,IAAI3R,EAAYS,OAAOH,MAChDA,KAAKsR,sBAAwB,IAAIhM,IACjCtF,KAAKuR,mBAAqB,IAAIjM,IAC9BtF,KAAK8P,UAAY3F,QAAQjD,UACzBlH,KAAKwR,MAAQ,OAGbxR,KAAKqQ,MAAQvQ,EAAQkL,MAAMlI,KAC3B9C,KAAK+L,IAAMjM,EAAQkL,MAAMU,GACzB1L,KAAKI,eAAgDL,OAA9BA,EAAKD,EAAQM,gBAAgDL,EAAKuC,EAAIjC,iBAAiBC,eAC9GN,KAAK6O,UAAqCrL,OAAxBA,EAAK1D,EAAQmN,UAA0CzJ,EAAKiK,EAAYgE,KAAKC,QAC/F1R,KAAKwQ,UAAqCtH,OAAxBA,EAAKpJ,EAAQiN,UAA0C7D,EAAK,GAC9ElJ,KAAK2R,YAA0C1D,OAA3BA,EAAKnO,EAAQ6R,cAA6C1D,EAC9EjO,KAAKkO,gBAEAlO,KAAK4R,oBAEVrR,eACA,OAAOP,KAAKE,UAKZ2R,oBACA,OAAO7R,KAAKkR,eAKZY,8BACA,OAAO9R,KAAKmR,yBAQZY,mBACA,OAAO/R,KAAKoR,cASZY,uBACA,OAAOhS,KAAKqR,kBAKZrG,YACA,MAAO,CACHU,GAAI1L,KAAK0L,GACT5I,KAAM9C,KAAK8C,MAgBfmP,iBACA,OAAOjS,KAAKkQ,YAKZxE,SACA,OAAO1L,KAAK+L,IAKZjJ,WACA,OAAO9C,KAAKqQ,MAKZtD,eACA,OAAO/M,KAAKwQ,UAKZvD,eACA,OAAOjN,KAAK6O,UAKZhN,aACA,OAAO7B,KAAKsQ,QAKZ4B,uBACA,OAAOlS,KAAKuQ,kBAKZ/P,iBACA,OAAOR,KAAKC,YAOZkS,WACA,OAAOnS,KAAK+Q,MAAMqB,QAOlBC,WACA,OAAIrS,KAAKsS,eAGTtS,KAAKsS,aAAezE,EAAa0E,cAAcC,SAASxS,KAAKI,gBAAgBuB,MAAK8Q,GACvEA,EAAMC,YAAY1S,KAAKqQ,UAHvBrQ,KAAKsS,aAUpBK,MAAM7S,EAAU,IACZ,OAAO,IAAIkO,EAAiB1O,OAAO4D,OAAO,CAAE8H,MAAOhL,KAAKgL,MAAO+B,SAAU/M,KAAK+M,SAAU3M,eAAgBJ,KAAKI,eAEzGuR,aAAa,GAAS7R,IAK9BW,UACQT,KAAKQ,aAGTR,KAAKC,aAAc,EACnBD,KAAKE,UAAUQ,OACfV,KAAKqO,wBAAwB,gBAC7BrO,KAAK4S,oBACL5S,KAAKiR,iBAAmB,GACxBjR,KAAKoO,eAEL1O,EAAYS,OAAOS,UAAUZ,OAoBjCoN,iBAAiBT,EAAKkG,GAAc,EAAOvF,GAAgB,GACvD,OAAOtN,KAAK8S,wBAAwBnF,EAASoF,yBAA0BpG,EAAKkG,EAAavF,GAoB7F0F,mBAAmBrG,EAAKkG,GAAc,EAAOvF,GAAgB,GACzD,OAAOtN,KAAK8S,wBAAwBnF,EAASsF,2BAA4BtG,EAAKkG,EAAavF,GAE/FwF,wBAAwBI,EAAMvG,EAAKkG,GAAc,EAAOvF,GAAgB,GACpEtN,KAAKmT,aAAaxG,GAClB3M,KAAKkQ,YAAYxP,KAAK,CAAEiM,IAAAA,EAAKwD,UAAW,SACxC,MAAM3C,EAAS,IAAI0F,GAAK,KACpB,MAAME,EAAQzG,EAAIkD,OAAOwD,OACzBrT,KAAK4Q,SAAS9I,OAAOsL,GAErB,MAAME,EAAatT,KAAKuR,mBAAmBzN,IAAIsP,GAC1CE,IAGLA,EAAWC,SAAQC,IACf,MAAMC,EAASzT,KAAKsR,sBAAsBxN,IAAI0P,GAC9C,GAAIC,EAAQ,CACR,MAAMC,EAAMD,EAAO3I,QAAQsI,GAC3B,IAAa,IAATM,EACA,OAEkB,IAAlBD,EAAOjN,OACPxG,KAAKsR,sBAAsBxJ,OAAO0L,IAGlCC,EAAOE,OAAOD,EAAK,GACnB1T,KAAKsR,sBAAsBrN,IAAIuP,EAAWC,QAItDzT,KAAKuR,mBAAmBzJ,OAAOsL,MAChCzG,EAAKkG,EAAavF,EAAetN,MAEpC,OADAA,KAAK4Q,SAAS3M,IAAI0I,EAAIkD,OAAOwD,OAAQ7F,GAC9BA,EAQX2F,aAAaxG,EAAKiH,GAAQ,GACtB,GAAoB,SAAhB5T,KAAK6B,OACL,MAAM,IAAII,MAAM,kBAGpB,GAA8B,cAA1BjC,KAAKkS,kBACLlS,KAAK4P,iBAAmB7B,EACxB/N,KAAK8O,IAAIzB,KAAKO,EAAUA,UAAUjB,QAEjC,KAAIiH,EAIL,MAAM,IAAI3R,MAAM,0BAHhBjC,KAAKiR,iBAAiBxJ,KAAKkF,IAmBnC3J,kBACI,GAAoB,SAAhBhD,KAAK6B,OACL,MAAM,IAAII,MAAM,kBAEpB,OAAO6L,EAAQ+F,gBAAgB7T,KAAK0L,GAAI1L,KAAKI,gBAoBjD4C,gBACI,GAAoB,SAAhBhD,KAAK6B,OACL,MAAM,IAAII,MAAM,kBAEpBjC,KAAK4S,oBACL5S,KAAK8T,cAAc,cACnB9T,KAAK4P,eAAiB7B,QAChBD,EAAQiG,cAAc/T,KAAK0L,GAAI1L,KAAKI,gBAS9C4T,YACIhU,KAAKmO,mBACL,MAAM3J,EAAS,IAAIiJ,EAAYuD,gBAGzBiD,EAAU,CAACnL,EAAQjH,KACN,cAAXA,GACA2C,EAAO0C,UACPlH,KAAK8R,wBAAwBoC,WAAWD,EAASjU,OAEjC,iBAAX6B,IACL2C,EAAO2P,OAAO,IAAIlS,MAAM,mCACxBjC,KAAK8R,wBAAwBoC,WAAWD,EAASjU,QAWzD,OARAA,KAAK8R,wBAAwBlM,QAAQqO,EAASjU,MAE9CA,KAAK0Q,kBAAoB,EAGzB1Q,KAAKoQ,aAGE5L,EAAO4N,QAelBpP,iBACwB,SAAhBhD,KAAK6B,cACCiM,EAAQsG,eAAepU,KAAK0L,GAAI1L,KAAKI,gBAE/CJ,KAAKqU,iBAUTA,iBACIrU,KAAK8T,cAAc,QACnB9T,KAAKS,UAWTuC,0BACI,MAAM2J,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,sBACTC,QAAS,QACTC,SAAU/M,KAAKwQ,UACfxD,QAAShN,KAAK6O,UACdvH,QAAS,KAEb,IAAIgN,EACJ,IACIA,QAAexP,EAAQyP,mBAAmBvU,KAAM2M,GAEpD,MAAO6H,GAEH,GAAIxU,KAAKQ,WACL,OAGA,MAAMgU,EAId,GADAxU,KAAKmO,mBACAmG,EASL,YAH6B3T,IAAzB2T,EAAMhN,QAAQzF,SACdyS,EAAMhN,QAAQzF,OAAS,MAEE,OAAzByS,EAAMhN,QAAQzF,QACd7B,KAAK+Q,MAAMoD,OAAO,6BACXG,IAEXtU,KAAK+Q,MAAM7J,QAAQoN,EAAMhN,SACzBtH,KAAK4P,eAAiB0E,EAAMzE,OAAO7C,QAC5BsH,GAWXG,gBAAgBnN,GACZ,MAAMqF,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,mBACTC,QAAS,QACTC,SAAU/M,KAAKwQ,UACfxD,QAAShN,KAAK6O,UACdvH,QAAAA,IAEJ,OAAOxC,EAAQyP,mBAAmBvU,KAAM2M,GAW5C+H,eAAepN,GACX,MAAMqF,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,kBACTC,QAAS,QACTC,SAAU/M,KAAKwQ,UACfxD,QAAShN,KAAK6O,UACdvH,QAASA,IAEb,OAAOxC,EAAQyP,mBAAmBvU,KAAM2M,GAW5CgI,eAAerN,GACX,MAAMqF,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,kBACTC,QAAS,QACTC,SAAU/M,KAAKwQ,UACfxD,QAAShN,KAAK6O,UACdvH,QAAAA,IAEJ,OAAOxC,EAAQyP,mBAAmBvU,KAAM2M,GAiB5CiI,eAAetN,EAASgG,GAAgB,EAAMb,GAC1C,MAOME,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,kBACTC,QAAS,QACTC,SAAU/M,KAAKwQ,UACfxD,QAAShN,KAAK6O,UACdvH,QAAShI,OAAO4D,OAAO5D,OAAO4D,OAAO,GAZxB,CACb2R,QAAQ,EACRC,eAAe,EACfC,iBAAkB,GAClBC,aAAa,EACbC,eAAe,IAOqC3N,GACpDmF,SAAAA,IAEJ,OAAOzM,KAAKoN,iBAAiBT,GAAK,EAAMW,GAY5C4H,aAAa5N,EAASgG,GAAgB,GAClC,MAAMX,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,gBACTC,QAAS,UACTC,SAAU/M,KAAKwQ,UACfxD,QAAShN,KAAK6O,UACdvH,QAAAA,IAEJ,OAAOtH,KAAKgT,mBAAmBrG,GAAK,EAAMW,GAW9C6H,kBAAkB7N,GACd,MAAMqF,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,sBACTC,QAAS,QACTC,SAAU/M,KAAKwQ,UACfxD,QAAShN,KAAK6O,UACdvH,QAAAA,IAEJ,OAAOxC,EAAQyP,mBAAmBvU,KAAM2M,GAS5CyI,gBAAgB9N,GACZ,MAAMqF,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,oBACTC,QAAS,QACTC,SAAU/M,KAAKwQ,UACfxD,QAAShN,KAAK6O,UACdvH,QAAAA,IAEJ,OAAOxC,EAAQyP,mBAAmBvU,KAAM2M,GAQ5C0I,eAAe/N,GACX,MAAMqF,EAAMrB,EAAcsB,cAAc,CACpCC,QAAS,cACTC,QAAS,QACTC,SAAU/M,KAAKwQ,UACfxD,QAAShN,KAAK6O,UACdvH,QAAAA,IAEJtH,KAAKmT,aAAaxG,GAClB3M,KAAKkQ,YAAYxP,KAAK,CAAEiM,IAAAA,EAAKwD,UAAW,SAS5CmF,WAAWpJ,EAAYD,EAASwB,EAAYgE,KAAKC,SAC7C,IAAK1R,KAAK2R,YACN,MAAM,IAAI1P,MAAM,gDAEpB,GAAIjC,KAAK6Q,OAAOpK,IAAIwF,GAChB,MAAM,IAAIhK,MAAM,2BAEpB,MAAMsT,EAAO,IAAI7H,EAAOnC,YAAYW,EAAYD,EAAQjM,MAAM,KAC1DA,KAAKwV,gBAAgBvJ,MAGzB,OADAjM,KAAK6Q,OAAO5M,IAAIgI,EAAQsJ,GACjBA,EAKXE,QAAQxJ,GACJ,OAAOjM,KAAK6Q,OAAOpK,IAAIwF,GAoB3ByJ,mBAAmBxJ,EAAYyJ,GACtB3V,KAAK2R,cAGV3R,KAAK8Q,gBAAgB5E,GAAcyJ,GAYvCC,iBAAiB1J,EAAYyJ,GACpB3V,KAAK2R,cAGL3R,KAAKQ,YAAcR,KAAK8Q,gBAAgB5E,KAAgByJ,UAClD3V,KAAK8Q,gBAAgB5E,IA0BpC2J,oBAAoBzC,EAAO0C,GACvB,IAAI/V,EACJ,MAAMyN,EAAkC,QAAxBzN,EAAKC,KAAK4Q,gBAA6B,IAAP7Q,OAAgB,EAASA,EAAG+D,IAAIsP,GAC5E5F,GACAA,EAAOqI,oBAAoBC,GAWnCC,kBAAkB3C,EAAO0C,GACrB,IAAI/V,EACJ,MAAMyN,EAAkC,QAAxBzN,EAAKC,KAAK4Q,gBAA6B,IAAP7Q,OAAgB,EAASA,EAAG+D,IAAIsP,GAC5E5F,GACAA,EAAOuI,kBAAkBD,GAQjC9S,uBAAuBwQ,EAAW7G,GAC9B,IAAI5M,EAAIyD,EACR,MAAM4P,EAAQzG,EAAIqJ,cAAc3C,OAChC,IAAI4C,EAAYjW,KAAKsR,sBAAsBxN,IAAI0P,GAC/C,GAAIyC,EAAW,CAGX,MAAMC,EAAY,CACdrG,OAAQpC,EAAY0I,QAAQC,SAASzJ,EAAIkD,QACzCmG,cAAevI,EAAY0I,QAAQC,SAASzJ,EAAIqJ,eAChDvJ,SAAUgB,EAAY0I,QAAQC,SAASzJ,EAAIF,UAC3CnF,QAASmG,EAAY0I,QAAQC,SAASzJ,EAAIrF,SAC1CwF,QAASH,EAAIG,QACbJ,QAASC,EAAID,QAAUC,EAAID,QAAQ/F,QAAU,IAEjDuP,EAAUrG,OAAOwG,SAAW,4BACtBlM,QAAQmM,IAAIL,EAAUrL,KAAI5H,MAAOuT,IACnC,MAAM/I,EAASxN,KAAK4Q,UAAY5Q,KAAK4Q,SAAS9M,IAAIyS,GAC9C/I,SACMA,EAAOgJ,UAAUN,OAKnC,GAA4B,wBAAxBvJ,EAAIkD,OAAOwG,SAEX,OAAO,EAIXJ,EAA8DlW,OAAjDA,EAAKC,KAAKsR,sBAAsBxN,IAAI0P,IAA4CzT,EAAK,IAChE,IAA9BkW,EAAUnL,QAAQsI,IAClB6C,EAAUxO,KAAK2L,GAEnBpT,KAAKsR,sBAAsBrN,IAAIuP,EAAWyC,GAE1C,MAAM3C,EAAwD9P,OAA1CA,EAAKxD,KAAKuR,mBAAmBzN,IAAIsP,IAAwC5P,EAAK,GAMlG,OALmC,IAA/B8P,EAAWxI,QAAQsI,IACnBE,EAAW7L,KAAK2L,GAEpBpT,KAAKuR,mBAAmBtN,IAAImP,EAAOE,IAE5B,EAMXtQ,uBACIhD,KAAK4S,oBACL5S,KAAK8T,cAAc,cAKnB2C,YAAW,KAIFzW,KAAKgU,YACLhU,KAAK4R,sBACX,GAWPxD,eACqB,OAAbpO,KAAK8O,MAEL9O,KAAK8O,IAAIK,OAASnP,KAAKwR,MACvBxR,KAAK8O,IAAIO,QAAUrP,KAAKwR,MACxBxR,KAAK8O,IAAIS,QAAUvP,KAAKwR,MACxBxR,KAAK8O,IAAIG,UAAYjP,KAAKwR,MAC1BxR,KAAK8O,IAAIvB,QACTvN,KAAK8O,IAAM,MAMnBgF,cAAcjS,GACN7B,KAAKsQ,UAAYzO,GAA2B,SAAjB7B,KAAKsQ,UAGpCtQ,KAAKsQ,QAAUzO,EACfiD,EAAQ4R,gBAAgB1W,MACxBA,KAAKkR,eAAexQ,KAAKmB,GACV,SAAXA,GACA7B,KAAKS,WAMbkW,eAII,KAAiC,cAA1B3W,KAAKkS,kBACRlS,KAAK4P,iBAAmB7B,GACxB/N,KAAKiR,iBAAiBzK,OAAS,GAC/BxG,KAAKmT,aAAanT,KAAKiR,iBAAiB,IAAI,GAG5CjR,KAAKiR,iBAAiB2F,QAM9BhE,oBACI5S,KAAK4P,eAAiB,GACtB5P,KAAK4Q,SAAS2C,SAAQ/F,IAClBA,EAAO/M,aAEXT,KAAK6Q,OAAO0C,SAAQgC,IAChBA,EAAK9U,aAETT,KAAK8P,UAAY3F,QAAQjD,UACzBlH,KAAK4Q,SAAW,IAAItL,IACpBtF,KAAK6Q,OAAS,IAAIvL,IAClBtF,KAAKsR,sBAAsBuF,QAC3B7W,KAAKuR,mBAAmBsF,QAY5BC,sBAAsBnK,GAElB,GADA3M,KAAKmO,mBACDxB,EAAIkD,OAAO7C,UAAYhN,KAAK4P,eAC5B,MAAM,IAAI3N,MAAM,sCAAsC0K,EAAIkD,OAAOwG,YAMzErT,sBAAsB2J,GAClB3M,KAAK8W,sBAAsBnK,GAC3B,MAAMrF,EAAUqF,EAAIrF,QACdiO,EAAO,IAAI7H,EAAOnC,YAAYjE,EAAQ6F,YAAa7F,EAAQ4F,QAASlN,MAAM,KAC5EA,KAAKwV,gBAAgBlO,EAAQ4F,YAEjClN,KAAK6Q,OAAO5M,IAAIqD,EAAQ4F,QAASqI,GACjC,IACI,MAAM9J,QAAe3G,EAAQiS,WAAWzP,EAAQ6F,YAAa7F,EAAQ0P,cAAehX,KAAK8Q,uBACnFrF,EAAO8J,EAAM5I,GAEvB,MAAO6H,GAKH,MAFAe,EAAKhI,QACLoB,QAAQgB,MAAM,8BACR6E,GAMdxR,uBAAuB2J,GACnB3M,KAAK8W,sBAAsBnK,GAC3B,MAAMrF,EAAUqF,EAAIrF,QACdiO,EAAOvV,KAAK6Q,OAAO/M,IAAIwD,EAAQ4F,SACrC,IAAKqI,EAED,YADA5G,QAAQgB,MAAM,8BAAgCrI,EAAQ4F,SAG1DlN,KAAKwV,gBAAgBD,EAAKtJ,QAC1B,MAAME,EAAUoJ,EAAKpJ,QACjBA,SAEMA,EAAQQ,GAElB4I,EAAK9U,UAKTuC,qBAAqB2J,GACjB3M,KAAK8W,sBAAsBnK,GAC3B,MAAMrF,EAAUqF,EAAIrF,QACdiO,EAAOvV,KAAK6Q,OAAO/M,IAAIwD,EAAQ4F,SACrC,IAAKqI,EACD,OAEJ,MAAMjJ,EAAQiJ,EAAKjJ,MACfA,SAEMA,EAAMK,GAMpB6I,gBAAgBvJ,GACZjM,KAAK6Q,OAAO/I,OAAOmE,GAKvBoC,wBAAwB6D,GAChBlS,KAAKuQ,oBAAsB2B,IAG/BlS,KAAKuQ,kBAAoB2B,EAEA,eAArBA,IACAlS,KAAK0Q,kBAAoB,EACzBuG,aAAajX,KAAK2Q,oBAEF,SAAhB3Q,KAAK6B,SACoB,cAArBqQ,EAGIlS,KAAKiR,iBAAiBzK,OAAS,EAC/BxG,KAAK2W,eAGA3W,KAAK4R,oBAMd5R,KAAK8T,cAAc,YAI3B9T,KAAKmR,yBAAyBzQ,KAAKwR,IAEvClP,qBAAqB2J,GACjB,IAAI5M,EAAIyD,EACR,IAAI0T,GAAU,EAMd,GAL4B,mBAAxBvK,EAAIkD,OAAOwG,WACXrW,KAAK4P,eAAiBjD,EAAIkD,OAAO7C,QACjChN,KAAK2W,gBAGLhK,EAAIqJ,eACY,UAAhBrJ,EAAIG,UACHxB,EAAc6L,iBAAiBxK,IAC5BrB,EAAc8L,uBAAuBzK,IACrCrB,EAAc+L,mBAAmB1K,IAAO,CAE5C,MACM6G,GAD0CzT,OAA7BA,EAAK4M,EAAIrF,QAAQgQ,WAA2CvX,EAAK,IAC5C,WACpCyT,IACA0D,QAAgBlX,KAAKuX,iBAAiB/D,EAAW7G,GAEjD3M,KAAK8W,sBAAsBnK,IAGnC,IAAKuK,GAAWvK,EAAIqJ,cAAe,CAC/B,MAAMwB,EAAe7K,EAAIqJ,cACnBxI,EAAkC,QAAxBhK,EAAKxD,KAAK4Q,gBAA6B,IAAPpN,OAAgB,EAASA,EAAGM,IAAI0T,EAAanE,QAC7F,GAAI7F,QACMA,EAAOgJ,UAAU7J,GACvB3M,KAAK8W,sBAAsBnK,OAE1B,CAED,MAAM8K,EAAQD,EAAaxK,UAAYhN,KAAKiN,SACxB,UAAhBN,EAAIG,SAAuB2K,GAC3BzX,KAAKqR,kBAAkB3Q,KAAKiM,IAIxC,GAAoB,UAAhBA,EAAIG,QAAqB,CACzB,OAAQH,EAAIkD,OAAOwG,UACf,IAAK,SAED,MAAMqB,EAAiB/K,EAAIrF,QACtBqQ,gBACkB,mBAAnBD,GAOKvN,QAAQjD,UAAUvF,MAAKqB,gBAIlBhD,KAAK4X,iBACX5X,KAAK8T,cAAc,qBAGJ,eAAnB4D,GACKvN,QAAQjD,UAAUvF,MAAKqB,gBAClBhD,KAAK4X,iBACX5X,KAAK4P,eAAiBjD,EAAIkD,OAAO7C,QACjChN,KAAK8T,cAAc,iBAG3B9T,KAAK8T,cAAc4D,GACnB,MACJ,IAAK,YACG1X,KAAK2R,mBACC3R,KAAK6X,gBAAgBlL,GAE/B,MACJ,IAAK,WACG3M,KAAK2R,mBACC3R,KAAK8X,eAAenL,GAE9B,MACJ,IAAK,aACG3M,KAAK2R,mBACC3R,KAAK+X,iBAAiBpL,GAOnC3M,KAAKQ,aACNR,KAAK8W,sBAAsBnK,GAE3B3M,KAAKoR,cAAc1Q,KAAKiM,KAOpCyD,aAKI,GAJApQ,KAAKmO,mBAEL8I,aAAajX,KAAK2Q,mBAEd3Q,KAAK0Q,kBAAoB1Q,KAAKyQ,gBAAiB,CAC/CzQ,KAAKqO,wBAAwB,cAK7B,MAAM2J,EAAUlT,EAAQmT,sBAAsB,EAAG,KAAOC,KAAKC,IAAI,EAAGnY,KAAK0Q,mBAAqB,IAC9F/B,QAAQgB,MAAM,oCAAoCuI,KAAKE,MAAMJ,EAAU,iBACvEhY,KAAK2Q,kBAAoB8F,WAAWzW,KAAKkO,cAAe8J,GACxDhY,KAAK0Q,mBAAqB,OAG1B1Q,KAAKqO,wBAAwB,gBAGjCrO,KAAKoO,eAKTD,mBACI,GAAInO,KAAKQ,WACL,MAAM,IAAIyB,MAAM,kCAQ5B,IAAI6C,EAJJtF,EAAQwO,iBAAmBA,EAK3B,SAAWlJ,GAePA,EAAQ4R,gBAXR,SAAyB/K,GACrB,OAAQA,EAAO9J,QACX,IAAK,OACL,IAAK,OACL,IAAK,UACD,OACJ,QACI8M,QAAQC,MAAM,WAAWjD,EAAO9J,WAAW8J,EAAOD,SAY9D5G,EAAQyP,mBAJRvR,eAAkC2I,EAAQgB,GAEtC,OADehB,EAAOyB,iBAAiBT,GAAK,GAC9B0L,MAyClBvT,EAAQiS,WA5BR,SAAoBjU,EAAMwV,EAAYC,GAClC,OAAO,IAAIpO,SAAQ,CAACjD,EAASiN,KACzB,IAAIpU,EAEJ,GAAIuY,EAAY,CACZ,GAAyB,oBAAdE,UACP,MAAM,IAAIvW,MAAM,uBAEpBuW,UAAU,CAACF,IAAchU,SACH,IAAdA,EAAIxB,GAEJqR,EAAO,IAAIlS,MADC,WAAWa,2BAA8BwV,OAIrDpR,EAAQ5C,EAAIxB,MAEjBqR,QAGqB,QAAnBpU,EAAKwY,SAA6B,IAAPxY,OAAgB,EAASA,EAAG+C,IACxDoE,EAAQqR,EAASzV,IAGjBqR,EAAO,IAAIlS,MAAM,WAAWa,iCAsB5CgC,EAAQmT,sBALR,SAA+BQ,EAAKC,GAGhC,OAFAD,EAAMP,KAAKS,KAAKF,GAChBC,EAAMR,KAAKE,MAAMM,GACVR,KAAKE,MAAMF,KAAKU,UAAYF,EAAMD,EAAM,IAAMA,GA7E7D,CAgFG3T,IAAYA,EAAU,M,qBCnwCzB,IAAIT,EAAgBrE,MAAQA,KAAKqE,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EAAa,IAAK,IAAIG,KAAKH,EAAShF,OAAOoF,eAAeC,KAAKL,EAAKG,KAAID,EAAOC,GAAKH,EAAIG,IAE5F,OADAD,EAAgB,QAAIF,EACbE,GAEXlF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtBwK,EAAe,EAAQ,OACvBC,EAAgBjH,EAAa,EAAQ,OAS3C,MAAMwU,UAA4BxN,EAAaG,mBAI3C3L,YAAYwM,EAAIM,EAAKkG,EAAavF,EAAe3B,GAC7CE,MAAMQ,GACNrM,KAAKsQ,QAAU,EACftQ,KAAK8Y,OAAShU,EAAQiU,KACtB/Y,KAAKgZ,OAASlU,EAAQiU,KACtB/Y,KAAKiZ,OAASnU,EAAQiU,KACtB/Y,KAAKkZ,MAAQ,IAAIrY,EAAYmQ,gBAC7BhR,KAAKmZ,OAAS,IAAIrU,EAAQsU,SAC1BpZ,KAAKqZ,gBAAiB,EACtBrZ,KAAKsZ,KAAO3M,EACPkG,GACD7S,KAAKuZ,SAASzU,EAAQ0U,iBAAiBC,UAE3CzZ,KAAKqZ,eAAiB/L,EACtBtN,KAAKgM,QAAUL,EAKfgB,UACA,OAAO3M,KAAKsZ,KAKZjB,WACA,OAAOrY,KAAKkZ,MAAM9G,QAKlBsH,cACA,OAAO1Z,KAAKiZ,OAKZS,YAAQrN,GACRrM,KAAKiZ,OAAS5M,EAKdsN,cACA,OAAO3Z,KAAKgZ,OAKZW,YAAQtN,GACRrM,KAAKgZ,OAAS3M,EAKduN,cACA,OAAO5Z,KAAK8Y,OAKZc,YAAQvN,GACRrM,KAAK8Y,OAASzM,EAqBlBwJ,oBAAoBC,GAChB,GAAI9V,KAAKQ,WACL,MAAM,IAAIyB,MAAM,6BAEpBjC,KAAKmZ,OAAOU,IAAI/D,GAUpBC,kBAAkBD,GACV9V,KAAKQ,YAGTR,KAAKmZ,OAAOW,OAAOhE,GAKvBT,eAAe/N,GACXtH,KAAKgM,QAAQqJ,eAAe/N,GAKhC7G,UACIT,KAAK8Y,OAAShU,EAAQiU,KACtB/Y,KAAKgZ,OAASlU,EAAQiU,KACtB/Y,KAAKiZ,OAASnU,EAAQiU,KACtB/Y,KAAKmZ,OAAS,KACTnZ,KAAK+Z,UAAUjV,EAAQ0U,iBAAiBQ,UAmBzCha,KAAKkZ,MAAM9G,QAAQpC,OAAM,SAGzBhQ,KAAKkZ,MAAM/E,OAAO,IAAIlS,MAAM,uBAAuBjC,KAAK2M,IAAIkD,OAAOwG,+CAEvExK,MAAMpL,UAKVuC,gBAAgB2J,GACZ,OAAQA,EAAIG,SACR,IAAK,UACL,IAAK,QACGH,EAAIG,UAAY9M,KAAK2M,IAAIG,SACzBH,EAAIqJ,cAAc3C,SAAWrT,KAAK2M,IAAIkD,OAAOwD,cACvCrT,KAAKia,aAAatN,GAE5B,MACJ,IAAK,cACK3M,KAAKka,aAAavN,GACxB,MACJ,IAAK,cACK3M,KAAKma,aAAaxN,IAMpC3J,mBAAmB2J,GACf,MAAM2H,EAAQtU,KAAKiZ,OACf3E,SAEMA,EAAM3H,GAEhB3M,KAAKoa,UAAYzN,EACjB3M,KAAKuZ,SAASzU,EAAQ0U,iBAAiBC,UACnCzZ,KAAK+Z,UAAUjV,EAAQ0U,iBAAiBa,UACxCra,KAAKsa,cAGbtX,mBAAmB2J,GACf,MAAM4N,EAAQva,KAAK8Y,OACfyB,SAEMA,EAAM5N,GAGpB3J,mBAAmB2J,GACf,MAAM6N,QAAgBxa,KAAKmZ,OAAOqB,QAAQ7N,GACpC8N,EAAQza,KAAKgZ,OACfwB,GAAWC,SAELA,EAAM9N,GAEZrB,EAAcoP,YAAY/N,IACM,SAAhCA,EAAIrF,QAAQqQ,kBACZ3X,KAAKuZ,SAASzU,EAAQ0U,iBAAiBa,SACnCra,KAAK+Z,UAAUjV,EAAQ0U,iBAAiBC,WACxCzZ,KAAKsa,eAIjBA,cACQta,KAAK+Z,UAAUjV,EAAQ0U,iBAAiBQ,UAG5Cha,KAAKuZ,SAASzU,EAAQ0U,iBAAiBQ,QACvCha,KAAKkZ,MAAMhS,QAAQlH,KAAKoa,WACpBpa,KAAKqZ,gBACLrZ,KAAKS,WAMbsZ,UAAUY,GAEN,OAAiC,IAAzB3a,KAAKsQ,QAAUqK,GAK3BpB,SAASoB,GAEL3a,KAAKsQ,SAAWqK,GAUxB,IAAI7V,EAPJtF,EAAQqZ,oBAAsBA,EAG9BrZ,EAAQyT,2BAFR,cAAyC4F,IAKzCrZ,EAAQuT,yBAFR,cAAuC8F,IAIvC,SAAW/T,GAIPA,EAAQiU,KAAO,OAWf,MAAM6B,EAC0C,mBAA1BC,sBACNA,sBAAwBC,aAqHxC,IAAItB,EAJJ1U,EAAQsU,SA/GR,MACIvZ,cACIG,KAAKmZ,OAAS,GAOlBU,IAAI/D,GACA9V,KAAK8Z,OAAOhE,GACZ9V,KAAKmZ,OAAO1R,KAAKqO,GAOrBgE,OAAOhE,GACH,MAAMiF,EAAQ/a,KAAKmZ,OAAOrO,QAAQgL,GAC9BiF,GAAS,IACT/a,KAAKmZ,OAAO4B,GAAS,KACrB/a,KAAKgb,oBAmBbhY,cAAc2J,SAEJ3M,KAAKib,YAEX,MAAMC,EAAa,IAAIra,EAAYmQ,gBAEnC,IAAImK,EADJnb,KAAKib,YAAcC,EAAW9I,QAK9B,IAAK,IAAIzH,EAAI3K,KAAKmZ,OAAO3S,OAAS,EAAGmE,GAAK,EAAGA,IAAK,CAC9C,MAAMmL,EAAO9V,KAAKmZ,OAAOxO,GAEzB,GAAa,OAATmL,EAAJ,CAIA,IAEIqF,QAAyBrF,EAAKnJ,GAElC,MAAOyO,GACHD,GAAmB,EACnBxM,QAAQgB,MAAMyL,GAGlB,IAAyB,IAArBD,EAEA,OADAD,EAAWhU,aAAQvG,IACZ,GAKf,OADAua,EAAWhU,aAAQvG,IACZ,EAKXqa,mBACShb,KAAKqb,oBACNrb,KAAKqb,mBAAoB,EAKzBT,GAAM,KACF5a,KAAKib,YAAcjb,KAAKib,YAAYtZ,MAAK,KACrC3B,KAAKqb,mBAAoB,EACzBrb,KAAKsb,kBAQrBA,WACI,IAAIC,EAAW,EACf,IAAK,IAAI5Q,EAAI,EAAG6Q,EAAMxb,KAAKmZ,OAAO3S,OAAQmE,EAAI6Q,EAAK7Q,IAAK,CACpD,MAAMmL,EAAO9V,KAAKmZ,OAAOxO,GACF,OAAnB3K,KAAKmZ,OAAOxO,GACZ4Q,IAGAvb,KAAKmZ,OAAOxO,EAAI4Q,GAAYzF,EAGpC9V,KAAKmZ,OAAO3S,QAAU+U,IAQ9B,SAAW/B,GACPA,EAAiBA,EAA2B,SAAI,GAAK,WACrDA,EAAiBA,EAA0B,QAAI,GAAK,UACpDA,EAAiBA,EAAyB,OAAI,GAAK,SACnDA,EAAiBA,EAAgC,cAAI,GAAK,gBAJ9D,CAKGA,EAAmB1U,EAAQ0U,mBAAqB1U,EAAQ0U,iBAAmB,KA5IlF,CA6IG1U,IAAYA,EAAU,M,sBCzYzB,IAAIT,EAAgBrE,MAAQA,KAAKqE,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EAAa,IAAK,IAAIG,KAAKH,EAAShF,OAAOoF,eAAeC,KAAKL,EAAKG,KAAID,EAAOC,GAAKH,EAAIG,IAE5F,OADAD,EAAgB,QAAIF,EACbE,GAEXlF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAEtD,MAAMgc,EAASpX,EAAa,EAAQ,QACpC7E,EAAQic,OAASA,EACjB,MAAMnQ,EAAgBjH,EAAa,EAAQ,OAC3C7E,EAAQ8L,cAAgBA,EACxB,MAAMoQ,EAAYrX,EAAa,EAAQ,QACvC7E,EAAQkc,UAAYA,EAjBpB,SAAkBvQ,GACd,IAAK,IAAIC,KAAKD,EAAQ3L,EAAQkF,eAAe0G,KAAI5L,EAAQ4L,GAAKD,EAAEC,IAiBpEF,CAAS,EAAQ,S,cClBjB5L,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,K,gBCAtDH,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMmF,EAAc,EAAQ,OACtB+W,EAAY,EAAQ,OACpBjc,EAAc,EAAQ,OACtB4C,EAAM,EAAQ,OACdsZ,EAAgB,EAAQ,MACxBC,EAAY,EAAQ,OACpBC,EAAY,EAAQ,OAI1B,MAAMC,UAAsBH,EAAchc,YAMtCC,YAAYC,EAAU,IAClB,IAAIC,EACJ8L,MAAM/L,GACNE,KAAKgc,UAAW,EAChBhc,KAAKic,mBAAqB,IAAIC,IAC9Blc,KAAKmc,QAAU,IAAI7W,IACnBtF,KAAKoc,gBAAkB,IAAI1c,EAAYS,OAAOH,MAC9CA,KAAKqc,mBAAqB,IAAI3c,EAAYS,OAAOH,MAEjDA,KAAKsc,YAAc,IAAIX,EAAUY,KAAK,CAClCC,MAAM,EACNC,QAAS,IAAMzc,KAAK0c,iBACpBC,UAAW,CACPC,SAAU,IACVC,SAAS,EACTnE,IAAK,KAET5V,KAAM,4CACNga,SAAU/c,EAAKD,EAAQgd,QAAU/c,MAAAA,EAA+BA,EAAK,iBAGzEC,KAAK+c,OAAS,iBACJ/c,KAAKsc,YAAYU,cACjBhd,KAAKsc,YAAYW,KACvBjd,KAAKgc,UAAW,GAHN,GASdkB,cACA,OAAOld,KAAKgc,SAKZmB,YACA,OAAOnd,KAAK+c,OAKZK,qBACA,OAAOpd,KAAKoc,gBAKZiB,wBACA,OAAOrd,KAAKqc,mBAKhB5b,UACQT,KAAKQ,aAGTR,KAAKmc,QAAQtF,QACb7W,KAAKic,mBAAmB1I,SAAQ+J,GAAKA,EAAE7c,YACvCT,KAAKsc,YAAY7b,UACjBoL,MAAMpL,WAWV8c,UAAUzd,GACN,IAAIC,EACJ,MAAM,GAAE2L,GAAO5L,EAAQkL,MACvB,IAAI2G,EAA0C5R,OAA3BA,EAAKD,EAAQ6R,cAA6C5R,EAE7E,QAA4BY,IAAxBb,EAAQ6R,YACR,IAAK,MAAM6L,KAAMxd,KAAKic,mBAClB,GAAIuB,EAAG9R,KAAOA,GAAM8R,EAAG7L,YAAa,CAChCA,GAAc,EACd,MAIZ,MAAM8L,EAAmB,IAAI3B,EAAU9N,iBAAiB1O,OAAO4D,OAAO5D,OAAO4D,OAAO,CAAEyO,YAAAA,GAAe7R,GAAU,CAAEM,eAAgBJ,KAAKI,kBAStI,OARAJ,KAAK0d,WAAWD,GACXzd,KAAKmc,QAAQ1V,IAAIiF,IAGb1L,KAAK2d,iBAAiB3N,OAAM,SAI9ByN,EAOXG,UACI,OAAOhZ,EAAYiZ,KAAK,IAAI7d,KAAKmc,QAAQ2B,WAW7C9a,6BACUhD,KAAKsc,YAAYyB,gBACjB/d,KAAKsc,YAAYW,KAc3Bja,eAAegb,EAAgB,GAAIC,EAAiB,IAChD,MAAMjT,QAAc6Q,EAAUqC,SAASF,EAAehe,KAAKI,gBAC3D,OAAOJ,KAAKud,UAAUje,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAI+a,GAAiB,CAAEjT,MAAAA,KAS7EhI,eAAe0I,SACLmQ,EAAUzH,eAAe1I,EAAI1L,KAAKI,sBAClCJ,KAAK2d,iBAOf3a,0BAEUhD,KAAK2d,uBAELxT,QAAQmM,IAAI,IAAItW,KAAKmc,QAAQgC,QAAQvT,KAAIc,GAAMmQ,EAAUzH,eAAe1I,EAAI1L,KAAKI,yBAEjFJ,KAAK2d,iBASf3a,eAAe0I,GACX,OAAI1L,KAAKmc,QAAQ1V,IAAIiF,UAGf1L,KAAK2d,iBAFA3d,KAAKmc,QAAQrY,IAAI4H,GAQhC1I,uBACI,IAAIjD,EACJ,IAAIqe,EACJ,IACIA,QAAevC,EAAUwC,YAAYre,KAAKI,gBAE9C,MAAOgb,GAOH,MAJIA,aAAe9Y,EAAIjC,iBAAiBie,cACqC,OAAhD,QAAvBve,EAAKqb,EAAIxZ,gBAA6B,IAAP7B,OAAgB,EAASA,EAAG8B,UAC7D7B,KAAKqc,mBAAmB3b,KAAK0a,GAE3BA,EAENpb,KAAKQ,YAGLR,KAAKmc,QAAQoC,OAASH,EAAO5X,QAC7B5B,EAAY4Z,MAAMJ,GAAQd,IACtB,MAAMmB,EAAWze,KAAKmc,QAAQrY,IAAIwZ,EAAE5R,IACpC,QAAK+S,GAGEA,EAAS3b,OAASwa,EAAExa,UAMnC9C,KAAKmc,QAAU,IAAI7W,IAAI8Y,EAAOxT,KAAI0S,GAAK,CAACA,EAAE5R,GAAI4R,MAG9Ctd,KAAKic,mBAAmB1I,SAAQiK,IACvBxd,KAAKmc,QAAQ1V,IAAI+W,EAAG9R,KACrB8R,EAAGnJ,oBAGXrU,KAAKoc,gBAAgB1b,KAAK0d,IAK9BV,WAAWD,GACPzd,KAAKic,mBAAmBpC,IAAI4D,GAC5BA,EAAiB5L,cAAcjM,QAAQ5F,KAAK0e,iBAAkB1e,MAC9Dyd,EAAiBld,SAASqF,QAAQ5F,KAAK2e,YAAa3e,MAExD2e,YAAYlB,GACRzd,KAAKic,mBAAmBnU,OAAO2V,GAK1Bzd,KAAK2d,iBAAiB3N,OAAM,SAIrC0O,iBAAiBjB,EAAkB5b,GAChB,SAAXA,GAIK7B,KAAK2d,iBAAiB3N,OAAM,UAM7CxQ,EAAQuc,cAAgBA,G,eCpQxBzc,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OAmB5BrB,EAAQoN,cAlBR,SAAuB9M,GACnB,IAAIC,EAAIyD,EAAI0F,EAAI+E,EAAI2Q,EACpB,MAAO,CACHlS,SAAU3M,EAAKD,EAAQ4M,QAAU3M,MAAAA,EAA+BA,EAAK,IACrE+M,QAAShN,EAAQgN,QACjBxF,QAASxH,EAAQwH,QACjBuI,OAAQ,CACJgP,MAAM,IAAIC,MAAOC,cACjB1L,QAAS7P,EAAK1D,EAAQsT,MAAQ5P,MAAAA,EAA+BA,EAAK3C,EAAY4Q,KAAKC,SACnF2E,SAAUvW,EAAQ+M,QAClBG,QAASlN,EAAQkN,QACjBD,UAAW7D,EAAKpJ,EAAQiN,SAAW7D,MAAAA,EAA+BA,EAAK,IACvE8V,QAAS,OAEbvS,UAAWwB,EAAKnO,EAAQ2M,SAAWwB,MAAAA,EAA+BA,EAAK,IACvE+H,eAAgB4I,EAAK9e,EAAQ0X,aAAeoH,MAAAA,EAA+BA,EAAK,MAUxFpf,EAAQyf,YAHR,SAAqBtS,GACjB,MAA+B,WAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQ2X,iBAHR,SAA0BxK,GACtB,MAA+B,iBAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQ4X,uBAHR,SAAgCzK,GAC5B,MAA+B,wBAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQ0f,kBAHR,SAA2BvS,GACvB,MAA+B,kBAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQ6X,mBAHR,SAA4B1K,GACxB,MAA+B,mBAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQ2f,WAHR,SAAoBxS,GAChB,MAA+B,UAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQkb,YAHR,SAAqB/N,GACjB,MAA+B,WAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQ4f,iBAHR,SAA0BzS,GACtB,MAA+B,iBAAxBA,EAAIkD,OAAOwG,UAgBtB7W,EAAQ6f,gBAHR,SAAyB1S,GACrB,MAA+B,gBAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQ8f,cAHR,SAAuB3S,GACnB,MAA+B,cAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQ+f,eAHR,SAAwB5S,GACpB,MAA+B,eAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQggB,aAHR,SAAsB7S,GAClB,MAA+B,aAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQigB,iBAHR,SAA0B9S,GACtB,MAA+B,wBAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQkgB,kBAHR,SAA2B/S,GACvB,MAA+B,kBAAxBA,EAAIkD,OAAOwG,UAgBtB7W,EAAQmgB,kBAHR,SAA2BhT,GACvB,MAA+B,kBAAxBA,EAAIkD,OAAOwG,UAgBtB7W,EAAQogB,gBAHR,SAAyBjT,GACrB,MAA+B,gBAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQqgB,kBAHR,SAA2BlT,GACvB,MAA+B,kBAAxBA,EAAIkD,OAAOwG,UAStB7W,EAAQsgB,gBAHR,SAAyBnT,GACrB,MAA+B,gBAAxBA,EAAIkD,OAAOwG,W,gBCrKtB/W,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAME,EAAqB,EAAQ,OAC7BkB,EAAc,EAAQ,OACtBkK,EAAa,EAAQ,OAI3BvL,EAAQgP,mBAAqB,cAwB7BhP,EAAQ6e,YAXRrb,eAA2BJ,EAAWjD,EAAmBU,iBAAiBC,gBACtE,MAAM+I,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQgP,oBACxD5M,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAAK,GAAIzG,GAChF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OAE5B,OADAgJ,EAAWgV,eAAe/d,GACnBA,GA8BXxC,EAAQ0e,SAfRlb,eAAwBlD,EAAU,GAAI8C,EAAWjD,EAAmBU,iBAAiBC,gBACjF,MAAM+I,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQgP,oBACxDrL,EAAO,CACTf,OAAQ,OACRgB,KAAMC,KAAKC,UAAUxD,IAEnB8B,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAAKlG,EAAMP,GAClF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OAE5B,OADAgJ,EAAWiV,cAAche,GAClBA,GAsBXxC,EAAQuU,cAXR/Q,eAA6B0I,EAAI9I,EAAWjD,EAAmBU,iBAAiBC,gBAC5E,MAAM+I,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQgP,mBAAoB3L,mBAAmB6I,GAAK,WAEpG9J,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAD1D,CAAEjH,OAAQ,QAC2DQ,GAClF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OAC5BgJ,EAAWiV,cAAche,IAoB7BxC,EAAQqU,gBATR7Q,eAA+B0I,EAAI9I,EAAWjD,EAAmBU,iBAAiBC,gBAC9E,MAAM+I,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQgP,mBAAoB3L,mBAAmB6I,GAAK,aAEpG9J,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAD1D,CAAEjH,OAAQ,QAC2DQ,GAClF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,IAiCnFpC,EAAQ4U,eAbRpR,eAA8B0I,EAAI9I,EAAWjD,EAAmBU,iBAAiBC,gBAC7E,MAAM+I,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQgP,mBAAoB3L,mBAAmB6I,IAE/F9J,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAD1D,CAAEjH,OAAQ,UAC2DQ,GAClF,GAAwB,MAApBhB,EAASC,OAAgB,CACzB,MAAM8K,EAAM,eAAejB,kCAC3BiD,QAAQsR,KAAKtT,QAEZ,GAAwB,MAApB/K,EAASC,OAEd,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,IA2BnFpC,EAAQ0gB,eAdRld,eAA8B0I,EAAI9I,EAAWjD,EAAmBU,iBAAiBC,gBAC7E,MAAM+I,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQgP,mBAAoB3L,mBAAmB6I,IAC/F9J,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAAK,GAAIzG,GAChF,GAAwB,MAApBhB,EAASC,OACT,OAEC,GAAwB,MAApBD,EAASC,OAEd,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OAE5B,OADAgJ,EAAWiV,cAAche,GAClBA,I,cCnJX1C,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAiBtDD,EAAQiQ,YAVR,SAAqBzN,GACjB,IAAIvC,EAOJ,OALIA,EADgB,iBAATuC,EACCqB,KAAK8c,MAAMne,GA8B3B,SAA2Boe,GACvB,MAAMpe,EAAO,IAAIqe,SAASD,GAEpBE,EAAQte,EAAKue,UAAU,GACvBC,EAAU,GAChB,GAAIF,EAAQ,EACR,MAAM,IAAIre,MAAM,mCAEpB,IAAK,IAAI0I,EAAI,EAAGA,GAAK2V,EAAO3V,IACxB6V,EAAQ/Y,KAAKzF,EAAKue,UAAc,EAAJ5V,IAEhC,MAAM8V,EAAY,IAAIC,WAAWN,EAAIzZ,MAAM6Z,EAAQ,GAAIA,EAAQ,KACzD7T,EAAMtJ,KAAK8c,MAAM,IAAIQ,YAAY,QAAQC,OAAOH,IAEtD9T,EAAID,QAAU,GACd,IAAK,IAAI/B,EAAI,EAAGA,EAAI2V,EAAO3V,IAAK,CAC5B,MAAMqS,EAAQwD,EAAQ7V,GAChBkW,EAAOL,EAAQ7V,EAAI,IAAMyV,EAAIU,WACnCnU,EAAID,QAAQjF,KAAK,IAAI4Y,SAASD,EAAIzZ,MAAMqW,EAAO6D,KAEnD,OAAOlU,EA/CKoU,CAAkB/e,GAEvBvC,GAqBXD,EAAQoO,UAXR,SAAmBjB,GACf,IAAI5M,EACJ,IAAIN,EAOJ,OALIA,GADuB,QAAtBM,EAAK4M,EAAID,eAA4B,IAAP3M,OAAgB,EAASA,EAAGyG,QAuCnE,SAAyBmG,GACrB,MAAM6T,EAAU,GACV9T,EAAU,GACVsU,EAAU,IAAIC,YACpB,IAAIC,EAAc,QACEvgB,IAAhBgM,EAAID,UACJwU,EAAcvU,EAAID,eACXC,EAAa,SAExB,MAAMwU,EAAWH,EAAQI,OAAO/d,KAAKC,UAAUqJ,IAC/CD,EAAQjF,KAAK0Z,EAASE,QACtB,IAAK,IAAI1W,EAAI,EAAGA,EAAIuW,EAAY1a,OAAQmE,IAAK,CAGzC,MAAM2W,EAAIJ,EAAYvW,GACtB+B,EAAQjF,KAAK6Z,aAAaC,YAAcD,EAAIA,EAAED,QAElD,MAAMf,EAAQ5T,EAAQlG,OACtBga,EAAQ/Y,KAAK,GAAK6Y,EAAQ,IAC1B,IAAK,IAAI3V,EAAI,EAAGA,EAAI,EAAI+B,EAAQlG,OAAQmE,IACpC6V,EAAQ/Y,KAAK+Y,EAAQA,EAAQha,OAAS,GAAKkG,EAAQ/B,GAAGmW,YAE1D,MAAMU,EAAS,IAAId,WAAWF,EAAQA,EAAQha,OAAS,GAAKkG,EAAQA,EAAQlG,OAAS,GAAGsa,YAElFW,EAAO,IAAIpB,SAASmB,EAAOH,QAEjCI,EAAKC,UAAU,EAAGpB,GAElB,IAAK,IAAI3V,EAAI,EAAGA,EAAI6V,EAAQha,OAAQmE,IAChC8W,EAAKC,UAAU,GAAK/W,EAAI,GAAI6V,EAAQ7V,IAGxC,IAAK,IAAIA,EAAI,EAAGA,EAAI+B,EAAQlG,OAAQmE,IAChC6W,EAAOvd,IAAI,IAAIyc,WAAWhU,EAAQ/B,IAAK6V,EAAQ7V,IAEnD,OAAO6W,EAAOH,OAzEFM,CAAgBhV,GAGhBtJ,KAAKC,UAAUqJ,GAEpBlN,I,gBClCXH,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMsL,EAAa,EAAQ,OAIrB6W,EAAgB,CAAC,WAAY,UAAW,UAAW,SAAU,YAK7DC,EAAuB,CACzBC,OAAQ,CAAEhf,KAAM,SAAUif,KAAM,UAChCC,aAAc,CAAEhgB,KAAM,SAAUyK,SAAU,UAC1CwV,cAAe,CAAEC,KAAM,SAAUC,gBAAiB,UAClDC,eAAgB,CACZD,gBAAiB,SACjBngB,KAAM,SACNyK,SAAU,UAEdkD,MAAO,CAAE0S,MAAO,SAAUC,OAAQ,SAAUC,UAAW,UACvD1gB,OAAQ,CACJ8V,gBAAiB,CACb,SACA,CAAC,WAAY,OAAQ,OAAQ,aAAc,UAGnD6K,aAAc,CAAEC,KAAM,WACtBC,UAAW,CAAExV,QAAS,SAAUC,YAAa,SAAUnL,KAAM,UAC7D2gB,SAAU,CAAEzV,QAAS,SAAUlL,KAAM,UACrC4gB,WAAY,CAAE1V,QAAS,UACvB2V,eAAgB,CAAEC,QAAS,YA+C/B,SAAS9C,EAAchV,GACnBD,EAAWE,iBAAiBD,EAAO,OAAQ,UAC3CD,EAAWE,iBAAiBD,EAAO,KAAM,UA3B7CxL,EAAQkQ,gBATR,SAAyB/C,GACrB5B,EAAWE,iBAAiB0B,EAAK,WAAY,UAC7C5B,EAAWE,iBAAiB0B,EAAK,UAAW,UAC5C5B,EAAWE,iBAAiB0B,EAAK,UAAW,UAXhD,SAAwBkD,GACpB,IAAK,IAAIlF,EAAI,EAAGA,EAAIiX,EAAcpb,OAAQmE,IACtCI,EAAWE,iBAAiB4E,EAAQ+R,EAAcjX,GAAI,UAU1DoY,CAAepW,EAAIkD,QACC,UAAhBlD,EAAIG,SAQZ,SAA8BH,GAC1B,GAAoB,UAAhBA,EAAIG,QAAqB,CACzB,MAAMkW,EAASnB,EAAqBlV,EAAIkD,OAAOwG,UAE/C,QAAe1V,IAAXqiB,EACA,OAEJ,MAAMC,EAAQ3jB,OAAO6e,KAAK6E,GACpB1b,EAAUqF,EAAIrF,QACpB,IAAK,IAAIqD,EAAI,EAAGA,EAAIsY,EAAMzc,OAAQmE,IAAK,CACnC,IAAI5B,EAAOia,EAAOC,EAAMtY,IACnBF,MAAMC,QAAQ3B,KACfA,EAAO,CAACA,IAEZgC,EAAWE,iBAAiB3D,EAAS2b,EAAMtY,MAAO5B,KArBtDma,CAAqBvW,IAgC7BnN,EAAQwgB,cAAgBA,EAUxBxgB,EAAQugB,eANR,SAAwB3B,GACpB,IAAK3T,MAAMC,QAAQ0T,GACf,MAAM,IAAInc,MAAM,uBAEpBmc,EAAO7K,SAAQrP,GAAK8b,EAAc9b,O,sBCtFtC,IAAIG,EAAgBrE,MAAQA,KAAKqE,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EAAa,IAAK,IAAIG,KAAKH,EAAShF,OAAOoF,eAAeC,KAAKL,EAAKG,KAAID,EAAOC,GAAKH,EAAIG,IAE5F,OADAD,EAAgB,QAAIF,EACbE,GAEXlF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAM0jB,EAAa9e,EAAa,EAAQ,QACxC7E,EAAQ2jB,WAAaA,EACrB,MAAM5Q,EAAgBlO,EAAa,EAAQ,QAC3C7E,EAAQ+S,cAAgBA,EAdxB,SAAkBpH,GACd,IAAK,IAAIC,KAAKD,EAAQ3L,EAAQkF,eAAe0G,KAAI5L,EAAQ4L,GAAKD,EAAEC,IAcpEF,CAAS,EAAQ,S,cCfjB5L,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,K,sBCAtD,IAAI4E,EAAgBrE,MAAQA,KAAKqE,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EAAa,IAAK,IAAIG,KAAKH,EAAShF,OAAOoF,eAAeC,KAAKL,EAAKG,KAAID,EAAOC,GAAKH,EAAIG,IAE5F,OADAD,EAAgB,QAAIF,EACbE,GAEXlF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtB8a,EAAY,EAAQ,OACpBjc,EAAc,EAAQ,OACtBoO,EAAUzJ,EAAa,EAAQ,QAC/BuX,EAAgB,EAAQ,MAI9B,MAAMwH,UAA0BxH,EAAchc,YAM1CC,YAAYC,EAAU,IAClB,IAAIC,EACJ8L,MAAM/L,GACNE,KAAKgc,UAAW,EAChBhc,KAAKqc,mBAAqB,IAAI3c,EAAYS,OAAOH,MACjDA,KAAKqjB,OAAS,KACdrjB,KAAKsjB,cAAgB,IAAI5jB,EAAYS,OAAOH,MAE5CA,KAAK+c,OAAS5S,QAAQmM,IAAI,CAACtW,KAAKujB,iBAC3B5hB,MAAK6hB,QACLxT,OAAMwT,QACN7hB,MAAK,KACF3B,KAAKQ,aAGTR,KAAKgc,UAAW,MAEpBhc,KAAKyjB,WAAa,IAAI9H,EAAUY,KAAK,CACjCC,MAAM,EACNC,QAAS,IAAMzc,KAAKujB,eACpB5G,UAAW,CACPC,SAAU,KACVC,SAAS,EACTnE,IAAK,KAET5V,KAAM,+CACNga,SAAU/c,EAAKD,EAAQgd,QAAU/c,MAAAA,EAA+BA,EAAK,iBAEpEC,KAAKmd,MAAMxb,MAAK,KACZ3B,KAAKyjB,WAAWzG,WAMzBE,cACA,OAAOld,KAAKgc,SAKZmB,YACA,OAAOnd,KAAK+c,OAKZtK,YACA,OAAOzS,KAAKqjB,OAKZK,mBACA,OAAO1jB,KAAKsjB,cAKZjG,wBACA,OAAOrd,KAAKqc,mBAKhB5b,UACIT,KAAKyjB,WAAWhjB,UAChBoL,MAAMpL,UAWVuC,2BACUhD,KAAKyjB,WAAW1F,gBAChB/d,KAAKyjB,WAAWxG,KAK1Bja,qBACI,MAAMyP,QAAc3E,EAAQ0E,SAASxS,KAAKI,gBACtCJ,KAAKQ,YAGJK,EAAYsV,QAAQwN,UAAUlR,EAAOzS,KAAKqjB,UAC3CrjB,KAAKqjB,OAAS5Q,EACdzS,KAAKsjB,cAAc5iB,KAAK+R,KAIpCjT,EAAQ4jB,kBAAoBA,G,gBCtH5B9jB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAME,EAAqB,EAAQ,OAC7BoL,EAAa,EAAQ,MACrBlK,EAAc,EAAQ,OA0B5BrB,EAAQgT,SAVRxP,eAAwBJ,EAAWjD,EAAmBU,iBAAiBC,gBACnE,MAAM+I,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAblB,mBAcrBY,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAAK,GAAIzG,GAChF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OAC5B,OAAOgJ,EAAW6Y,mBAAmB5hB,K,eC3BzC1C,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMsL,EAAa,EAAQ,OAI3B,SAAS8Y,EAAkB7hB,GACvB,MAAMqQ,EAAOrQ,EAAKqQ,KAClB,IAAKA,EACD,MAAM,IAAIpQ,MAAM,uBAEpB8I,EAAWE,iBAAiBjJ,EAAM,OAAQ,UAC1C+I,EAAWE,iBAAiBjJ,EAAM,YAAa,UAC/C+I,EAAWE,iBAAiBoH,EAAM,WAAY,UAC9CtH,EAAWE,iBAAiBoH,EAAM,eAAgB,UAClDtH,EAAWE,iBAAiBoH,EAAM,OAAQ,SAC1C,IAAI5F,EAAW,KACX4F,EAAK3N,eAAe,cACpBqG,EAAWE,iBAAiBoH,EAAM,WAAY,UAC9C5F,EAAW4F,EAAK5F,UAEpB,IAAIqX,EAAM,KAKV,OAJIzR,EAAK3N,eAAe,SACpBqG,EAAWE,iBAAiBoH,EAAM,MAAO,UACzCyR,EAAMzR,EAAKyR,KAER,CACHhhB,KAAMd,EAAKc,KACXihB,UAAW/hB,EAAK+hB,UAChBC,SAAU3R,EAAK2R,SACfC,aAAc5R,EAAK4R,aACnBC,KAAM7R,EAAK6R,KACXzX,SAAAA,EACAqX,IAAAA,GAGRtkB,EAAQqkB,kBAAoBA,EAoC5BrkB,EAAQokB,mBAhCR,SAA4B5hB,GACxB,IAAKA,EAAK0C,eAAe,eACrB,MAAM,IAAIzC,MAAM,wBAEpB,IAAIkc,EAAO7e,OAAO6e,KAAKnc,EAAK0Q,aAC5B,MAAMA,EAAcpT,OAAOkD,OAAO,MAClC,IAAI2hB,EAAcniB,EAAKoiB,QACvB,IAAK,IAAIzZ,EAAI,EAAGA,EAAIwT,EAAK3X,OAAQmE,IAAK,CAClC,MAAM0Z,EAAKriB,EAAK0Q,YAAYyL,EAAKxT,IACjC,IACI+H,EAAYyL,EAAKxT,IAAMkZ,EAAkBQ,GAE7C,MAAOjJ,GAEHzM,QAAQsR,KAAK,gCAAgC9B,EAAKxT,OAI1D,GADAwT,EAAO7e,OAAO6e,KAAKzL,IACdyL,EAAK3X,OACN,MAAM,IAAIvE,MAAM,8BAQpB,OANKkiB,GACsB,iBAAhBA,GACLA,KAAezR,IACjByR,EAAchG,EAAK,GACnBxP,QAAQsR,KAAK,oCAAoC9B,EAAK,QAEnD,CACHiG,QAASD,EACTzR,YAAAA,K,gBCpERpT,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMC,EAAc,EAAQ,OACtB4kB,EAAY,EAAQ,OACpBC,EAAc,EAAQ,OACtBC,EAAa,EAAQ,OACrB3W,EAAe,EAAQ,OACvB4W,EAAY,EAAQ,OACpBC,EAAY,EAAQ,OACpBC,EAAa,EAAQ,OACrBhlB,EAAqB,EAAQ,OAC7BilB,EAAc,EAAQ,OACtBC,EAAW,EAAQ,OAiFzBrlB,EAAQslB,eA7ER,MAIIjlB,YAAYC,EAAU,IAClB,IAAIC,EAAIyD,EACRxD,KAAKC,aAAc,EACnBD,KAAKqc,mBAAqB,IAAI3c,EAAYS,OAAOH,MACjDA,KAAKgc,UAAW,EAChB,MAAMvW,EAAe3F,EAAQ2F,aACvBrF,EAAgDL,OAA9BA,EAAKD,EAAQM,gBAAgDL,EAAKJ,EAAmBU,iBAAiBC,eAExHykB,EAAa,CAAEtf,aAAAA,EAAcrF,eAAAA,EAAgB0c,QADXtZ,OAAvBA,EAAK1D,EAAQgd,SAAyCtZ,EAAK,eAEtEwhB,EAAgB,IAAIH,EAAS9I,cAAcgJ,GACjD/kB,KAAKI,eAAiBA,EACtBJ,KAAKiF,SAAW,IAAIuf,EAAWpf,gBAAgB2f,GAC/C/kB,KAAKilB,SAAW,IAAIR,EAAUS,eAAe5lB,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAI6hB,GAAa,CAAEC,cAAeA,KAC3GhlB,KAAK4C,SAAW,IAAI8hB,EAAUS,eAAeJ,GAC7C/kB,KAAKolB,UAAY,IAAIT,EAAWU,gBAAgBN,GAChD/kB,KAAKslB,QAAU,IAAIhB,EAAUxjB,aAAaikB,GAC1C/kB,KAAKulB,WAAa,IAAIX,EAAYY,iBAAiBT,GACnD/kB,KAAKylB,UAAY,IAAIlB,EAAYmB,iBAAiBX,GAClD/kB,KAAK0S,YAAc,IAAI7E,EAAauV,kBAAkB2B,GAGtD/kB,KAAK0S,YAAY2K,kBAAkBzX,QAAQ5F,KAAK2lB,qBAAsB3lB,MACtEA,KAAKilB,SAAS5H,kBAAkBzX,QAAQ5F,KAAK2lB,qBAAsB3lB,MACnEA,KAAKolB,UAAU/H,kBAAkBzX,QAAQ5F,KAAK2lB,qBAAsB3lB,MACpE,MAAM4lB,EAAY,CAAC5lB,KAAKilB,SAAS9H,MAAOnd,KAAK0S,YAAYyK,OACrDnd,KAAKolB,UAAUhkB,eACfwkB,EAAUne,KAAKzH,KAAKolB,UAAUjI,OAElCnd,KAAK6lB,cAAgB1b,QAAQmM,IAAIsP,GAAWjkB,MAAK,KAC7C3B,KAAKgc,UAAW,KAMpBqB,wBACA,OAAOrd,KAAKqc,mBAKZ7b,iBACA,OAAOR,KAAKC,YAKhBQ,UACQT,KAAKQ,aAGTR,KAAKC,aAAc,EACnBP,EAAYS,OAAOS,UAAUZ,MAC7BA,KAAKiF,SAASxE,UACdT,KAAKilB,SAASxkB,UACdT,KAAKolB,UAAU3kB,WAKfyc,cACA,OAAOld,KAAKgc,SAKZmB,YACA,OAAOnd,KAAK6lB,cAEhBF,qBAAqB7c,EAAQsS,GACzBpb,KAAKqc,mBAAmB3b,KAAK0a,M,gBCzFrC9b,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtBlB,EAAqB,EAAQ,OAsCnCH,EAAQkmB,iBA9BR,MAII7lB,YAAYC,EAAU,IAClB,IAAIC,EACJC,KAAKI,eAAgDL,OAA9BA,EAAKD,EAAQM,gBAAgDL,EAAKJ,EAAmBU,iBAAiBC,eAKjI0C,yBACI,MAAM8iB,EAAO9lB,KAAKI,eAAeY,QAC3BqI,EAAMxI,EAAYK,OAAOC,KAAK2kB,EAjBb,kBAkBjB,eAAE1lB,GAAmBJ,KACrB4B,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAAK,GAAIjJ,GAChF,GAAwB,MAApBwB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OACtBgkB,EAAa,GAMnB,OALazmB,OAAO6e,KAAKnc,GACpBuR,SAAQ,SAAUxP,GACnB,MAAMiiB,EAAWhkB,EAAK+B,GAAKkiB,gBAC3BF,EAAWhiB,GAAO,CAAEkiB,gBAAiBD,MAElCD,K,gBCrCf,IAAIhmB,EAAIyD,EAAI0F,EACZ5J,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OAC5B,IAAIqlB,EACAC,EACAC,EACAC,EACJ,GAAsB,oBAAXC,OAAwB,CAI/B,MAAMC,EAAW,EAAQ,MAChBxmB,EAAK,EAAAymB,EAAOC,MAArBP,EAA6BnmB,MAAAA,EAA+BA,EAAKwmB,EACtD/iB,EAAK,EAAAgjB,EAAOE,QAAvBN,EAAiC5iB,MAAAA,EAA+BA,EAAK+iB,EAASG,QACnExd,EAAK,EAAAsd,EAAOG,QAAvBR,EAAiCjd,MAAAA,EAA+BA,EAAKqd,EAASI,QAC9EN,EAAY,EAAQ,WAIpBH,EAAQO,MACRL,EAAUM,QACVP,EAAUQ,QACVN,EAAYtX,UAgBhB,IAAI1O,EA4FAyE,GA3FJ,SAAWzE,GAWPA,EAAiBC,aAHjB,SAAsBR,GAClB,OAAOgF,EAAQxE,aAAaR,IA0BhCO,EAAiBqB,YAHjB,SAAqB2H,EAAKlG,EAAMP,GAC5B,OAAOkC,EAAQ8hB,cAAcvd,EAAKlG,EAAMP,IAM5C,MAAMd,UAAsBG,MAIxBpC,YAAY+B,EAAUM,EAAU,qBAAqBN,EAASC,UAAUD,EAASilB,aAActE,EAAY,IACvG1W,MAAM3J,GACNlC,KAAK4B,SAAWA,EAChB5B,KAAKuiB,UAAYA,EAUrBuE,oBAAoBllB,GAChB,IACI,MAAMI,QAAaJ,EAASG,OAI5B,OAHIC,EAAgB,WAChB2M,QAAQgB,MAAM3N,EAAgB,WAE9BA,EAAc,QACP,IAAIF,EAAcF,EAAUI,EAAc,SAE9C,IAAIF,EAAcF,GAE7B,MAAO4S,GAEH,OADA7F,QAAQC,MAAM4F,GACP,IAAI1S,EAAcF,KAIrCvB,EAAiByB,cAAgBA,EAIjC,MAAMwc,UAAqByI,UAIvBlnB,YAAYmnB,GACRnb,MAAMmb,EAAS9kB,SACflC,KAAKinB,MAAQD,EAASC,OAG9B5mB,EAAiBie,aAAeA,EAtFpC,CAuFGje,EAAmBb,EAAQa,mBAAqBb,EAAQa,iBAAmB,KAK9E,SAAWyE,GAsBPA,EAAQxE,aAlBR,SAAsBR,EAAU,IAC5B,MAAMonB,EAAcrmB,EAAYQ,WAAW8lB,aACrCC,EAAYvmB,EAAYQ,WAAWgmB,WACnCrmB,EAAUH,EAAYK,OAAO2F,UAAU/G,EAAQkB,UAAYkmB,EACjE,IAAI3Y,EAAQzO,EAAQyO,MAWpB,OATKA,GAASvN,IAAYkmB,IACtB3Y,EAAQ6Y,GAGP7Y,GAAqC,IAA5BvN,EAAQ8J,QAAQ,UAC1ByD,EAAQ,KAAOvN,EAAQ2F,MAAM,IAGjC4H,EAASA,MAAAA,EAAqCA,EAAQ6Y,EAC/C9nB,OAAO4D,OAAO5D,OAAO4D,OAAO,CAAEC,KAAM,CAAEmkB,MAAO,WAAYC,YAAa,eAAiBd,MAAOP,EAAOS,QAASR,EAASO,QAASN,EAASrX,UAAWsX,EAAWmB,MAAO3mB,EAAYQ,WAAWomB,WAAYxmB,OAAQJ,EAAYQ,WAAWC,UAAU,WAAaxB,GAAU,CAAEkB,QAAAA,EAC9QuN,MAAAA,KAyDRzJ,EAAQ8hB,cAzCR,SAAuBvd,EAAKlG,EAAMP,GAC9B,IAAI7C,EAAIyD,EAER,GAAsC,IAAlC6F,EAAIyB,QAAQlI,EAAS5B,SACrB,MAAM,IAAIiB,MAAM,iDAKN,cADmBlC,OAAlBA,EAAKoD,EAAKmkB,OAAuCvnB,EAAK6C,EAASO,KAAKmkB,SAG/Eje,IAAQ,KAAKqe,KAAKre,GAAO,IAAM,MAAO,IAAIyV,MAAO6I,WAErD,MAAMC,EAAU,IAAIhlB,EAAS8jB,QAAQrd,EAAK/J,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIN,EAASO,MAAOA,IAG1F,IAAI0kB,GAAgB,EAKpB,GAJIjlB,EAAS4kB,QACTK,GAAgB,EAChBD,EAAQE,QAAQ7d,OAAO,gBAAiB,SAASrH,EAAS4kB,UAEtC,oBAAb7d,WAAiD,QAAnBnG,EAAKmG,gBAA6B,IAAPnG,OAAgB,EAASA,EAAGoG,QAAS,CACrG,MAAMme,EAuBd,SAAmBjlB,GACf,IAAI/C,EAGJ,OAA0B,QAAlBA,EADQ4J,SAASC,OAAOC,MAAM,8BACG,IAAP9J,OAAgB,EAASA,EAAG,GA3BxCioB,QACArnB,IAAdonB,IACAF,GAAgB,EAChBD,EAAQE,QAAQ7d,OAAO,cAAe8d,IAS9C,OAJKH,EAAQE,QAAQrhB,IAAI,iBAAmBohB,GACxCD,EAAQE,QAAQ7jB,IAAI,eAAgB,oBAGjCrB,EAAS6jB,MAAM9hB,KAAK,KAAMijB,GAAS5X,OAAOwE,IAE7C,MAAM,IAAInU,EAAiBie,aAAa9J,OAxEpD,CAuFG1P,IAAYA,EAAU,M,gBC1NzBxF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMC,EAAc,EAAQ,OACtB4C,EAAM,EAAQ,OACduZ,EAAY,EAAQ,OACpBhb,EAAc,EAAQ,OAqU5BrB,EAAQyoB,kBA/TR,MAIIpoB,YAAYC,GACR,IAAIC,EAAIyD,EAAI0F,EAAI+E,EAChBjO,KAAK+L,IAAM,GACX/L,KAAKkoB,MAAQ,GACbloB,KAAKqQ,MAAQ,GACbrQ,KAAKmoB,MAAQ,GACbnoB,KAAKgM,QAAU,KACfhM,KAAKC,aAAc,EACnBD,KAAKE,UAAY,IAAIR,EAAYS,OAAOH,MACxCA,KAAKooB,eAAiB,IAAI1oB,EAAYS,OAAOH,MAC7CA,KAAKkR,eAAiB,IAAIxR,EAAYS,OAAOH,MAC7CA,KAAKmR,yBAA2B,IAAIzR,EAAYS,OAAOH,MACvDA,KAAKoR,cAAgB,IAAI1R,EAAYS,OAAOH,MAC5CA,KAAKqR,kBAAoB,IAAI3R,EAAYS,OAAOH,MAChDA,KAAKkQ,YAAc,IAAIxQ,EAAYS,OAAOH,MAC1CA,KAAKqoB,iBAAmB,IAAI3oB,EAAYS,OAAOH,MAC/CA,KAAK+L,IAAMjM,EAAQkL,MAAMU,GACzB1L,KAAKqQ,MAAQvQ,EAAQkL,MAAMlI,KAC3B9C,KAAKkoB,MAAQpoB,EAAQkL,MAAM/E,KAC3BjG,KAAKmoB,MAAQroB,EAAQkL,MAAM3D,KAC3BrH,KAAKwQ,UAAqCzQ,OAAxBA,EAAKD,EAAQiN,UAA0ChN,EAAK,GAC9EC,KAAK6O,UAAqCrL,OAAxBA,EAAK1D,EAAQmN,UAA0CzJ,EAAK3C,EAAY4Q,KAAKC,QAC/F1R,KAAKsoB,iBAAmBxoB,EAAQyoB,gBAChCvoB,KAAKwoB,yBAAmEtf,OAAvCA,EAAKpJ,EAAQ2oB,yBAAyDvf,EAAK,GAC5GlJ,KAAKI,eAAgD6N,OAA9BA,EAAKnO,EAAQM,gBAAgD6N,EAAK3L,EAAIjC,iBAAiBC,eAC9GN,KAAK0oB,YAAY5oB,EAAQkL,MAAMW,QAK/BpL,eACA,OAAOP,KAAKE,UAKZyoB,oBACA,OAAO3oB,KAAKooB,eAKZvW,oBACA,OAAO7R,KAAKkR,eAKZY,8BACA,OAAO9R,KAAKmR,yBAKZY,mBACA,OAAO/R,KAAKoR,cAKZY,uBACA,OAAOhS,KAAKqR,kBASZY,iBACA,OAAOjS,KAAKkQ,YAKZ0Y,sBACA,OAAO5oB,KAAKqoB,iBAKZ3c,SACA,OAAO1L,KAAK+L,IAQZJ,aACA,OAAO3L,KAAKgM,QAKZ/F,WACA,OAAOjG,KAAKkoB,MAKZ7gB,WACA,OAAOrH,KAAKmoB,MAKZrlB,WACA,OAAO9C,KAAKqQ,MAKZrF,YACA,MAAO,CACHU,GAAI1L,KAAK0L,GACTC,OAAQ3L,KAAK2L,QAAU,CAAED,GAAI1L,KAAK2L,OAAOD,GAAI5I,KAAM9C,KAAK2L,OAAO7I,MAC/DmD,KAAMjG,KAAKkoB,MACX7gB,KAAMrH,KAAKmoB,MACXrlB,KAAM9C,KAAKqQ,OAMf7P,iBACA,OAAOR,KAAKC,YAUhBmE,OAAO4G,GACH,MAAM6d,EAAW7oB,KAAKgL,MAItB,GAHAhL,KAAKkoB,MAAQld,EAAM/E,KACnBjG,KAAKqQ,MAAQrF,EAAMlI,KACnB9C,KAAKmoB,MAAQnd,EAAM3D,KACG,OAAjBrH,KAAKgM,SAAqC,OAAjBhB,EAAMW,QACd,OAAjB3L,KAAKgM,SAAqC,OAAjBhB,EAAMW,QACd,OAAjB3L,KAAKgM,SACe,OAAjBhB,EAAMW,QACN3L,KAAKgM,QAAQN,KAAOV,EAAMW,OAAOD,GAAK,CACrB,OAAjB1L,KAAKgM,SACLhM,KAAKgM,QAAQvL,UAEjB,MAAMwI,EAAWjJ,KAAKgM,QACtBhM,KAAK0oB,YAAY1d,EAAMW,QACvB,MAAM3C,EAAWhJ,KAAKgM,QACtBhM,KAAKooB,eAAe1nB,KAAK,CAAEoC,KAAM,SAAUmG,SAAAA,EAAUD,SAAAA,IAEzDhJ,KAAK8oB,mBAAmBD,GAK5BpoB,UACI,IAAIT,KAAKQ,WAAT,CAKA,GAFAR,KAAKC,aAAc,EACnBD,KAAKE,UAAUQ,OACXV,KAAKgM,QAAS,CACdhM,KAAKgM,QAAQvL,UACb,MAAMwI,EAAWjJ,KAAKgM,QACtBhM,KAAKgM,QAAU,KACf,MAAMhD,EAAWhJ,KAAKgM,QACtBhM,KAAKooB,eAAe1nB,KAAK,CAAEoC,KAAM,SAAUmG,SAAAA,EAAUD,SAAAA,IAEzDtJ,EAAYS,OAAOS,UAAUZ,OAajCgD,cAAciD,GACV,GAAIjG,KAAKQ,WACL,MAAM,IAAIyB,MAAM,6BAEdjC,KAAK+oB,OAAO,CAAE9iB,KAAAA,IAKxBjD,cAAcF,GACV,GAAI9C,KAAKQ,WACL,MAAM,IAAIyB,MAAM,6BAEdjC,KAAK+oB,OAAO,CAAEjmB,KAAAA,IAKxBE,cAAcqE,GACV,GAAIrH,KAAKQ,WACL,MAAM,IAAIyB,MAAM,6BAEdjC,KAAK+oB,OAAO,CAAE1hB,KAAAA,IAWxBrE,mBAAmBlD,GACf,GAAIE,KAAKQ,WACL,MAAM,IAAIyB,MAAM,uBAGpB,aADMjC,KAAK+oB,OAAO,CAAEpd,OAAQ7L,IACrBE,KAAK2L,OAWhB3I,iBACI,GAAIhD,KAAKQ,WACL,MAAM,IAAIyB,MAAM,6BAEd4Z,EAAUmN,gBAAgBhpB,KAAK0L,GAAI1L,KAAKI,gBAC9CJ,KAAKS,UAQTioB,YAAY1d,GACR,GAAc,OAAVA,EAEA,YADAhL,KAAKgM,QAAU,MAGnB,MAAMwR,EAAKxd,KAAKsoB,iBAAiBhpB,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIlD,KAAKwoB,0BAA2B,CAAExd,MAAAA,EAAO+B,SAAU/M,KAAKwQ,UAAWvD,SAAUjN,KAAK6O,UAAWzO,eAAgBJ,KAAKI,kBACnLJ,KAAKgM,QAAUwR,EACfA,EAAG3L,cAAcjM,QAAQ5F,KAAKipB,eAAgBjpB,MAC9Cwd,EAAG1L,wBAAwBlM,QAAQ5F,KAAKkpB,yBAA0BlpB,MAClEwd,EAAGxL,iBAAiBpM,QAAQ5F,KAAKmpB,mBAAoBnpB,MACrDwd,EAAGzL,aAAanM,QAAQ5F,KAAKopB,eAAgBppB,MAC7Cwd,EAAGvL,WAAWrM,QAAQ5F,KAAKqpB,aAAcrpB,MAK7CipB,eAAengB,EAAQwgB,GACnBtpB,KAAKkR,eAAexQ,KAAK4oB,GAK7BJ,yBAAyBpgB,EAAQwgB,GAC7BtpB,KAAKmR,yBAAyBzQ,KAAK4oB,GAKvCF,eAAetgB,EAAQ6D,GACnB3M,KAAKoR,cAAc1Q,KAAKiM,GAK5Bwc,mBAAmBrgB,EAAQ6D,GACvB3M,KAAKqR,kBAAkB3Q,KAAKiM,GAKhC0c,aAAavgB,EAAQC,GACjB/I,KAAKkQ,YAAYxP,KAAKqI,GAK1B/F,aAAaI,GACT,MAAM4H,QAAc6Q,EAAU0N,cAAcjqB,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIE,GAAO,CAAEsI,GAAI1L,KAAK+L,MAAQ/L,KAAKI,gBAE3G,OADAJ,KAAKoE,OAAO4G,GACLA,EAKX8d,mBAAmBD,GACXA,EAAS/lB,OAAS9C,KAAKqQ,OACvBrQ,KAAKqoB,iBAAiB3nB,KAAK,QAE3BmoB,EAASxhB,OAASrH,KAAKmoB,OACvBnoB,KAAKqoB,iBAAiB3nB,KAAK,QAE3BmoB,EAAS5iB,OAASjG,KAAKkoB,OACvBloB,KAAKqoB,iBAAiB3nB,KAAK,W,sBClUvC,IAAI2D,EAAgBrE,MAAQA,KAAKqE,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EAAa,IAAK,IAAIG,KAAKH,EAAShF,OAAOoF,eAAeC,KAAKL,EAAKG,KAAID,EAAOC,GAAKH,EAAIG,IAE5F,OADAD,EAAgB,QAAIF,EACbE,GAEXlF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAM+pB,EAAUnlB,EAAa,EAAQ,OACrC7E,EAAQgqB,QAAUA,EAClB,MAAMC,EAAaplB,EAAa,EAAQ,QACxC7E,EAAQiqB,WAAaA,EAdrB,SAAkBte,GACd,IAAK,IAAIC,KAAKD,EAAQ3L,EAAQkF,eAAe0G,KAAI5L,EAAQ4L,GAAKD,EAAEC,IAcpEF,CAAS,EAAQ,S,gBCfjB5L,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMmF,EAAc,EAAQ,OACtB+W,EAAY,EAAQ,OACpBjc,EAAc,EAAQ,OACtBC,EAAqB,EAAQ,OAC7Bic,EAAgB,EAAQ,MACxBE,EAAY,EAAQ,OACpBD,EAAY,EAAQ,OAI1B,MAAMqJ,UAAuBtJ,EAAchc,YAMvCC,YAAYC,GACR,IAAIC,EACJ8L,MAAM/L,GACNE,KAAKgc,UAAW,EAChBhc,KAAK0pB,oBAAsB,IAAIxN,IAC/Blc,KAAKmc,QAAU,IAAI7W,IACnBtF,KAAKoc,gBAAkB,IAAI1c,EAAYS,OAAOH,MAC9CA,KAAKqc,mBAAqB,IAAI3c,EAAYS,OAAOH,MAEjDA,KAAKsoB,iBAAoBxoB,GACdE,KAAK2pB,eAAepM,UAAUzd,GAEzCE,KAAK2pB,eAAiB7pB,EAAQklB,cAE9BhlB,KAAKsc,YAAc,IAAIX,EAAUY,KAAK,CAClCC,MAAM,EACNC,QAAS,IAAMzc,KAAK0c,iBACpBC,UAAW,CACPC,SAAU,IACVC,SAAS,EACTnE,IAAK,KAET5V,KAAM,6CACNga,SAAU/c,EAAKD,EAAQgd,QAAU/c,MAAAA,EAA+BA,EAAK,iBAGzEC,KAAK+c,OAAS,iBACJ/c,KAAKsc,YAAYU,cACjBhd,KAAKsc,YAAYW,WACjBjd,KAAK2pB,eAAexM,MAC1Bnd,KAAKgc,UAAW,GAJN,GAUdkB,cACA,OAAOld,KAAKgc,SAKZmB,YACA,OAAOnd,KAAK+c,OAKZK,qBACA,OAAOpd,KAAKoc,gBAKZiB,wBACA,OAAOrd,KAAKqc,mBAKhB5b,UACQT,KAAKQ,aAGTR,KAAKmc,QAAQtF,QACb7W,KAAK0pB,oBAAoBnW,SAAQ+J,GAAKA,EAAE7c,YACxCT,KAAKsc,YAAY7b,UACjBoL,MAAMpL,WAKV8c,UAAUzd,GACN,MAAM8pB,EAAoB,IAAI9N,EAAUmM,kBAAkB3oB,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIpD,GAAU,CAAEyoB,gBAAiBvoB,KAAKsoB,iBAAkBloB,eAAgBJ,KAAKI,kBASnK,OARAJ,KAAK0d,WAAWkM,GACX5pB,KAAKmc,QAAQ1V,IAAI3G,EAAQkL,MAAMU,KAG3B1L,KAAK2d,iBAAiB3N,OAAM,SAI9B4Z,EAOXhM,UACI,OAAOhZ,EAAYiZ,KAAK,IAAI7d,KAAKmc,QAAQ2B,WAW7C9a,6BACUhD,KAAKsc,YAAYyB,gBACjB/d,KAAKsc,YAAYW,KAS3Bja,eAAegb,EAAeC,EAAiB,IAC3C,MAAMjT,QAAc6Q,EAAUgO,aAAa7L,EAAehe,KAAKI,gBAE/D,aADMJ,KAAK2d,iBACJ3d,KAAKud,UAAUje,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAI+a,GAAiB,CAAEjT,MAAAA,KAK7EhI,eAAe0I,SACLmQ,EAAUmN,gBAAgBtd,EAAI1L,KAAKI,sBACnCJ,KAAK2d,iBAOf3a,0BAEUhD,KAAK2d,uBAELxT,QAAQmM,IAAI,IAAItW,KAAKmc,QAAQgC,QAAQvT,KAAIc,GAAMmQ,EAAUmN,gBAAgBtd,EAAI1L,KAAKI,yBAElFJ,KAAK2d,iBAUf3a,mBAAmBiD,GACf,IACI,MACM6jB,SADiBjO,EAAUwC,YAAYre,KAAKI,iBACzB2pB,QAAOtqB,GAASA,EAAMwG,OAASA,IACxD,GAAuB,IAAnB6jB,EAAQtjB,OAAc,CACtB,MAAMkF,EAAKoe,EAAQ,GAAGpe,SAChB1L,KAAKgqB,SAASte,IAG5B,MAAOiE,KAOX3M,eAAe0I,GACX,OAAI1L,KAAKmc,QAAQ1V,IAAIiF,UAGf1L,KAAK2d,iBAFA3d,KAAKmc,QAAQrY,IAAI4H,GAQhC1I,iBAAiBiD,GACb,IAAK,MAAMkF,KAAKnL,KAAKmc,QAAQ2B,SACzB,GAAI3S,EAAElF,OAASA,EACX,OAAOkF,QAGTnL,KAAK2d,iBACX,IAAK,MAAMxS,KAAKnL,KAAKmc,QAAQ2B,SACzB,GAAI3S,EAAElF,OAASA,EACX,OAAOkF,EAQnBnI,uBACI,IAAIjD,EACJ,IAAIqe,EACJ,IACIA,QAAevC,EAAUwC,YAAYre,KAAKI,gBAE9C,MAAOgb,GAOH,MAJIA,aAAezb,EAAmBU,iBAAiBie,cACsB,OAAhD,QAAvBve,EAAKqb,EAAIxZ,gBAA6B,IAAP7B,OAAgB,EAASA,EAAG8B,UAC7D7B,KAAKqc,mBAAmB3b,KAAK0a,GAE3BA,EAENpb,KAAKQ,YAGLR,KAAKmc,QAAQoC,OAASH,EAAO5X,QAC7B5B,EAAY4Z,MAAMJ,GAAQd,IACtB,IAAIvd,EAAIyD,EAAI0F,EAAI+E,EAChB,MAAMwQ,EAAWze,KAAKmc,QAAQrY,IAAIwZ,EAAE5R,IACpC,QAAK+S,IAG+B,QAA1B1e,EAAK0e,EAAS9S,cAA2B,IAAP5L,OAAgB,EAASA,EAAG2L,OAA6B,QAAnBlI,EAAK8Z,EAAE3R,cAA2B,IAAPnI,OAAgB,EAASA,EAAGkI,MACzG,QAA1BxC,EAAKuV,EAAS9S,cAA2B,IAAPzC,OAAgB,EAASA,EAAGpG,SAA+B,QAAnBmL,EAAKqP,EAAE3R,cAA2B,IAAPsC,OAAgB,EAASA,EAAGnL,OACnI2b,EAAS3b,OAASwa,EAAExa,MACpB2b,EAASxY,OAASqX,EAAErX,MACpBwY,EAASpX,OAASiW,EAAEjW,UAMhCrH,KAAKmc,QAAU,IAAI7W,IAAI8Y,EAAOxT,KAAI0S,GAAK,CAACA,EAAE5R,GAAI4R,MAC9Ctd,KAAK0pB,oBAAoBnW,SAAQ0W,IACzBjqB,KAAKmc,QAAQ1V,IAAIwjB,EAAGve,IACpBue,EAAG7lB,OAAOpE,KAAKmc,QAAQrY,IAAImmB,EAAGve,KAG9Bue,EAAGxpB,aAGXT,KAAKoc,gBAAgB1b,KAAK0d,IAK9BV,WAAWkM,GACP5pB,KAAK0pB,oBAAoB7P,IAAI+P,GAC7BA,EAAkBrpB,SAASqF,QAAQ5F,KAAK2e,YAAa3e,MACrD4pB,EAAkBhB,gBAAgBhjB,QAAQ5F,KAAKkqB,WAAYlqB,MAC3D4pB,EAAkBjB,cAAc/iB,QAAQ5F,KAAKkqB,WAAYlqB,MAE7D2e,YAAYiL,GACR5pB,KAAK0pB,oBAAoB5hB,OAAO8hB,GAK3B5pB,KAAK2d,iBAAiB3N,OAAM,SAIrCka,aACSlqB,KAAK2d,iBAAiB3N,OAAM,UAKzCxQ,EAAQ0lB,eAAiBA,G,gBCpRzB5lB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAME,EAAqB,EAAQ,OAC7BkB,EAAc,EAAQ,OACtBkK,EAAa,EAAQ,OA6B3B,SAASof,EAAcnpB,EAAS0K,GAC5B,OAAO7K,EAAYK,OAAOC,KAAKH,EAASxB,EAAQ4qB,oBAAqB1e,GA1BzElM,EAAQ4qB,oBAAsB,eAqB9B5qB,EAAQ6e,YAjBRrb,eAA2BJ,EAAWjD,EAAmBU,iBAAiBC,gBACtE,MAAM+I,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQ4qB,qBACxDxoB,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAAK,GAAIzG,GAChF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OAC5B,IAAK0I,MAAMC,QAAQ1I,GACf,MAAM,IAAIC,MAAM,wBAMpB,OAJAD,EAAKuR,SAAQpI,IACTJ,EAAWsf,yBAAyBlf,GACpCJ,EAAWiV,cAAc7U,MAEtBnJ,GASXxC,EAAQ2qB,cAAgBA,EAsBxB3qB,EAAQwpB,gBAlBRhmB,eAA+B0I,EAAI9I,EAAWjD,EAAmBU,iBAAiBC,gBAC9E,IAAIP,EACJ,MAAMsJ,EAAM8gB,EAAcvnB,EAAS5B,QAAS0K,GAEtC9J,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAD1D,CAAEjH,OAAQ,UAC2DQ,GAClF,GAAwB,MAApBhB,EAASC,OAAgB,CACzB,MACM8K,EAA2B5M,OAApBA,SADM6B,EAASG,QACLG,SAAyCnC,EAAK,gBAAgB2L,mCACrFiD,QAAQsR,KAAKtT,OAEZ,IAAwB,MAApB/K,EAASC,OACd,MAAM,IAAIlC,EAAmBU,iBAAiByB,cAAcF,EAAU,kDAErE,GAAwB,MAApBA,EAASC,OAEd,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,KAoBnFpC,EAAQ8qB,gBAZRtnB,eAA+B0I,EAAI9I,EAAWjD,EAAmBU,iBAAiBC,gBAC9E,MAAM+I,EAAM8gB,EAAcvnB,EAAS5B,QAAS0K,GACtC9J,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAAK,GAAIzG,GAChF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OAG5B,OAFAgJ,EAAWsf,yBAAyBroB,GACpC+I,EAAWiV,cAAche,GAClBA,GAuBXxC,EAAQqqB,aAhBR7mB,eAA4BlD,EAAS8C,EAAWjD,EAAmBU,iBAAiBC,gBAChF,MAAM+I,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQ4qB,qBACxDjnB,EAAO,CACTf,OAAQ,OACRgB,KAAMC,KAAKC,UAAUxD,IAEnB8B,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAAKlG,EAAMP,GAClF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OAG5B,OAFAgJ,EAAWsf,yBAAyBroB,GACpC+I,EAAWiV,cAAche,GAClBA,GAsBXxC,EAAQ+pB,cAhBRvmB,eAA6BgI,EAAOpI,EAAWjD,EAAmBU,iBAAiBC,gBAC/E,MAAM+I,EAAM8gB,EAAcvnB,EAAS5B,QAASgK,EAAMU,IAC5CvI,EAAO,CACTf,OAAQ,QACRgB,KAAMC,KAAKC,UAAU0H,IAEnBpJ,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAAKlG,EAAMP,GAClF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OAG5B,OAFAgJ,EAAWsf,yBAAyBroB,GACpC+I,EAAWiV,cAAche,GAClBA,I,aChHX1C,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,K,gBCAtDH,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMsL,EAAa,EAAQ,OACrBwf,EAAa,EAAQ,OAI3B,SAASvK,EAAche,GACnBuoB,EAAWtf,iBAAiBjJ,EAAM,KAAM,UACxCuoB,EAAWtf,iBAAiBjJ,EAAM,OAAQ,UAC1CuoB,EAAWtf,iBAAiBjJ,EAAM,OAAQ,UAC1CuoB,EAAWtf,iBAAiBjJ,EAAM,OAAQ,UAC1CuoB,EAAWtf,iBAAiBjJ,EAAM,SAAU,UAC5C+I,EAAWiV,cAAche,EAAK2J,QAElCnM,EAAQwgB,cAAgBA,EAWxBxgB,EAAQ6qB,yBAPR,SAAkCroB,QACZrB,IAAdqB,EAAKiE,WAAwCtF,IAAlBqB,EAAKwoB,WAChCxoB,EAAKiE,KAAOjE,EAAKwoB,SAASvkB,KAC1BjE,EAAKqF,KAAO,WACZrF,EAAKc,KAAO,KAapBtD,EAAQugB,eANR,SAAwB3B,GACpB,IAAK3T,MAAMC,QAAQ0T,GACf,MAAM,IAAInc,MAAM,wBAEpBmc,EAAO7K,SAAQrP,GAAK8b,EAAc9b,O,gBCjCtC5E,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtB4pB,EAAY,EAAQ,OACpB9qB,EAAqB,EAAQ,OAQnC,MAAMwlB,UAAuBsF,EAAUC,cAInC7qB,YAAYC,EAAU,IAClB,IAAIC,EACJ8L,QACA7L,KAAKI,eAAgDL,OAA9BA,EAAKD,EAAQM,gBAAgDL,EAAKJ,EAAmBU,iBAAiBC,eASjI0C,YAAY0I,GACR,IAAKA,EACD,MAAM,IAAIzJ,MAAM,yDAEpB,MAAM,eAAE7B,GAAmBJ,MACrB,QAAEgB,EAAO,OAAEC,GAAWb,GACtB,YAAEsB,EAAW,cAAEI,GAAkBnC,EAAmBU,iBACpDylB,EAAO9kB,EAAUC,EACjBoI,EAAMvE,EAAQuE,IAAIyc,EAAMpa,GACxB9J,QAAiBF,EAAY2H,EAAK,GAAIjJ,GAC5C,GAAwB,MAApBwB,EAASC,OAET,YADkBC,EAAcU,OAAOZ,GAI3C,OAAOA,EAASG,OAOpBiB,aACI,IAAIjD,EAAIyD,EAAI0F,EACZ,MAAM,eAAE9I,GAAmBJ,MACrB,QAAEgB,EAAO,OAAEC,GAAWb,GACtB,YAAEsB,EAAW,cAAEI,GAAkBnC,EAAmBU,iBACpDylB,EAAO9kB,EAAUC,EACjBoI,EAAMvE,EAAQuE,IAAIyc,EAAM,IACxBlkB,QAAiBF,EAAY2H,EAAK,GAAIjJ,GAC5C,GAAwB,MAApBwB,EAASC,OACT,MAAM,IAAIC,EAAcF,GAE5B,MACMkc,EAGD5U,OAHWA,EAAgF,QAA1E1F,EAAqB,QAAfzD,QADT6B,EAASG,cAC8B,IAAPhC,OAAgB,EAASA,EAAa,gBAAsB,IAAPyD,OAAgB,EAASA,EAAGoH,KAAK+f,IACrIA,EAAO3oB,KAAO,CAAE4oB,UAAW,GAAIC,KAAM,IAC9BF,MACyBzhB,EAAK,GAEzC,MAAO,CAAE4hB,IADGhN,EAAOlT,KAAI+f,GAAUA,EAAOjf,KAC1BoS,OAAAA,GAWlB9a,WAAW0I,EAAIqf,GACX,MAAM,eAAE3qB,GAAmBJ,MACrB,QAAEgB,EAAO,OAAEC,GAAWb,GACtB,YAAEsB,EAAW,cAAEI,GAAkBnC,EAAmBU,iBACpDylB,EAAO9kB,EAAUC,EACjBoI,EAAMvE,EAAQuE,IAAIyc,EAAMpa,GACxBvI,EAAO,CAAEC,KAAM2nB,EAAK3oB,OAAQ,OAC5BR,QAAiBF,EAAY2H,EAAKlG,EAAM/C,GAC9C,GAAwB,MAApBwB,EAASC,OACT,MAAM,IAAIC,EAAcF,IAQpC,IAAIkD,EAJJtF,EAAQ2lB,eAAiBA,EAKzB,SAAWrgB,GAOPA,EAAQuE,IAHR,SAAayc,EAAMpa,GACf,OAAO7K,EAAYK,OAAOC,KAAK2kB,EA7FV,eA6FsCpa,IALnE,CAQG5G,IAAYA,EAAU,M,aCzGzBxF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAA,QAAkBuP,W,gBCClBzP,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtB4M,EAAc,EAAQ,OACtB/N,EAAc,EAAQ,OACtB4C,EAAM,EAAQ,OACduZ,EAAY,EAAQ,OAI1B,MAAMmP,EAIFnrB,YAAYC,GACR,IAAIC,EAOJC,KAAKkO,cAAgB,KACjBlO,KAAKmO,mBAELnO,KAAKoO,eAELpO,KAAKqO,wBAAwB,cAC7B,MAAMvL,EAAO9C,KAAKqQ,MACZzN,EAAW5C,KAAKI,eACtB,IAAIiJ,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS2L,MAAO,YAAa,YAAa1L,mBAAmBC,IAC/F9C,KAAK8O,IAAM,IAAIlM,EAASmM,UAAU1F,GAClCrJ,KAAK8O,IAAIG,UAAYjP,KAAKkP,aAC1BlP,KAAK8O,IAAIO,QAAUrP,KAAKsP,WACxBtP,KAAK8O,IAAIS,QAAUvP,KAAKsP,YAG5BtP,KAAKkP,aAAgB+b,IACjB,GAAIjrB,KAAKC,YACL,OAEJ,MAAM+B,EAAOqB,KAAK8c,MAAM8K,EAAMjpB,MAEd,eAAZA,EAAK,IACLhC,KAAKS,UAEsB,eAA3BT,KAAKuQ,kBAUTvQ,KAAKkrB,iBAAiBxqB,KAAK,CACvB2G,KAAMrF,EAAK,GACXsF,QAAStF,EAAK2E,MAAM,KAPJ,UAAZ3E,EAAK,IACLhC,KAAKqO,wBAAwB,cASzCrO,KAAKsP,WAAc2b,IACftc,QAAQsR,KAAK,8BAA8BgL,EAAM/I,QAC5CliB,KAAKQ,YACNR,KAAKoQ,cAGbpQ,KAAKuQ,kBAAoB,aACzBvQ,KAAKmR,yBAA2B,IAAIzR,EAAYS,OAAOH,MACvDA,KAAKC,aAAc,EACnBD,KAAKE,UAAY,IAAIR,EAAYS,OAAOH,MACxCA,KAAKkrB,iBAAmB,IAAIxrB,EAAYS,OAAOH,MAC/CA,KAAK2Q,kBAAoB,KACzB3Q,KAAK8O,IAAM,KACX9O,KAAKwR,MAAQ,OAGbxR,KAAKyQ,gBAAkB,EACvBzQ,KAAK0Q,kBAAoB,EACzB1Q,KAAKiR,iBAAmB,GACxBjR,KAAKqQ,MAAQvQ,EAAQkL,MAAMlI,KAC3B9C,KAAKI,eAAgDL,OAA9BA,EAAKD,EAAQM,gBAAgDL,EAAKuC,EAAIjC,iBAAiBC,eAC9GN,KAAKkO,gBAKL3N,eACA,OAAOP,KAAKE,UAKZirB,sBACA,OAAOnrB,KAAKkrB,iBAKZpoB,WACA,OAAO9C,KAAKqQ,MAKZrF,YACA,MAAO,CAAElI,KAAM9C,KAAKqQ,OAKpB7P,iBACA,OAAOR,KAAKC,YAKhBQ,UACQT,KAAKC,cAGTD,KAAKC,aAAc,EACnBD,KAAKE,UAAUQ,OACfV,KAAKqO,wBAAwB,gBAC7BrO,KAAKoO,eACL1O,EAAYS,OAAOS,UAAUZ,OASjCqN,KAAKnL,GACDlC,KAAKmT,aAAajR,GAOtBiR,aAAajR,EAAS0R,GAAQ,GAC1B,IAAI5T,KAAKC,aAAgBiC,EAAQoF,QAGjC,GAA8B,cAA1BtH,KAAKkS,kBAAoClS,KAAK8O,IAAK,CACnD,MAAMnC,EAAM,CAACzK,EAAQmF,QAASnF,EAAQoF,SACtCtH,KAAK8O,IAAIzB,KAAKhK,KAAKC,UAAUqJ,QAE5B,KAAIiH,EAIL,MAAM,IAAI3R,MAAM,2BAA2BoB,KAAKC,UAAUpB,MAH1DlC,KAAKiR,iBAAiBxJ,KAAKvF,IASnCyU,eAII,KAAiC,cAA1B3W,KAAKkS,kBACRlS,KAAKiR,iBAAiBzK,OAAS,GAC/BxG,KAAKmT,aAAanT,KAAKiR,iBAAiB,IAAI,GAG5CjR,KAAKiR,iBAAiB2F,QAU9B5C,YACIhU,KAAKmO,mBACL,MAAM3J,EAAS,IAAIiJ,EAAYuD,gBAGzBiD,EAAU,CAACnL,EAAQjH,KACN,cAAXA,GACA2C,EAAO0C,UACPlH,KAAK8R,wBAAwBoC,WAAWD,EAASjU,OAEjC,iBAAX6B,IACL2C,EAAO2P,OAAO,IAAIlS,MAAM,qCACxBjC,KAAK8R,wBAAwBoC,WAAWD,EAASjU,QAWzD,OARAA,KAAK8R,wBAAwBlM,QAAQqO,EAASjU,MAE9CA,KAAK0Q,kBAAoB,EAGzB1Q,KAAKoQ,aAGE5L,EAAO4N,QAKlBhC,aAKI,GAJApQ,KAAKmO,mBAEL8I,aAAajX,KAAK2Q,mBAEd3Q,KAAK0Q,kBAAoB1Q,KAAKyQ,gBAAiB,CAC/CzQ,KAAKqO,wBAAwB,cAK7B,MAAM2J,EAAUlT,EAAQmT,sBAAsB,EAAG,KAAOC,KAAKC,IAAI,EAAGnY,KAAK0Q,mBAAqB,IAC9F/B,QAAQgB,MAAM,oCAAoCuI,KAAKE,MAAMJ,EAAU,iBACvEhY,KAAK2Q,kBAAoB8F,WAAWzW,KAAKkO,cAAe8J,GACxDhY,KAAK0Q,mBAAqB,OAG1B1Q,KAAKqO,wBAAwB,gBAGjCrO,KAAKoO,eAWTA,eACqB,OAAbpO,KAAK8O,MAEL9O,KAAK8O,IAAIK,OAASnP,KAAKwR,MACvBxR,KAAK8O,IAAIO,QAAUrP,KAAKwR,MACxBxR,KAAK8O,IAAIS,QAAUvP,KAAKwR,MACxBxR,KAAK8O,IAAIG,UAAYjP,KAAKwR,MAC1BxR,KAAK8O,IAAIvB,QACTvN,KAAK8O,IAAM,MAMnB9L,uBACU6Y,EAAUuP,iBAAiBprB,KAAK8C,KAAM9C,KAAKI,gBACjDJ,KAAKS,UAKTkS,QACI,OAAO,IAAIqY,EAAmBhrB,MAKlCqO,wBAAwB6D,GAChBlS,KAAKuQ,oBAAsB2B,IAG/BlS,KAAKuQ,kBAAoB2B,EAEA,eAArBA,IACAlS,KAAK0Q,kBAAoB,EACzBuG,aAAajX,KAAK2Q,oBAGG,cAArBuB,GACAlS,KAAK2W,eAGT3W,KAAKmR,yBAAyBzQ,KAAKwR,IAKvC/D,mBACI,GAAInO,KAAKQ,WACL,MAAM,IAAIyB,MAAM,mCAMpB6P,8BACA,OAAO9R,KAAKmR,yBAKZe,uBACA,OAAOlS,KAAKuQ,mBAIpB,IAAIzL,EADJtF,EAAQwrB,mBAAqBA,EAE7B,SAAWlmB,GAOPA,EAAQumB,WAHR,SAAoBrqB,EAAS8B,GACzB,OAAOjC,EAAYK,OAAOC,KAAKH,EAAS6a,EAAUyP,qBAAsBzoB,mBAAmBC,KAmB/FgC,EAAQmT,sBALR,SAA+BQ,EAAKC,GAGhC,OAFAD,EAAMP,KAAKS,KAAKF,GAChBC,EAAMR,KAAKE,MAAMM,GACVR,KAAKE,MAAMF,KAAKU,UAAYF,EAAMD,EAAM,IAAMA,GAtB7D,CAyBG3T,IAAYA,EAAU,M,sBCtUzB,IAAIT,EAAgBrE,MAAQA,KAAKqE,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EAAa,IAAK,IAAIG,KAAKH,EAAShF,OAAOoF,eAAeC,KAAKL,EAAKG,KAAID,EAAOC,GAAKH,EAAIG,IAE5F,OADAD,EAAgB,QAAIF,EACbE,GAEXlF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAM8rB,EAAWlnB,EAAa,EAAQ,QACtC7E,EAAQ+rB,SAAWA,EACnB,MAAMC,EAAcnnB,EAAa,EAAQ,QACzC7E,EAAQgsB,YAAcA,EAdtB,SAAkBrgB,GACd,IAAK,IAAIC,KAAKD,EAAQ3L,EAAQkF,eAAe0G,KAAI5L,EAAQ4L,GAAKD,EAAEC,IAcpEF,CAAS,EAAQ,S,gBCfjB5L,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMmF,EAAc,EAAQ,OACtB+W,EAAY,EAAQ,OACpBjc,EAAc,EAAQ,OACtB4C,EAAM,EAAQ,OACdsZ,EAAgB,EAAQ,MACxBC,EAAY,EAAQ,OACpBC,EAAY,EAAQ,OAI1B,MAAMuJ,UAAwBzJ,EAAchc,YAIxCC,YAAYC,EAAU,IAClB,IAAIC,EASJ,GARA8L,MAAM/L,GACNE,KAAKgc,UAAW,EAEhBhc,KAAKyrB,OAAS,GACdzrB,KAAK0rB,qBAAuB,IAAIxP,IAChClc,KAAKoc,gBAAkB,IAAI1c,EAAYS,OAAOH,MAC9CA,KAAKqc,mBAAqB,IAAI3c,EAAYS,OAAOH,OAE5CA,KAAKoB,cAGN,OAFApB,KAAK+c,OAAS5S,QAAQgK,OAAO,8BAC7BnU,KAAK+c,OAAO/M,OAAMwT,QAItBxjB,KAAKsc,YAAc,IAAIX,EAAUY,KAAK,CAClCC,MAAM,EACNC,QAAS,IAAMzc,KAAK0c,iBACpBC,UAAW,CACPC,SAAU,IACVC,SAAS,EACTnE,IAAK,KAET5V,KAAM,8CACNga,SAAU/c,EAAKD,EAAQgd,QAAU/c,MAAAA,EAA+BA,EAAK,iBAGzEC,KAAK+c,OAAS,iBACJ/c,KAAKsc,YAAYU,cACjBhd,KAAKsc,YAAYW,KACvBjd,KAAKgc,UAAW,GAHN,GASdkB,cACA,OAAOld,KAAKgc,SAKZmB,YACA,OAAOnd,KAAK+c,OAKZK,qBACA,OAAOpd,KAAKoc,gBAKZiB,wBACA,OAAOrd,KAAKqc,mBAKhB5b,UACQT,KAAKQ,aAGTR,KAAKyrB,OAAOjlB,OAAS,EACrBxG,KAAK0rB,qBAAqBnY,SAAQ+J,GAAKA,EAAE7c,YACzCT,KAAKsc,YAAY7b,UACjBoL,MAAMpL,WAKVW,cACI,OAAOya,EAAUza,cAcrBmc,UAAUzd,GACN,MAAM6rB,EAAqB,IAAI7P,EAAUkP,mBAAmB1rB,OAAO4D,OAAO5D,OAAO4D,OAAO,GAAIpD,GAAU,CAAEM,eAAgBJ,KAAKI,kBAS7H,OARAJ,KAAK0d,WAAWiO,GACX3rB,KAAKyrB,OAAOG,SAAS9rB,EAAQkL,MAAMlI,OAG/B9C,KAAK2d,iBAAiB3N,OAAM,SAI9B2b,EAOX/N,UACI,OAAOhZ,EAAYiZ,KAAK7d,KAAKmc,SAWjCnZ,6BACUhD,KAAKsc,YAAYyB,gBACjB/d,KAAKsc,YAAYW,KAW3Bja,iBACI,MAAMgI,QAAc6Q,EAAUqC,SAASle,KAAKI,gBAE5C,aADMJ,KAAK2d,iBACJ3d,KAAKud,UAAU,CAAEvS,MAAAA,IAK5BhI,eAAeF,SACL+Y,EAAUuP,iBAAiBtoB,EAAM9C,KAAKI,sBACtCJ,KAAK2d,iBAOf3a,0BAEUhD,KAAK2d,uBAELxT,QAAQmM,IAAItW,KAAKyrB,OAAO7gB,KAAI9H,GAAQ+Y,EAAUuP,iBAAiBtoB,EAAM9C,KAAKI,yBAE1EJ,KAAK2d,iBAKf3a,uBACI,IAAIjD,EACJ,IAAIqe,EACJ,IACIA,QAAevC,EAAUwC,YAAYre,KAAKI,gBAE9C,MAAOgb,GAOH,MAJIA,aAAe9Y,EAAIjC,iBAAiBie,cACqC,OAAhD,QAAvBve,EAAKqb,EAAIxZ,gBAA6B,IAAP7B,OAAgB,EAASA,EAAG8B,UAC7D7B,KAAKqc,mBAAmB3b,KAAK0a,GAE3BA,EAEV,GAAIpb,KAAKQ,WACL,OAEJ,MAAMyiB,EAAQ7E,EAAOxT,KAAI,EAAG9H,KAAAA,KAAWA,IAAM+oB,OACzC5I,IAAUjjB,KAAKyrB,SAInBzrB,KAAKyrB,OAASxI,EACdjjB,KAAK0rB,qBAAqBnY,SAAQuY,IACzB7I,EAAM2I,SAASE,EAAGhpB,OACnBgpB,EAAGrrB,aAGXT,KAAKoc,gBAAgB1b,KAAKV,KAAKmc,UAKnCuB,WAAWiO,GACP3rB,KAAK0rB,qBAAqB7R,IAAI8R,GAC9BA,EAAmBprB,SAASqF,QAAQ5F,KAAK2e,YAAa3e,MAK1D2e,YAAYgN,GACR3rB,KAAK0rB,qBAAqB5jB,OAAO6jB,GAE5B3rB,KAAK2d,iBAAiB3N,OAAM,SAIjCmM,cACA,OAAOnc,KAAKyrB,OAAO7gB,KAAI9H,IACZ,CAAEA,KAAAA,OAIrBtD,EAAQ6lB,gBAAkBA,G,gBCnO1B/lB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtBlB,EAAqB,EAAQ,OAQnC,SAASyB,IAEL,MAAmC,SADjB2qB,OAAOlrB,EAAYQ,WAAWC,UAAU,uBACzCC,cAyErB,IAAIuD,EA/EJtF,EAAQ8rB,qBAAuB,gBAQ/B9rB,EAAQ4B,YAAcA,EAqBtB5B,EAAQ0e,SAbRlb,eAAwBJ,EAAWjD,EAAmBU,iBAAiBC,gBACnEwE,EAAQknB,sBACR,MAAM3iB,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQ8rB,sBAExD1pB,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAD1D,CAAEjH,OAAQ,QAC2DQ,GAClF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAK/E,aAFmBA,EAASG,QA2BhCvC,EAAQ6e,YAfRrb,eAA2BJ,EAAWjD,EAAmBU,iBAAiBC,gBACtEwE,EAAQknB,sBACR,MAAM3iB,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQ8rB,sBACxD1pB,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAAK,GAAIzG,GAChF,GAAwB,MAApBhB,EAASC,OAET,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,GAG/E,MAAMI,QAAaJ,EAASG,OAC5B,IAAK0I,MAAMC,QAAQ1I,GACf,MAAM,IAAIC,MAAM,yBAGpB,OAAOD,GA4BXxC,EAAQ4rB,iBAhBRpoB,eAAgCF,EAAMF,EAAWjD,EAAmBU,iBAAiBC,gBACjF,IAAIP,EACJ+E,EAAQknB,sBACR,MAAM3iB,EAAMxI,EAAYK,OAAOC,KAAKyB,EAAS5B,QAASxB,EAAQ8rB,qBAAsBxoB,GAE9ElB,QAAiBjC,EAAmBU,iBAAiBqB,YAAY2H,EAD1D,CAAEjH,OAAQ,UAC2DQ,GAClF,GAAwB,MAApBhB,EAASC,OAAgB,CACzB,MACM8K,EAA2B5M,OAApBA,SADM6B,EAASG,QACLG,SAAyCnC,EAAK,yBAAyB+C,mCAC9F6L,QAAQsR,KAAKtT,QAEZ,GAAwB,MAApB/K,EAASC,OAEd,YADkBlC,EAAmBU,iBAAiByB,cAAcU,OAAOZ,IAMnF,SAAWkD,GASPA,EAAQknB,oBALR,WACI,IAAK5qB,IACD,MAAM,IAAIa,MAAM,0BAN5B,CAUG6C,IAAYA,EAAU,M,gBChGzBxF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoc,EAAY,EAAQ,OAC1Brc,EAAQ4B,YAAcya,EAAUza,a,cCFhC9B,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IA2CtDD,EAAQyL,iBAtCR,SAA0BghB,EAAQnpB,EAAMopB,EAAUpO,EAAS,IACvD,IAAKmO,EAAOvnB,eAAe5B,GACvB,MAAMb,MAAM,qBAAqBa,MAErC,MAAMrD,EAAQwsB,EAAOnpB,GACrB,QAAiB,IAAbopB,EAAqB,CACrB,IAAIC,GAAQ,EACZ,OAAQD,GACJ,IAAK,QACDC,EAAQ1hB,MAAMC,QAAQjL,GACtB,MACJ,IAAK,SACD0sB,OAAyB,IAAV1sB,EACf,MACJ,QACI0sB,SAAe1sB,IAAUysB,EAEjC,IAAKC,EACD,MAAM,IAAIlqB,MAAM,aAAaa,sBAAyBopB,MAE1D,GAAIpO,EAAOtX,OAAS,EAAG,CACnB,IAAI2lB,GAAQ,EACZ,OAAQD,GACJ,IAAK,SACL,IAAK,SACL,IAAK,UACDC,EAAQrO,EAAO8N,SAASnsB,GACxB,MACJ,QACI0sB,EAAQrO,EAAOsO,WAAUC,GAAKA,IAAM5sB,KAAU,EAGtD,IAAK0sB,EACD,MAAM,IAAIlqB,MAAM,aAAaa,qCAAwCO,KAAKC,UAAUwa,U,gBCtCpGxe,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,MAAMoB,EAAc,EAAQ,OACtB4pB,EAAY,EAAQ,OACpB9qB,EAAqB,EAAQ,OAQnC,MAAM6lB,UAAyBiF,EAAUC,cAIrC7qB,YAAYC,EAAU,IAClB,IAAIC,EACJ8L,QACA7L,KAAKI,eAAgDL,OAA9BA,EAAKD,EAAQM,gBAAgDL,EAAKJ,EAAmBU,iBAAiBC,eASjI0C,YAAY0I,GACR,MAAM,eAAEtL,GAAmBJ,MACrB,QAAEgB,EAAO,OAAEC,GAAWb,GACtB,YAAEsB,EAAW,cAAEI,GAAkBnC,EAAmBU,iBACpDylB,EAAO9kB,EAAUC,EACjBoI,EAAMvE,EAAQuE,IAAIyc,EAAMpa,GACxB9J,QAAiBF,EAAY2H,EAAK,GAAIjJ,GAC5C,GAAwB,MAApBwB,EAASC,OAET,YADkBC,EAAcU,OAAOZ,GAG3C,OAAOA,EAASG,OAOpBiB,aACI,MAAM,eAAE5C,GAAmBJ,MACrB,QAAEgB,EAAO,OAAEC,GAAWb,GACtB,YAAEsB,EAAW,cAAEI,GAAkBnC,EAAmBU,iBACpDylB,EAAO9kB,EAAUC,EACjBoI,EAAMvE,EAAQuE,IAAIyc,EAAM,IACxBlkB,QAAiBF,EAAY2H,EAAK,GAAIjJ,GAC5C,GAAwB,MAApBwB,EAASC,OAET,YADkBC,EAAcU,OAAOZ,GAI3C,aADqBA,EAASG,QAChBwjB,WASlBviB,aAAa0I,GACT,MAAM,eAAEtL,GAAmBJ,MACrB,QAAEgB,EAAO,OAAEC,GAAWb,GACtB,YAAEsB,EAAW,cAAEI,GAAkBnC,EAAmBU,iBACpDylB,EAAO9kB,EAAUC,EACjBoI,EAAMvE,EAAQuE,IAAIyc,EAAMpa,GAExB9J,QAAiBF,EAAY2H,EADtB,CAAEjH,OAAQ,UACuBhC,GAC9C,GAAwB,MAApBwB,EAASC,OAET,YADkBC,EAAcU,OAAOZ,GAa/CoB,WAAW0I,EAAI4gB,GACX,MAAM,eAAElsB,GAAmBJ,MACrB,QAAEgB,EAAO,OAAEC,GAAWb,GACtB,YAAEsB,EAAW,cAAEI,GAAkBnC,EAAmBU,iBACpDylB,EAAO9kB,EAAUC,EACjBoI,EAAMvE,EAAQuE,IAAIyc,EAAMpa,GACxBvI,EAAO,CAAEC,KAAMC,KAAKC,UAAUgpB,GAAYlqB,OAAQ,OAClDR,QAAiBF,EAAY2H,EAAKlG,EAAM/C,GAC9C,GAAwB,MAApBwB,EAASC,OAET,YADkBC,EAAcU,OAAOZ,IASnD,IAAIkD,EAJJtF,EAAQgmB,iBAAmBA,EAK3B,SAAW1gB,GAOPA,EAAQuE,IAHR,SAAayc,EAAMpa,GACf,OAAO7K,EAAYK,OAAOC,KAAK2kB,EAzGR,iBAyGsCpa,IALrE,CAQG5G,IAAYA,EAAU","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/basemanager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/builder/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/config/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/contents/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/contents/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernel/comm.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernel/default.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernel/future.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernel/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernel/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernel/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernel/messages.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernel/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernel/serialize.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernel/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernelspec/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernelspec/kernelspec.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernelspec/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernelspec/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/kernelspec/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/nbconvert/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/serverconnection.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/session/default.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/session/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/session/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/session/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/session/session.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/session/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/setting/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/shim/ws.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/terminal/default.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/terminal/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/terminal/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/terminal/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/terminal/terminal.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@pyviz/jupyterlab_pyviz/node_modules/@jupyterlab/services/lib/workspace/index.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst signaling_1 = require(\"@lumino/signaling\");\nconst serverconnection_1 = require(\"./serverconnection\");\nclass BaseManager {\n    constructor(options) {\n        var _a;\n        this._isDisposed = false;\n        this._disposed = new signaling_1.Signal(this);\n        this.serverSettings = (_a = options.serverSettings, (_a !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings()));\n    }\n    /**\n     * A signal emitted when the delegate is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Test whether the delegate has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the delegate and invoke the callback function.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._disposed.emit(undefined);\n        signaling_1.Signal.clearData(this);\n    }\n}\nexports.BaseManager = BaseManager;\n//# sourceMappingURL=basemanager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab build service.\n */\nconst BUILD_SETTINGS_URL = 'api/build';\n/**\n * The build API service manager.\n */\nclass BuildManager {\n    /**\n     * Create a new setting manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        this._url = '';\n        this.serverSettings = (_a = options.serverSettings, (_a !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings()));\n        const { baseUrl, appUrl } = this.serverSettings;\n        this._url = coreutils_1.URLExt.join(baseUrl, appUrl, BUILD_SETTINGS_URL);\n    }\n    /**\n     * Test whether the build service is available.\n     */\n    get isAvailable() {\n        return coreutils_1.PageConfig.getOption('buildAvailable').toLowerCase() === 'true';\n    }\n    /**\n     * Test whether to check build status automatically.\n     */\n    get shouldCheck() {\n        return coreutils_1.PageConfig.getOption('buildCheck').toLowerCase() === 'true';\n    }\n    /**\n     * Get whether the application should be built.\n     */\n    getStatus() {\n        const { _url, serverSettings } = this;\n        const promise = serverconnection_1.ServerConnection.makeRequest(_url, {}, serverSettings);\n        return promise\n            .then(response => {\n            if (response.status !== 200) {\n                throw new serverconnection_1.ServerConnection.ResponseError(response);\n            }\n            return response.json();\n        })\n            .then(data => {\n            if (typeof data.status !== 'string') {\n                throw new Error('Invalid data');\n            }\n            if (typeof data.message !== 'string') {\n                throw new Error('Invalid data');\n            }\n            return data;\n        });\n    }\n    /**\n     * Build the application.\n     */\n    build() {\n        const { _url, serverSettings } = this;\n        const init = { method: 'POST' };\n        const promise = serverconnection_1.ServerConnection.makeRequest(_url, init, serverSettings);\n        return promise.then(response => {\n            if (response.status === 400) {\n                throw new serverconnection_1.ServerConnection.ResponseError(response, 'Build aborted');\n            }\n            if (response.status !== 200) {\n                const message = `Build failed with ${response.status}, please run 'jupyter lab build' on the server for full output`;\n                throw new serverconnection_1.ServerConnection.ResponseError(response, message);\n            }\n        });\n    }\n    /**\n     * Cancel an active build.\n     */\n    cancel() {\n        const { _url, serverSettings } = this;\n        const init = { method: 'DELETE' };\n        const promise = serverconnection_1.ServerConnection.makeRequest(_url, init, serverSettings);\n        return promise.then(response => {\n            if (response.status !== 204) {\n                throw new serverconnection_1.ServerConnection.ResponseError(response);\n            }\n        });\n    }\n}\nexports.BuildManager = BuildManager;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst __1 = require(\"..\");\n/**\n * The url for the config service.\n */\nconst SERVICE_CONFIG_URL = 'api/config';\n/**\n * The namespace for ConfigSection statics.\n */\nvar ConfigSection;\n(function (ConfigSection) {\n    /**\n     * Create a config section.\n     *\n     * @returns A Promise that is fulfilled with the config section is loaded.\n     */\n    function create(options) {\n        const section = new DefaultConfigSection(options);\n        return section.load().then(() => {\n            return section;\n        });\n    }\n    ConfigSection.create = create;\n})(ConfigSection = exports.ConfigSection || (exports.ConfigSection = {}));\n/**\n * Implementation of the Configurable data section.\n */\nclass DefaultConfigSection {\n    /**\n     * Construct a new config section.\n     */\n    constructor(options) {\n        var _a;\n        this._url = 'unknown';\n        const settings = (this.serverSettings = (_a = options.serverSettings, (_a !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings())));\n        this._url = coreutils_1.URLExt.join(settings.baseUrl, SERVICE_CONFIG_URL, encodeURIComponent(options.name));\n    }\n    /**\n     * Get the data for this section.\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * Load the initial data for this section.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     */\n    async load() {\n        const response = await __1.ServerConnection.makeRequest(this._url, {}, this.serverSettings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        this._data = await response.json();\n    }\n    /**\n     * Modify the stored config values.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * Updates the local data immediately, sends the change to the server,\n     * and updates the local data with the response, and fulfils the promise\n     * with that data.\n     */\n    async update(newdata) {\n        this._data = Object.assign(Object.assign({}, this._data), newdata);\n        const init = {\n            method: 'PATCH',\n            body: JSON.stringify(newdata)\n        };\n        const response = await __1.ServerConnection.makeRequest(this._url, init, this.serverSettings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        this._data = await response.json();\n        return this._data;\n    }\n}\n/**\n * Configurable object with defaults.\n */\nclass ConfigWithDefaults {\n    /**\n     * Create a new config with defaults.\n     */\n    constructor(options) {\n        var _a, _b;\n        this._className = '';\n        this._section = options.section;\n        this._defaults = (_a = options.defaults, (_a !== null && _a !== void 0 ? _a : {}));\n        this._className = (_b = options.className, (_b !== null && _b !== void 0 ? _b : ''));\n    }\n    /**\n     * Get data from the config section or fall back to defaults.\n     */\n    get(key) {\n        const data = this._classData();\n        return key in data ? data[key] : this._defaults[key];\n    }\n    /**\n     * Set a config value.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * Sends the update to the server, and changes our local copy of the data\n     * immediately.\n     */\n    set(key, value) {\n        const d = {};\n        d[key] = value;\n        if (this._className) {\n            const d2 = {};\n            d2[this._className] = d;\n            return this._section.update(d2);\n        }\n        else {\n            return this._section.update(d);\n        }\n    }\n    /**\n     * Get data from the Section with our classname, if available.\n     *\n     * #### Notes\n     * If we have no classname, get all of the data in the Section\n     */\n    _classData() {\n        const data = this._section.data;\n        if (this._className && this._className in data) {\n            return data[this._className];\n        }\n        return data;\n    }\n}\nexports.ConfigWithDefaults = ConfigWithDefaults;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst validate = __importStar(require(\"./validate\"));\n/**\n * The url for the default drive service.\n */\nconst SERVICE_DRIVE_URL = 'api/contents';\n/**\n * The url for the file access.\n */\nconst FILES_URL = 'files';\n/**\n * A namespace for contents interfaces.\n */\nvar Contents;\n(function (Contents) {\n    /**\n     * Validates an IModel, thowing an error if it does not pass.\n     */\n    function validateContentsModel(contents) {\n        validate.validateContentsModel(contents);\n    }\n    Contents.validateContentsModel = validateContentsModel;\n    /**\n     * Validates an ICheckpointModel, thowing an error if it does not pass.\n     */\n    function validateCheckpointModel(checkpoint) {\n        validate.validateCheckpointModel(checkpoint);\n    }\n    Contents.validateCheckpointModel = validateCheckpointModel;\n})(Contents = exports.Contents || (exports.Contents = {}));\n/**\n * A contents manager that passes file operations to the server.\n * Multiple servers implementing the `IDrive` interface can be\n * attached to the contents manager, so that the same session can\n * perform file operations on multiple backends.\n *\n * This includes checkpointing with the normal file operations.\n */\nclass ContentsManager {\n    /**\n     * Construct a new contents manager object.\n     *\n     * @param options - The options used to initialize the object.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._isDisposed = false;\n        this._additionalDrives = new Map();\n        this._fileChanged = new signaling_1.Signal(this);\n        const serverSettings = (this.serverSettings = (_a = options.serverSettings, (_a !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings())));\n        this._defaultDrive = (_b = options.defaultDrive, (_b !== null && _b !== void 0 ? _b : new Drive({ serverSettings })));\n        this._defaultDrive.fileChanged.connect(this._onFileChanged, this);\n    }\n    /**\n     * A signal emitted when a file operation takes place.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Test whether the manager has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Add an `IDrive` to the manager.\n     */\n    addDrive(drive) {\n        this._additionalDrives.set(drive.name, drive);\n        drive.fileChanged.connect(this._onFileChanged, this);\n    }\n    /**\n     * Given a path, get a ModelDB.IFactory from the\n     * relevant backend. Returns `undefined` if the backend\n     * does not provide one.\n     */\n    getModelDBFactory(path) {\n        var _a, _b;\n        const [drive] = this._driveForPath(path);\n        return _b = (_a = drive) === null || _a === void 0 ? void 0 : _a.modelDBFactory, (_b !== null && _b !== void 0 ? _b : null);\n    }\n    /**\n     * Given a path of the form `drive:local/portion/of/it.txt`\n     * get the local part of it.\n     *\n     * @param path: the path.\n     *\n     * @returns The local part of the path.\n     */\n    localPath(path) {\n        const parts = path.split('/');\n        const firstParts = parts[0].split(':');\n        if (firstParts.length === 1 || !this._additionalDrives.has(firstParts[0])) {\n            return coreutils_1.PathExt.removeSlash(path);\n        }\n        return coreutils_1.PathExt.join(firstParts.slice(1).join(':'), ...parts.slice(1));\n    }\n    /**\n     * Normalize a global path. Reduces '..' and '.' parts, and removes\n     * leading slashes from the local part of the path, while retaining\n     * the drive name if it exists.\n     *\n     * @param path: the path.\n     *\n     * @returns The normalized path.\n     */\n    normalize(path) {\n        const parts = path.split(':');\n        if (parts.length === 1) {\n            return coreutils_1.PathExt.normalize(path);\n        }\n        return `${parts[0]}:${coreutils_1.PathExt.normalize(parts.slice(1).join(':'))}`;\n    }\n    /**\n     * Resolve a global path, starting from the root path. Behaves like\n     * posix-path.resolve, with 3 differences:\n     *  - will never prepend cwd\n     *  - if root has a drive name, the result is prefixed with \"<drive>:\"\n     *  - before adding drive name, leading slashes are removed\n     *\n     * @param path: the path.\n     *\n     * @returns The normalized path.\n     */\n    resolvePath(root, path) {\n        const driveName = this.driveName(root);\n        const localPath = this.localPath(root);\n        const resolved = coreutils_1.PathExt.resolve('/', localPath, path);\n        return driveName ? `${driveName}:${resolved}` : resolved;\n    }\n    /**\n     * Given a path of the form `drive:local/portion/of/it.txt`\n     * get the name of the drive. If the path is missing\n     * a drive portion, returns an empty string.\n     *\n     * @param path: the path.\n     *\n     * @returns The drive name for the path, or the empty string.\n     */\n    driveName(path) {\n        const parts = path.split('/');\n        const firstParts = parts[0].split(':');\n        if (firstParts.length === 1) {\n            return '';\n        }\n        if (this._additionalDrives.has(firstParts[0])) {\n            return firstParts[0];\n        }\n        return '';\n    }\n    /**\n     * Get a file or directory.\n     *\n     * @param path: The path to the file.\n     *\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     */\n    get(path, options) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.get(localPath, options).then(contentsModel => {\n            const listing = [];\n            if (contentsModel.type === 'directory' && contentsModel.content) {\n                algorithm_1.each(contentsModel.content, (item) => {\n                    listing.push(Object.assign(Object.assign({}, item), { path: this._toGlobalPath(drive, item.path) }));\n                });\n                return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive, localPath), content: listing });\n            }\n            else {\n                return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive, localPath) });\n            }\n        });\n    }\n    /**\n     * Get an encoded download url given a file path.\n     *\n     * @param path - An absolute POSIX file path on the server.\n     *\n     * #### Notes\n     * It is expected that the path contains no relative paths.\n     *\n     * The returned URL may include a query parameter.\n     */\n    getDownloadUrl(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.getDownloadUrl(localPath);\n    }\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the\n     *    file is created.\n     */\n    newUntitled(options = {}) {\n        if (options.path) {\n            const globalPath = this.normalize(options.path);\n            const [drive, localPath] = this._driveForPath(globalPath);\n            return drive\n                .newUntitled(Object.assign(Object.assign({}, options), { path: localPath }))\n                .then(contentsModel => {\n                return Object.assign(Object.assign({}, contentsModel), { path: coreutils_1.PathExt.join(globalPath, contentsModel.name) });\n            });\n        }\n        else {\n            return this._defaultDrive.newUntitled(options);\n        }\n    }\n    /**\n     * Delete a file.\n     *\n     * @param path - The path to the file.\n     *\n     * @returns A promise which resolves when the file is deleted.\n     */\n    delete(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.delete(localPath);\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param path - The original file path.\n     *\n     * @param newPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file contents model when\n     *   the file is renamed.\n     */\n    rename(path, newPath) {\n        const [drive1, path1] = this._driveForPath(path);\n        const [drive2, path2] = this._driveForPath(newPath);\n        if (drive1 !== drive2) {\n            throw Error('ContentsManager: renaming files must occur within a Drive');\n        }\n        return drive1.rename(path1, path2).then(contentsModel => {\n            return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive1, path2) });\n        });\n    }\n    /**\n     * Save a file.\n     *\n     * @param path - The desired file path.\n     *\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the\n     *   file is saved.\n     *\n     * #### Notes\n     * Ensure that `model.content` is populated for the file.\n     */\n    save(path, options = {}) {\n        const globalPath = this.normalize(path);\n        const [drive, localPath] = this._driveForPath(path);\n        return drive\n            .save(localPath, Object.assign(Object.assign({}, options), { path: localPath }))\n            .then(contentsModel => {\n            return Object.assign(Object.assign({}, contentsModel), { path: globalPath });\n        });\n    }\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param path - The original file path.\n     *\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new contents model when the\n     *  file is copied.\n     *\n     * #### Notes\n     * The server will select the name of the copied file.\n     */\n    copy(fromFile, toDir) {\n        const [drive1, path1] = this._driveForPath(fromFile);\n        const [drive2, path2] = this._driveForPath(toDir);\n        if (drive1 === drive2) {\n            return drive1.copy(path1, path2).then(contentsModel => {\n                return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive1, contentsModel.path) });\n            });\n        }\n        else {\n            throw Error('Copying files between drives is not currently implemented');\n        }\n    }\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     */\n    createCheckpoint(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.createCheckpoint(localPath);\n    }\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     */\n    listCheckpoints(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.listCheckpoints(localPath);\n    }\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param path - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     */\n    restoreCheckpoint(path, checkpointID) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.restoreCheckpoint(localPath, checkpointID);\n    }\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     */\n    deleteCheckpoint(path, checkpointID) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.deleteCheckpoint(localPath, checkpointID);\n    }\n    /**\n     * Given a drive and a local path, construct a fully qualified\n     * path. The inverse of `_driveForPath`.\n     *\n     * @param drive: an `IDrive`.\n     *\n     * @param localPath: the local path on the drive.\n     *\n     * @returns the fully qualified path.\n     */\n    _toGlobalPath(drive, localPath) {\n        if (drive === this._defaultDrive) {\n            return coreutils_1.PathExt.removeSlash(localPath);\n        }\n        else {\n            return `${drive.name}:${coreutils_1.PathExt.removeSlash(localPath)}`;\n        }\n    }\n    /**\n     * Given a path, get the `IDrive to which it refers,\n     * where the path satisfies the pattern\n     * `'driveName:path/to/file'`. If there is no `driveName`\n     * prepended to the path, it returns the default drive.\n     *\n     * @param path: a path to a file.\n     *\n     * @returns A tuple containing an `IDrive` object for the path,\n     * and a local path for that drive.\n     */\n    _driveForPath(path) {\n        const driveName = this.driveName(path);\n        const localPath = this.localPath(path);\n        if (driveName) {\n            return [this._additionalDrives.get(driveName), localPath];\n        }\n        else {\n            return [this._defaultDrive, localPath];\n        }\n    }\n    /**\n     * Respond to fileChanged signals from the drives attached to\n     * the manager. This prepends the drive name to the path if necessary,\n     * and then forwards the signal.\n     */\n    _onFileChanged(sender, args) {\n        var _a, _b;\n        if (sender === this._defaultDrive) {\n            this._fileChanged.emit(args);\n        }\n        else {\n            let newValue = null;\n            let oldValue = null;\n            if ((_a = args.newValue) === null || _a === void 0 ? void 0 : _a.path) {\n                newValue = Object.assign(Object.assign({}, args.newValue), { path: this._toGlobalPath(sender, args.newValue.path) });\n            }\n            if ((_b = args.oldValue) === null || _b === void 0 ? void 0 : _b.path) {\n                oldValue = Object.assign(Object.assign({}, args.oldValue), { path: this._toGlobalPath(sender, args.oldValue.path) });\n            }\n            this._fileChanged.emit({\n                type: args.type,\n                newValue,\n                oldValue\n            });\n        }\n    }\n}\nexports.ContentsManager = ContentsManager;\n/**\n * A default implementation for an `IDrive`, talking to the\n * server using the Jupyter REST API.\n */\nclass Drive {\n    /**\n     * Construct a new contents manager object.\n     *\n     * @param options - The options used to initialize the object.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c;\n        this._isDisposed = false;\n        this._fileChanged = new signaling_1.Signal(this);\n        this.name = (_a = options.name, (_a !== null && _a !== void 0 ? _a : 'Default'));\n        this._apiEndpoint = (_b = options.apiEndpoint, (_b !== null && _b !== void 0 ? _b : SERVICE_DRIVE_URL));\n        this.serverSettings = (_c = options.serverSettings, (_c !== null && _c !== void 0 ? _c : __1.ServerConnection.makeSettings()));\n    }\n    /**\n     * A signal emitted when a file operation takes place.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Test whether the manager has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Get a file or directory.\n     *\n     * @param localPath: The path to the file.\n     *\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     *\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async get(localPath, options) {\n        let url = this._getUrl(localPath);\n        if (options) {\n            // The notebook type cannot take an format option.\n            if (options.type === 'notebook') {\n                delete options['format'];\n            }\n            const content = options.content ? '1' : '0';\n            const params = Object.assign(Object.assign({}, options), { content });\n            url += coreutils_1.URLExt.objectToQueryString(params);\n        }\n        const settings = this.serverSettings;\n        const response = await __1.ServerConnection.makeRequest(url, {}, settings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        return data;\n    }\n    /**\n     * Get an encoded download url given a file path.\n     *\n     * @param localPath - An absolute POSIX file path on the server.\n     *\n     * #### Notes\n     * It is expected that the path contains no relative paths.\n     *\n     * The returned URL may include a query parameter.\n     */\n    getDownloadUrl(localPath) {\n        const baseUrl = this.serverSettings.baseUrl;\n        let url = coreutils_1.URLExt.join(baseUrl, FILES_URL, coreutils_1.URLExt.encodeParts(localPath));\n        const xsrfTokenMatch = document.cookie.match('\\\\b_xsrf=([^;]*)\\\\b');\n        if (xsrfTokenMatch) {\n            const fullurl = new URL(url);\n            fullurl.searchParams.append('_xsrf', xsrfTokenMatch[1]);\n            url = fullurl.toString();\n        }\n        return Promise.resolve(url);\n    }\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the\n     *    file is created.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async newUntitled(options = {}) {\n        var _a;\n        let body = '{}';\n        if (options) {\n            if (options.ext) {\n                options.ext = Private.normalizeExtension(options.ext);\n            }\n            body = JSON.stringify(options);\n        }\n        const settings = this.serverSettings;\n        const url = this._getUrl((_a = options.path, (_a !== null && _a !== void 0 ? _a : '')));\n        const init = {\n            method: 'POST',\n            body\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        if (response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'new',\n            oldValue: null,\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Delete a file.\n     *\n     * @param localPath - The path to the file.\n     *\n     * @returns A promise which resolves when the file is deleted.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n     */\n    async delete(localPath) {\n        const url = this._getUrl(localPath);\n        const settings = this.serverSettings;\n        const init = { method: 'DELETE' };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        // TODO: update IPEP27 to specify errors more precisely, so\n        // that error types can be detected here with certainty.\n        if (response.status !== 204) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        this._fileChanged.emit({\n            type: 'delete',\n            oldValue: { path: localPath },\n            newValue: null\n        });\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param oldLocalPath - The original file path.\n     *\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file contents model when\n     *   the file is renamed.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async rename(oldLocalPath, newLocalPath) {\n        const settings = this.serverSettings;\n        const url = this._getUrl(oldLocalPath);\n        const init = {\n            method: 'PATCH',\n            body: JSON.stringify({ path: newLocalPath })\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'rename',\n            oldValue: { path: oldLocalPath },\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Save a file.\n     *\n     * @param localPath - The desired file path.\n     *\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the\n     *   file is saved.\n     *\n     * #### Notes\n     * Ensure that `model.content` is populated for the file.\n     *\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async save(localPath, options = {}) {\n        const settings = this.serverSettings;\n        const url = this._getUrl(localPath);\n        const init = {\n            method: 'PUT',\n            body: JSON.stringify(options)\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        // will return 200 for an existing file and 201 for a new file\n        if (response.status !== 200 && response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'save',\n            oldValue: null,\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param localPath - The original file path.\n     *\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new contents model when the\n     *  file is copied.\n     *\n     * #### Notes\n     * The server will select the name of the copied file.\n     *\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async copy(fromFile, toDir) {\n        const settings = this.serverSettings;\n        const url = this._getUrl(toDir);\n        const init = {\n            method: 'POST',\n            body: JSON.stringify({ copy_from: fromFile })\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        if (response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'new',\n            oldValue: null,\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async createCheckpoint(localPath) {\n        const url = this._getUrl(localPath, 'checkpoints');\n        const init = { method: 'POST' };\n        const response = await __1.ServerConnection.makeRequest(url, init, this.serverSettings);\n        if (response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateCheckpointModel(data);\n        return data;\n    }\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async listCheckpoints(localPath) {\n        const url = this._getUrl(localPath, 'checkpoints');\n        const response = await __1.ServerConnection.makeRequest(url, {}, this.serverSettings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        if (!Array.isArray(data)) {\n            throw new Error('Invalid Checkpoint list');\n        }\n        for (let i = 0; i < data.length; i++) {\n            validate.validateCheckpointModel(data[i]);\n        }\n        return data;\n    }\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n     */\n    async restoreCheckpoint(localPath, checkpointID) {\n        const url = this._getUrl(localPath, 'checkpoints', checkpointID);\n        const init = { method: 'POST' };\n        const response = await __1.ServerConnection.makeRequest(url, init, this.serverSettings);\n        if (response.status !== 204) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n    }\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n     */\n    async deleteCheckpoint(localPath, checkpointID) {\n        const url = this._getUrl(localPath, 'checkpoints', checkpointID);\n        const init = { method: 'DELETE' };\n        const response = await __1.ServerConnection.makeRequest(url, init, this.serverSettings);\n        if (response.status !== 204) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n    }\n    /**\n     * Get a REST url for a file given a path.\n     */\n    _getUrl(...args) {\n        const parts = args.map(path => coreutils_1.URLExt.encodeParts(path));\n        const baseUrl = this.serverSettings.baseUrl;\n        return coreutils_1.URLExt.join(baseUrl, this._apiEndpoint, ...parts);\n    }\n}\nexports.Drive = Drive;\n/**\n * A namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Normalize a file extension to be of the type `'.foo'`.\n     *\n     * Adds a leading dot if not present and converts to lower case.\n     */\n    function normalizeExtension(extension) {\n        if (extension.length > 0 && extension.indexOf('.') !== 0) {\n            extension = `.${extension}`;\n        }\n        return extension;\n    }\n    Private.normalizeExtension = normalizeExtension;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_1 = require(\"../validate\");\n/**\n * Validate an `Contents.IModel` object.\n */\nfunction validateContentsModel(model) {\n    validate_1.validateProperty(model, 'name', 'string');\n    validate_1.validateProperty(model, 'path', 'string');\n    validate_1.validateProperty(model, 'type', 'string');\n    validate_1.validateProperty(model, 'created', 'string');\n    validate_1.validateProperty(model, 'last_modified', 'string');\n    validate_1.validateProperty(model, 'mimetype', 'object');\n    validate_1.validateProperty(model, 'content', 'object');\n    validate_1.validateProperty(model, 'format', 'object');\n}\nexports.validateContentsModel = validateContentsModel;\n/**\n * Validate an `Contents.ICheckpointModel` object.\n */\nfunction validateCheckpointModel(model) {\n    validate_1.validateProperty(model, 'id', 'string');\n    validate_1.validateProperty(model, 'last_modified', 'string');\n}\nexports.validateCheckpointModel = validateCheckpointModel;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./config\"));\n__export(require(\"./contents\"));\n__export(require(\"./kernel\"));\n__export(require(\"./kernelspec\"));\n__export(require(\"./manager\"));\n__export(require(\"./serverconnection\"));\n__export(require(\"./session\"));\n__export(require(\"./setting\"));\n__export(require(\"./terminal\"));\n__export(require(\"./workspace\"));\n__export(require(\"./nbconvert\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst disposable_1 = require(\"@lumino/disposable\");\nconst KernelMessage = __importStar(require(\"./messages\"));\n/**\n * Comm channel handler.\n */\nclass CommHandler extends disposable_1.DisposableDelegate {\n    /**\n     * Construct a new comm channel.\n     */\n    constructor(target, id, kernel, disposeCb) {\n        super(disposeCb);\n        this._target = '';\n        this._id = '';\n        this._id = id;\n        this._target = target;\n        this._kernel = kernel;\n    }\n    /**\n     * The unique id for the comm channel.\n     */\n    get commId() {\n        return this._id;\n    }\n    /**\n     * The target name for the comm channel.\n     */\n    get targetName() {\n        return this._target;\n    }\n    /**\n     * Get the callback for a comm close event.\n     *\n     * #### Notes\n     * This is called when the comm is closed from either the server or client.\n     *\n     * **See also:** [[ICommClose]], [[close]]\n     */\n    get onClose() {\n        return this._onClose;\n    }\n    /**\n     * Set the callback for a comm close event.\n     *\n     * #### Notes\n     * This is called when the comm is closed from either the server or client. If\n     * the function returns a promise, and the kernel was closed from the server,\n     * kernel message processing will pause until the returned promise is\n     * fulfilled.\n     *\n     * **See also:** [[close]]\n     */\n    set onClose(cb) {\n        this._onClose = cb;\n    }\n    /**\n     * Get the callback for a comm message received event.\n     */\n    get onMsg() {\n        return this._onMsg;\n    }\n    /**\n     * Set the callback for a comm message received event.\n     *\n     * #### Notes\n     * This is called when a comm message is received. If the function returns a\n     * promise, kernel message processing will pause until it is fulfilled.\n     */\n    set onMsg(cb) {\n        this._onMsg = cb;\n    }\n    /**\n     * Open a comm with optional data and metadata.\n     *\n     * #### Notes\n     * This sends a `comm_open` message to the server.\n     *\n     * **See also:** [[ICommOpen]]\n     */\n    open(data, metadata, buffers = []) {\n        if (this.isDisposed || this._kernel.isDisposed) {\n            throw new Error('Cannot open');\n        }\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_open',\n            channel: 'shell',\n            username: this._kernel.username,\n            session: this._kernel.clientId,\n            content: {\n                comm_id: this._id,\n                target_name: this._target,\n                data: (data !== null && data !== void 0 ? data : {})\n            },\n            metadata,\n            buffers\n        });\n        return this._kernel.sendShellMessage(msg, false, true);\n    }\n    /**\n     * Send a `comm_msg` message to the kernel.\n     *\n     * #### Notes\n     * This is a no-op if the comm has been closed.\n     *\n     * **See also:** [[ICommMsg]]\n     */\n    send(data, metadata, buffers = [], disposeOnDone = true) {\n        if (this.isDisposed || this._kernel.isDisposed) {\n            throw new Error('Cannot send');\n        }\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_msg',\n            channel: 'shell',\n            username: this._kernel.username,\n            session: this._kernel.clientId,\n            content: {\n                comm_id: this._id,\n                data: data\n            },\n            metadata,\n            buffers\n        });\n        return this._kernel.sendShellMessage(msg, false, disposeOnDone);\n    }\n    /**\n     * Close the comm.\n     *\n     * #### Notes\n     * This will send a `comm_close` message to the kernel, and call the\n     * `onClose` callback if set.\n     *\n     * This is a no-op if the comm is already closed.\n     *\n     * **See also:** [[ICommClose]], [[onClose]]\n     */\n    close(data, metadata, buffers = []) {\n        if (this.isDisposed || this._kernel.isDisposed) {\n            throw new Error('Cannot close');\n        }\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_close',\n            channel: 'shell',\n            username: this._kernel.username,\n            session: this._kernel.clientId,\n            content: {\n                comm_id: this._id,\n                data: (data !== null && data !== void 0 ? data : {})\n            },\n            metadata,\n            buffers\n        });\n        const future = this._kernel.sendShellMessage(msg, false, true);\n        const onClose = this._onClose;\n        if (onClose) {\n            const ioMsg = KernelMessage.createMessage({\n                msgType: 'comm_close',\n                channel: 'iopub',\n                username: this._kernel.username,\n                session: this._kernel.clientId,\n                content: {\n                    comm_id: this._id,\n                    data: (data !== null && data !== void 0 ? data : {})\n                },\n                metadata,\n                buffers\n            });\n            // In the future, we may want to communicate back to the user the possible\n            // promise returned from onClose.\n            void onClose(ioMsg);\n        }\n        this.dispose();\n        return future;\n    }\n}\nexports.CommHandler = CommHandler;\n//# sourceMappingURL=comm.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst coreutils_2 = require(\"@lumino/coreutils\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst comm_1 = require(\"./comm\");\nconst KernelMessage = __importStar(require(\"./messages\"));\nconst future_1 = require(\"./future\");\nconst serialize = __importStar(require(\"./serialize\"));\nconst validate = __importStar(require(\"./validate\"));\nconst kernelspec_1 = require(\"../kernelspec\");\nconst restapi = __importStar(require(\"./restapi\"));\nconst RESTARTING_KERNEL_SESSION = '_RESTARTING_';\n/**\n * Implementation of the Kernel object.\n *\n * #### Notes\n * Messages from the server are handled in the order they were received and\n * asynchronously. Any message handler can return a promise, and message\n * handling will pause until the promise is fulfilled.\n */\nclass KernelConnection {\n    /**\n     * Construct a kernel object.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        /**\n         * Create the kernel websocket connection and add socket status handlers.\n         */\n        this._createSocket = () => {\n            this._errorIfDisposed();\n            // Make sure the socket is clear\n            this._clearSocket();\n            // Update the connection status to reflect opening a new connection.\n            this._updateConnectionStatus('connecting');\n            const settings = this.serverSettings;\n            const partialUrl = coreutils_1.URLExt.join(settings.wsUrl, restapi.KERNEL_SERVICE_URL, encodeURIComponent(this._id));\n            // Strip any authentication from the display string.\n            const display = partialUrl.replace(/^((?:\\w+:)?\\/\\/)(?:[^@\\/]+@)/, '$1');\n            console.debug(`Starting WebSocket: ${display}`);\n            let url = coreutils_1.URLExt.join(partialUrl, 'channels?session_id=' + encodeURIComponent(this._clientId));\n            this._ws = new settings.WebSocket(url);\n            // Ensure incoming binary messages are not Blobs\n            this._ws.binaryType = 'arraybuffer';\n            this._ws.onmessage = this._onWSMessage;\n            this._ws.onopen = this._onWSOpen;\n            this._ws.onclose = this._onWSClose;\n            this._ws.onerror = this._onWSClose;\n        };\n        // Make websocket callbacks arrow functions so they bind `this`.\n        /**\n         * Handle a websocket open event.\n         */\n        this._onWSOpen = (evt) => {\n            this._updateConnectionStatus('connected');\n        };\n        /**\n         * Handle a websocket message, validating and routing appropriately.\n         */\n        this._onWSMessage = (evt) => {\n            // Notify immediately if there is an error with the message.\n            let msg;\n            try {\n                msg = serialize.deserialize(evt.data);\n                validate.validateMessage(msg);\n            }\n            catch (error) {\n                error.message = `Kernel message validation error: ${error.message}`;\n                // We throw the error so that it bubbles up to the top, and displays the right stack.\n                throw error;\n            }\n            // Update the current kernel session id\n            this._kernelSession = msg.header.session;\n            // Handle the message asynchronously, in the order received.\n            this._msgChain = this._msgChain\n                .then(() => {\n                // Return so that any promises from handling a message are fulfilled\n                // before proceeding to the next message.\n                return this._handleMessage(msg);\n            })\n                .catch(error => {\n                // Log any errors in handling the message, thus resetting the _msgChain\n                // promise so we can process more messages.\n                // Ignore the \"Canceled\" errors that are thrown during kernel dispose.\n                if (error.message.startsWith('Canceled future for ')) {\n                    console.error(error);\n                }\n            });\n            // Emit the message receive signal\n            this._anyMessage.emit({ msg, direction: 'recv' });\n        };\n        /**\n         * Handle a websocket close event.\n         */\n        this._onWSClose = (evt) => {\n            if (!this.isDisposed) {\n                this._reconnect();\n            }\n        };\n        this._id = '';\n        this._name = '';\n        this._status = 'unknown';\n        this._connectionStatus = 'connecting';\n        this._kernelSession = '';\n        this._isDisposed = false;\n        /**\n         * Websocket to communicate with kernel.\n         */\n        this._ws = null;\n        this._username = '';\n        this._reconnectLimit = 7;\n        this._reconnectAttempt = 0;\n        this._reconnectTimeout = null;\n        this._futures = new Map();\n        this._comms = new Map();\n        this._targetRegistry = Object.create(null);\n        this._info = new coreutils_2.PromiseDelegate();\n        this._pendingMessages = [];\n        this._statusChanged = new signaling_1.Signal(this);\n        this._connectionStatusChanged = new signaling_1.Signal(this);\n        this._disposed = new signaling_1.Signal(this);\n        this._iopubMessage = new signaling_1.Signal(this);\n        this._anyMessage = new signaling_1.Signal(this);\n        this._unhandledMessage = new signaling_1.Signal(this);\n        this._displayIdToParentIds = new Map();\n        this._msgIdToDisplayIds = new Map();\n        this._msgChain = Promise.resolve();\n        this._noOp = () => {\n            /* no-op */\n        };\n        this._name = options.model.name;\n        this._id = options.model.id;\n        this.serverSettings = (_a = options.serverSettings, (_a !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings()));\n        this._clientId = (_b = options.clientId, (_b !== null && _b !== void 0 ? _b : coreutils_2.UUID.uuid4()));\n        this._username = (_c = options.username, (_c !== null && _c !== void 0 ? _c : ''));\n        this.handleComms = (_d = options.handleComms, (_d !== null && _d !== void 0 ? _d : true));\n        this._createSocket();\n        // Immediately queue up a request for initial kernel info.\n        void this.requestKernelInfo();\n    }\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * A signal emitted when the kernel status changes.\n     */\n    get statusChanged() {\n        return this._statusChanged;\n    }\n    /**\n     * A signal emitted when the kernel status changes.\n     */\n    get connectionStatusChanged() {\n        return this._connectionStatusChanged;\n    }\n    /**\n     * A signal emitted for iopub kernel messages.\n     *\n     * #### Notes\n     * This signal is emitted after the iopub message is handled asynchronously.\n     */\n    get iopubMessage() {\n        return this._iopubMessage;\n    }\n    /**\n     * A signal emitted for unhandled kernel message.\n     *\n     * #### Notes\n     * This signal is emitted for a message that was not handled. It is emitted\n     * during the asynchronous message handling code.\n     */\n    get unhandledMessage() {\n        return this._unhandledMessage;\n    }\n    /**\n     * The kernel model\n     */\n    get model() {\n        return {\n            id: this.id,\n            name: this.name\n        };\n    }\n    /**\n     * A signal emitted for any kernel message.\n     *\n     * #### Notes\n     * This signal is emitted when a message is received, before it is handled\n     * asynchronously.\n     *\n     * This message is emitted when a message is queued for sending (either in\n     * the websocket buffer, or our own pending message buffer). The message may\n     * actually be sent across the wire at a later time.\n     *\n     * The message emitted in this signal should not be modified in any way.\n     */\n    get anyMessage() {\n        return this._anyMessage;\n    }\n    /**\n     * The id of the server-side kernel.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * The name of the server-side kernel.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The client username.\n     */\n    get username() {\n        return this._username;\n    }\n    /**\n     * The client unique id.\n     */\n    get clientId() {\n        return this._clientId;\n    }\n    /**\n     * The current status of the kernel.\n     */\n    get status() {\n        return this._status;\n    }\n    /**\n     * The current connection status of the kernel connection.\n     */\n    get connectionStatus() {\n        return this._connectionStatus;\n    }\n    /**\n     * Test whether the kernel has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The cached kernel info.\n     *\n     * @returns A promise that resolves to the kernel info.\n     */\n    get info() {\n        return this._info.promise;\n    }\n    /**\n     * The kernel spec.\n     *\n     * @returns A promise that resolves to the kernel spec.\n     */\n    get spec() {\n        if (this._specPromise) {\n            return this._specPromise;\n        }\n        this._specPromise = kernelspec_1.KernelSpecAPI.getSpecs(this.serverSettings).then(specs => {\n            return specs.kernelspecs[this._name];\n        });\n        return this._specPromise;\n    }\n    /**\n     * Clone the current kernel with a new clientId.\n     */\n    clone(options = {}) {\n        return new KernelConnection(Object.assign({ model: this.model, username: this.username, serverSettings: this.serverSettings, \n            // handleComms defaults to false since that is safer\n            handleComms: false }, options));\n    }\n    /**\n     * Dispose of the resources held by the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit();\n        this._updateConnectionStatus('disconnected');\n        this._clearKernelState();\n        this._pendingMessages = [];\n        this._clearSocket();\n        // Clear Lumino signals\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Send a shell message to the kernel.\n     *\n     * #### Notes\n     * Send a message to the kernel's shell channel, yielding a future object\n     * for accepting replies.\n     *\n     * If `expectReply` is given and `true`, the future is disposed when both a\n     * shell reply and an idle status message are received. If `expectReply`\n     * is not given or is `false`, the future is resolved when an idle status\n     * message is received.\n     * If `disposeOnDone` is not given or is `true`, the Future is disposed at this point.\n     * If `disposeOnDone` is given and `false`, it is up to the caller to dispose of the Future.\n     *\n     * All replies are validated as valid kernel messages.\n     *\n     * If the kernel status is `dead`, this will throw an error.\n     */\n    sendShellMessage(msg, expectReply = false, disposeOnDone = true) {\n        return this._sendKernelShellControl(future_1.KernelShellFutureHandler, msg, expectReply, disposeOnDone);\n    }\n    /**\n     * Send a control message to the kernel.\n     *\n     * #### Notes\n     * Send a message to the kernel's control channel, yielding a future object\n     * for accepting replies.\n     *\n     * If `expectReply` is given and `true`, the future is disposed when both a\n     * control reply and an idle status message are received. If `expectReply`\n     * is not given or is `false`, the future is resolved when an idle status\n     * message is received.\n     * If `disposeOnDone` is not given or is `true`, the Future is disposed at this point.\n     * If `disposeOnDone` is given and `false`, it is up to the caller to dispose of the Future.\n     *\n     * All replies are validated as valid kernel messages.\n     *\n     * If the kernel status is `dead`, this will throw an error.\n     */\n    sendControlMessage(msg, expectReply = false, disposeOnDone = true) {\n        return this._sendKernelShellControl(future_1.KernelControlFutureHandler, msg, expectReply, disposeOnDone);\n    }\n    _sendKernelShellControl(ctor, msg, expectReply = false, disposeOnDone = true) {\n        this._sendMessage(msg);\n        this._anyMessage.emit({ msg, direction: 'send' });\n        const future = new ctor(() => {\n            const msgId = msg.header.msg_id;\n            this._futures.delete(msgId);\n            // Remove stored display id information.\n            const displayIds = this._msgIdToDisplayIds.get(msgId);\n            if (!displayIds) {\n                return;\n            }\n            displayIds.forEach(displayId => {\n                const msgIds = this._displayIdToParentIds.get(displayId);\n                if (msgIds) {\n                    const idx = msgIds.indexOf(msgId);\n                    if (idx === -1) {\n                        return;\n                    }\n                    if (msgIds.length === 1) {\n                        this._displayIdToParentIds.delete(displayId);\n                    }\n                    else {\n                        msgIds.splice(idx, 1);\n                        this._displayIdToParentIds.set(displayId, msgIds);\n                    }\n                }\n            });\n            this._msgIdToDisplayIds.delete(msgId);\n        }, msg, expectReply, disposeOnDone, this);\n        this._futures.set(msg.header.msg_id, future);\n        return future;\n    }\n    /**\n     * Send a message on the websocket.\n     *\n     * If queue is true, queue the message for later sending if we cannot send\n     * now. Otherwise throw an error.\n     */\n    _sendMessage(msg, queue = true) {\n        if (this.status === 'dead') {\n            throw new Error('Kernel is dead');\n        }\n        // Send if the ws allows it, otherwise buffer the message.\n        if (this.connectionStatus === 'connected' &&\n            this._kernelSession !== RESTARTING_KERNEL_SESSION) {\n            this._ws.send(serialize.serialize(msg));\n        }\n        else if (queue) {\n            this._pendingMessages.push(msg);\n        }\n        else {\n            throw new Error('Could not send message');\n        }\n    }\n    /**\n     * Interrupt a kernel.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * It is assumed that the API call does not mutate the kernel id or name.\n     *\n     * The promise will be rejected if the kernel status is `Dead` or if the\n     * request fails or the response is invalid.\n     */\n    async interrupt() {\n        if (this.status === 'dead') {\n            throw new Error('Kernel is dead');\n        }\n        return restapi.interruptKernel(this.id, this.serverSettings);\n    }\n    /**\n     * Request a kernel restart.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels)\n     * and validates the response model.\n     *\n     * Any existing Future or Comm objects are cleared once the kernel has\n     * actually be restarted.\n     *\n     * The promise is fulfilled on a valid server response (after the kernel restarts)\n     * and rejected otherwise.\n     *\n     * It is assumed that the API call does not mutate the kernel id or name.\n     *\n     * The promise will be rejected if the request fails or the response is\n     * invalid.\n     */\n    async restart() {\n        if (this.status === 'dead') {\n            throw new Error('Kernel is dead');\n        }\n        this._clearKernelState();\n        this._updateStatus('restarting');\n        this._kernelSession = RESTARTING_KERNEL_SESSION;\n        await restapi.restartKernel(this.id, this.serverSettings);\n    }\n    /**\n     * Reconnect to a kernel.\n     *\n     * #### Notes\n     * This may try multiple times to reconnect to a kernel, and will sever any\n     * existing connection.\n     */\n    reconnect() {\n        this._errorIfDisposed();\n        const result = new coreutils_2.PromiseDelegate();\n        // Set up a listener for the connection status changing, which accepts or\n        // rejects after the retries are done.\n        const fulfill = (sender, status) => {\n            if (status === 'connected') {\n                result.resolve();\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n            else if (status === 'disconnected') {\n                result.reject(new Error('Kernel connection disconnected'));\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n        };\n        this.connectionStatusChanged.connect(fulfill, this);\n        // Reset the reconnect limit so we start the connection attempts fresh\n        this._reconnectAttempt = 0;\n        // Start the reconnection process, which will also clear any existing\n        // connection.\n        this._reconnect();\n        // Return the promise that should resolve on connection or reject if the\n        // retries don't work.\n        return result.promise;\n    }\n    /**\n     * Shutdown a kernel.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * On a valid response, disposes this kernel connection.\n     *\n     * If the kernel is already `dead`, disposes this kernel connection without\n     * a server request.\n     */\n    async shutdown() {\n        if (this.status !== 'dead') {\n            await restapi.shutdownKernel(this.id, this.serverSettings);\n        }\n        this.handleShutdown();\n    }\n    /**\n     * Handles a kernel shutdown.\n     *\n     * #### Notes\n     * This method should be called if we know from outside information that a\n     * kernel is dead (for example, we cannot find the kernel model on the\n     * server).\n     */\n    handleShutdown() {\n        this._updateStatus('dead');\n        this.dispose();\n    }\n    /**\n     * Send a `kernel_info_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#kernel-info).\n     *\n     * Fulfills with the `kernel_info_response` content when the shell reply is\n     * received and validated.\n     */\n    async requestKernelInfo() {\n        const msg = KernelMessage.createMessage({\n            msgType: 'kernel_info_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content: {}\n        });\n        let reply;\n        try {\n            reply = (await Private.handleShellMessage(this, msg));\n        }\n        catch (e) {\n            // If we rejected because the future was disposed, ignore and return.\n            if (this.isDisposed) {\n                return;\n            }\n            else {\n                throw e;\n            }\n        }\n        this._errorIfDisposed();\n        if (!reply) {\n            return;\n        }\n        // Kernels sometimes do not include a status field on kernel_info_reply\n        // messages, so set a default for now.\n        // See https://github.com/jupyterlab/jupyterlab/issues/6760\n        if (reply.content.status === undefined) {\n            reply.content.status = 'ok';\n        }\n        if (reply.content.status !== 'ok') {\n            this._info.reject('Kernel info reply errored');\n            return reply;\n        }\n        this._info.resolve(reply.content);\n        this._kernelSession = reply.header.session;\n        return reply;\n    }\n    /**\n     * Send a `complete_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#completion).\n     *\n     * Fulfills with the `complete_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestComplete(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'complete_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send an `inspect_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#introspection).\n     *\n     * Fulfills with the `inspect_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestInspect(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'inspect_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content: content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send a `history_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#history).\n     *\n     * Fulfills with the `history_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestHistory(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'history_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send an `execute_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execute).\n     *\n     * Future `onReply` is called with the `execute_reply` content when the\n     * shell reply is received and validated. The future will resolve when\n     * this message is received and the `idle` iopub status is received.\n     * The future will also be disposed at this point unless `disposeOnDone`\n     * is specified and `false`, in which case it is up to the caller to dispose\n     * of the future.\n     *\n     * **See also:** [[IExecuteReply]]\n     */\n    requestExecute(content, disposeOnDone = true, metadata) {\n        const defaults = {\n            silent: false,\n            store_history: true,\n            user_expressions: {},\n            allow_stdin: true,\n            stop_on_error: false\n        };\n        const msg = KernelMessage.createMessage({\n            msgType: 'execute_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content: Object.assign(Object.assign({}, defaults), content),\n            metadata\n        });\n        return this.sendShellMessage(msg, true, disposeOnDone);\n    }\n    /**\n     * Send an experimental `debug_request` message.\n     *\n     * @hidden\n     *\n     * #### Notes\n     * Debug messages are experimental messages that are not in the official\n     * kernel message specification. As such, this function is *NOT* considered\n     * part of the public API, and may change without notice.\n     */\n    requestDebug(content, disposeOnDone = true) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'debug_request',\n            channel: 'control',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return this.sendControlMessage(msg, true, disposeOnDone);\n    }\n    /**\n     * Send an `is_complete_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#code-completeness).\n     *\n     * Fulfills with the `is_complete_response` content when the shell reply is\n     * received and validated.\n     */\n    requestIsComplete(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'is_complete_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send a `comm_info_request` message.\n     *\n     * #### Notes\n     * Fulfills with the `comm_info_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestCommInfo(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_info_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#messages-on-the-stdin-router-dealer-sockets).\n     */\n    sendInputReply(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'input_reply',\n            channel: 'stdin',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        this._sendMessage(msg);\n        this._anyMessage.emit({ msg, direction: 'send' });\n    }\n    /**\n     * Create a new comm.\n     *\n     * #### Notes\n     * If a client-side comm already exists with the given commId, an error is thrown.\n     * If the kernel does not handle comms, an error is thrown.\n     */\n    createComm(targetName, commId = coreutils_2.UUID.uuid4()) {\n        if (!this.handleComms) {\n            throw new Error('Comms are disabled on this kernel connection');\n        }\n        if (this._comms.has(commId)) {\n            throw new Error('Comm is already created');\n        }\n        const comm = new comm_1.CommHandler(targetName, commId, this, () => {\n            this._unregisterComm(commId);\n        });\n        this._comms.set(commId, comm);\n        return comm;\n    }\n    /**\n     * Check if a comm exists.\n     */\n    hasComm(commId) {\n        return this._comms.has(commId);\n    }\n    /**\n     * Register a comm target handler.\n     *\n     * @param targetName - The name of the comm target.\n     *\n     * @param callback - The callback invoked for a comm open message.\n     *\n     * @returns A disposable used to unregister the comm target.\n     *\n     * #### Notes\n     * Only one comm target can be registered to a target name at a time, an\n     * existing callback for the same target name will be overridden.  A registered\n     * comm target handler will take precedence over a comm which specifies a\n     * `target_module`.\n     *\n     * If the callback returns a promise, kernel message processing will pause\n     * until the returned promise is fulfilled.\n     */\n    registerCommTarget(targetName, callback) {\n        if (!this.handleComms) {\n            return;\n        }\n        this._targetRegistry[targetName] = callback;\n    }\n    /**\n     * Remove a comm target handler.\n     *\n     * @param targetName - The name of the comm target to remove.\n     *\n     * @param callback - The callback to remove.\n     *\n     * #### Notes\n     * The comm target is only removed if the callback argument matches.\n     */\n    removeCommTarget(targetName, callback) {\n        if (!this.handleComms) {\n            return;\n        }\n        if (!this.isDisposed && this._targetRegistry[targetName] === callback) {\n            delete this._targetRegistry[targetName];\n        }\n    }\n    /**\n     * Register an IOPub message hook.\n     *\n     * @param msg_id - The parent_header message id the hook will intercept.\n     *\n     * @param hook - The callback invoked for the message.\n     *\n     * #### Notes\n     * The IOPub hook system allows you to preempt the handlers for IOPub\n     * messages that are responses to a given message id.\n     *\n     * The most recently registered hook is run first. A hook can return a\n     * boolean or a promise to a boolean, in which case all kernel message\n     * processing pauses until the promise is fulfilled. If a hook return value\n     * resolves to false, any later hooks will not run and the function will\n     * return a promise resolving to false. If a hook throws an error, the error\n     * is logged to the console and the next hook is run. If a hook is\n     * registered during the hook processing, it will not run until the next\n     * message. If a hook is removed during the hook processing, it will be\n     * deactivated immediately.\n     *\n     * See also [[IFuture.registerMessageHook]].\n     */\n    registerMessageHook(msgId, hook) {\n        var _a;\n        const future = (_a = this._futures) === null || _a === void 0 ? void 0 : _a.get(msgId);\n        if (future) {\n            future.registerMessageHook(hook);\n        }\n    }\n    /**\n     * Remove an IOPub message hook.\n     *\n     * @param msg_id - The parent_header message id the hook intercepted.\n     *\n     * @param hook - The callback invoked for the message.\n     *\n     */\n    removeMessageHook(msgId, hook) {\n        var _a;\n        const future = (_a = this._futures) === null || _a === void 0 ? void 0 : _a.get(msgId);\n        if (future) {\n            future.removeMessageHook(hook);\n        }\n    }\n    /**\n     * Handle a message with a display id.\n     *\n     * @returns Whether the message was handled.\n     */\n    async _handleDisplayId(displayId, msg) {\n        var _a, _b;\n        const msgId = msg.parent_header.msg_id;\n        let parentIds = this._displayIdToParentIds.get(displayId);\n        if (parentIds) {\n            // We've seen it before, update existing outputs with same display_id\n            // by handling display_data as update_display_data.\n            const updateMsg = {\n                header: coreutils_2.JSONExt.deepCopy(msg.header),\n                parent_header: coreutils_2.JSONExt.deepCopy(msg.parent_header),\n                metadata: coreutils_2.JSONExt.deepCopy(msg.metadata),\n                content: coreutils_2.JSONExt.deepCopy(msg.content),\n                channel: msg.channel,\n                buffers: msg.buffers ? msg.buffers.slice() : []\n            };\n            updateMsg.header.msg_type = 'update_display_data';\n            await Promise.all(parentIds.map(async (parentId) => {\n                const future = this._futures && this._futures.get(parentId);\n                if (future) {\n                    await future.handleMsg(updateMsg);\n                }\n            }));\n        }\n        // We're done here if it's update_display.\n        if (msg.header.msg_type === 'update_display_data') {\n            // It's an update, don't proceed to the normal display.\n            return true;\n        }\n        // Regular display_data with id, record it for future updating\n        // in _displayIdToParentIds for future lookup.\n        parentIds = (_a = this._displayIdToParentIds.get(displayId), (_a !== null && _a !== void 0 ? _a : []));\n        if (parentIds.indexOf(msgId) === -1) {\n            parentIds.push(msgId);\n        }\n        this._displayIdToParentIds.set(displayId, parentIds);\n        // Add to our map of display ids for this message.\n        const displayIds = (_b = this._msgIdToDisplayIds.get(msgId), (_b !== null && _b !== void 0 ? _b : []));\n        if (displayIds.indexOf(msgId) === -1) {\n            displayIds.push(msgId);\n        }\n        this._msgIdToDisplayIds.set(msgId, displayIds);\n        // Let the message propagate to the intended recipient.\n        return false;\n    }\n    /**\n     * Handle a restart on the kernel.  This is not part of the `IKernel`\n     * interface.\n     */\n    async _handleRestart() {\n        this._clearKernelState();\n        this._updateStatus('restarting');\n        // Reconnect to a new websocket and kick off an async kernel request to\n        // eventually reset the kernel status. We do this with a setTimeout so\n        // that it comes after the microtask logic in _handleMessage for\n        // restarting/autostarting status updates.\n        setTimeout(() => {\n            // We must reconnect since the kernel connection information may have\n            // changed, and the server only refreshes its zmq connection when a new\n            // websocket is opened.\n            void this.reconnect();\n            void this.requestKernelInfo();\n        }, 0);\n    }\n    /**\n     * Forcefully clear the socket state.\n     *\n     * #### Notes\n     * This will clear all socket state without calling any handlers and will\n     * not update the connection status. If you call this method, you are\n     * responsible for updating the connection status as needed and recreating\n     * the socket if you plan to reconnect.\n     */\n    _clearSocket() {\n        if (this._ws !== null) {\n            // Clear the websocket event handlers and the socket itself.\n            this._ws.onopen = this._noOp;\n            this._ws.onclose = this._noOp;\n            this._ws.onerror = this._noOp;\n            this._ws.onmessage = this._noOp;\n            this._ws.close();\n            this._ws = null;\n        }\n    }\n    /**\n     * Handle status iopub messages from the kernel.\n     */\n    _updateStatus(status) {\n        if (this._status === status || this._status === 'dead') {\n            return;\n        }\n        this._status = status;\n        Private.logKernelStatus(this);\n        this._statusChanged.emit(status);\n        if (status === 'dead') {\n            this.dispose();\n        }\n    }\n    /**\n     * Send pending messages to the kernel.\n     */\n    _sendPending() {\n        // We check to make sure we are still connected each time. For\n        // example, if a websocket buffer overflows, it may close, so we should\n        // stop sending messages.\n        while (this.connectionStatus === 'connected' &&\n            this._kernelSession !== RESTARTING_KERNEL_SESSION &&\n            this._pendingMessages.length > 0) {\n            this._sendMessage(this._pendingMessages[0], false);\n            // We shift the message off the queue after the message is sent so that\n            // if there is an exception, the message is still pending.\n            this._pendingMessages.shift();\n        }\n    }\n    /**\n     * Clear the internal state.\n     */\n    _clearKernelState() {\n        this._kernelSession = '';\n        this._futures.forEach(future => {\n            future.dispose();\n        });\n        this._comms.forEach(comm => {\n            comm.dispose();\n        });\n        this._msgChain = Promise.resolve();\n        this._futures = new Map();\n        this._comms = new Map();\n        this._displayIdToParentIds.clear();\n        this._msgIdToDisplayIds.clear();\n    }\n    /**\n     * Check to make sure it is okay to proceed to handle a message.\n     *\n     * #### Notes\n     * Because we handle messages asynchronously, before a message is handled the\n     * kernel might be disposed or restarted (and have a different session id).\n     * This function throws an error in each of these cases. This is meant to be\n     * called at the start of an asynchronous message handler to cancel message\n     * processing if the message no longer is valid.\n     */\n    _assertCurrentMessage(msg) {\n        this._errorIfDisposed();\n        if (msg.header.session !== this._kernelSession) {\n            throw new Error(`Canceling handling of old message: ${msg.header.msg_type}`);\n        }\n    }\n    /**\n     * Handle a `comm_open` kernel message.\n     */\n    async _handleCommOpen(msg) {\n        this._assertCurrentMessage(msg);\n        const content = msg.content;\n        const comm = new comm_1.CommHandler(content.target_name, content.comm_id, this, () => {\n            this._unregisterComm(content.comm_id);\n        });\n        this._comms.set(content.comm_id, comm);\n        try {\n            const target = await Private.loadObject(content.target_name, content.target_module, this._targetRegistry);\n            await target(comm, msg);\n        }\n        catch (e) {\n            // Close the comm asynchronously. We cannot block message processing on\n            // kernel messages to wait for another kernel message.\n            comm.close();\n            console.error('Exception opening new comm');\n            throw e;\n        }\n    }\n    /**\n     * Handle 'comm_close' kernel message.\n     */\n    async _handleCommClose(msg) {\n        this._assertCurrentMessage(msg);\n        const content = msg.content;\n        const comm = this._comms.get(content.comm_id);\n        if (!comm) {\n            console.error('Comm not found for comm id ' + content.comm_id);\n            return;\n        }\n        this._unregisterComm(comm.commId);\n        const onClose = comm.onClose;\n        if (onClose) {\n            // tslint:disable-next-line:await-promise\n            await onClose(msg);\n        }\n        comm.dispose();\n    }\n    /**\n     * Handle a 'comm_msg' kernel message.\n     */\n    async _handleCommMsg(msg) {\n        this._assertCurrentMessage(msg);\n        const content = msg.content;\n        const comm = this._comms.get(content.comm_id);\n        if (!comm) {\n            return;\n        }\n        const onMsg = comm.onMsg;\n        if (onMsg) {\n            // tslint:disable-next-line:await-promise\n            await onMsg(msg);\n        }\n    }\n    /**\n     * Unregister a comm instance.\n     */\n    _unregisterComm(commId) {\n        this._comms.delete(commId);\n    }\n    /**\n     * Handle connection status changes.\n     */\n    _updateConnectionStatus(connectionStatus) {\n        if (this._connectionStatus === connectionStatus) {\n            return;\n        }\n        this._connectionStatus = connectionStatus;\n        // If we are not 'connecting', reset any reconnection attempts.\n        if (connectionStatus !== 'connecting') {\n            this._reconnectAttempt = 0;\n            clearTimeout(this._reconnectTimeout);\n        }\n        if (this.status !== 'dead') {\n            if (connectionStatus === 'connected') {\n                // Send pending messages, and make sure we send at least one message\n                // to get kernel status back.\n                if (this._pendingMessages.length > 0) {\n                    this._sendPending();\n                }\n                else {\n                    void this.requestKernelInfo();\n                }\n            }\n            else {\n                // If the connection is down, then we do not know what is happening\n                // with the kernel, so set the status to unknown.\n                this._updateStatus('unknown');\n            }\n        }\n        // Notify others that the connection status changed.\n        this._connectionStatusChanged.emit(connectionStatus);\n    }\n    async _handleMessage(msg) {\n        var _a, _b;\n        let handled = false;\n        if (msg.header.msg_type === 'shutdown_reply') {\n            this._kernelSession = msg.header.session;\n            this._sendPending();\n        }\n        // Check to see if we have a display_id we need to reroute.\n        if (msg.parent_header &&\n            msg.channel === 'iopub' &&\n            (KernelMessage.isDisplayDataMsg(msg) ||\n                KernelMessage.isUpdateDisplayDataMsg(msg) ||\n                KernelMessage.isExecuteResultMsg(msg))) {\n            // display_data messages may re-route based on their display_id.\n            const transient = (_a = msg.content.transient, (_a !== null && _a !== void 0 ? _a : {}));\n            const displayId = transient['display_id'];\n            if (displayId) {\n                handled = await this._handleDisplayId(displayId, msg);\n                // The await above may make this message out of date, so check again.\n                this._assertCurrentMessage(msg);\n            }\n        }\n        if (!handled && msg.parent_header) {\n            const parentHeader = msg.parent_header;\n            const future = (_b = this._futures) === null || _b === void 0 ? void 0 : _b.get(parentHeader.msg_id);\n            if (future) {\n                await future.handleMsg(msg);\n                this._assertCurrentMessage(msg);\n            }\n            else {\n                // If the message was sent by us and was not iopub, it is orphaned.\n                const owned = parentHeader.session === this.clientId;\n                if (msg.channel !== 'iopub' && owned) {\n                    this._unhandledMessage.emit(msg);\n                }\n            }\n        }\n        if (msg.channel === 'iopub') {\n            switch (msg.header.msg_type) {\n                case 'status':\n                    // Updating the status is synchronous, and we call no async user code\n                    const executionState = msg.content\n                        .execution_state;\n                    if (executionState === 'autorestarting') {\n                        // The kernel has been auto-restarted by the server. After\n                        // processing for this message is completely done, we want to\n                        // handle this restart, so we don't await, but instead schedule\n                        // the work as a microtask (i.e., in a promise resolution). We\n                        // schedule this here so that it comes before any microtasks that\n                        // might be scheduled in the status signal emission below.\n                        void Promise.resolve().then(async () => {\n                            // handleRestart changes the status to 'restarting', so we call it\n                            // first so that the status won't flip back and forth between\n                            // 'restarting' and 'autorestarting'.\n                            await this._handleRestart();\n                            this._updateStatus('autorestarting');\n                        });\n                    }\n                    if (executionState === 'restarting') {\n                        void Promise.resolve().then(async () => {\n                            await this._handleRestart();\n                            this._kernelSession = msg.header.session;\n                            this._updateStatus('restarting');\n                        });\n                    }\n                    this._updateStatus(executionState);\n                    break;\n                case 'comm_open':\n                    if (this.handleComms) {\n                        await this._handleCommOpen(msg);\n                    }\n                    break;\n                case 'comm_msg':\n                    if (this.handleComms) {\n                        await this._handleCommMsg(msg);\n                    }\n                    break;\n                case 'comm_close':\n                    if (this.handleComms) {\n                        await this._handleCommClose(msg);\n                    }\n                    break;\n                default:\n                    break;\n            }\n            // If the message was a status dead message, we might have disposed ourselves.\n            if (!this.isDisposed) {\n                this._assertCurrentMessage(msg);\n                // the message wouldn't be emitted if we were disposed anyway.\n                this._iopubMessage.emit(msg);\n            }\n        }\n    }\n    /**\n     * Attempt a connection if we have not exhausted connection attempts.\n     */\n    _reconnect() {\n        this._errorIfDisposed();\n        // Clear any existing reconnection attempt\n        clearTimeout(this._reconnectTimeout);\n        // Update the connection status and schedule a possible reconnection.\n        if (this._reconnectAttempt < this._reconnectLimit) {\n            this._updateConnectionStatus('connecting');\n            // The first reconnect attempt should happen immediately, and subsequent\n            // attemps should pick a random number in a growing range so that we\n            // don't overload the server with synchronized reconnection attempts\n            // across multiple kernels.\n            const timeout = Private.getRandomIntInclusive(0, 1e3 * (Math.pow(2, this._reconnectAttempt) - 1));\n            console.error(`Connection lost, reconnecting in ${Math.floor(timeout / 1000)} seconds.`);\n            this._reconnectTimeout = setTimeout(this._createSocket, timeout);\n            this._reconnectAttempt += 1;\n        }\n        else {\n            this._updateConnectionStatus('disconnected');\n        }\n        // Clear the websocket event handlers and the socket itself.\n        this._clearSocket();\n    }\n    /**\n     * Utility function to throw an error if this instance is disposed.\n     */\n    _errorIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error('Kernel connection is disposed');\n        }\n    }\n}\nexports.KernelConnection = KernelConnection;\n/**\n * A private namespace for the Kernel.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Log the current kernel status.\n     */\n    function logKernelStatus(kernel) {\n        switch (kernel.status) {\n            case 'idle':\n            case 'busy':\n            case 'unknown':\n                return;\n            default:\n                console.debug(`Kernel: ${kernel.status} (${kernel.id})`);\n                break;\n        }\n    }\n    Private.logKernelStatus = logKernelStatus;\n    /**\n     * Send a kernel message to the kernel and resolve the reply message.\n     */\n    async function handleShellMessage(kernel, msg) {\n        const future = kernel.sendShellMessage(msg, true);\n        return future.done;\n    }\n    Private.handleShellMessage = handleShellMessage;\n    /**\n     * Try to load an object from a module or a registry.\n     *\n     * Try to load an object from a module asynchronously if a module\n     * is specified, otherwise tries to load an object from the global\n     * registry, if the global registry is provided.\n     *\n     * #### Notes\n     * Loading a module uses requirejs.\n     */\n    function loadObject(name, moduleName, registry) {\n        return new Promise((resolve, reject) => {\n            var _a;\n            // Try loading the module using require.js\n            if (moduleName) {\n                if (typeof requirejs === 'undefined') {\n                    throw new Error('requirejs not found');\n                }\n                requirejs([moduleName], (mod) => {\n                    if (mod[name] === void 0) {\n                        const msg = `Object '${name}' not found in module '${moduleName}'`;\n                        reject(new Error(msg));\n                    }\n                    else {\n                        resolve(mod[name]);\n                    }\n                }, reject);\n            }\n            else {\n                if ((_a = registry) === null || _a === void 0 ? void 0 : _a[name]) {\n                    resolve(registry[name]);\n                }\n                else {\n                    reject(new Error(`Object '${name}' not found in registry`));\n                }\n            }\n        });\n    }\n    Private.loadObject = loadObject;\n    /**\n     * Get a random integer between min and max, inclusive of both.\n     *\n     * #### Notes\n     * From\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive\n     *\n     * From the MDN page: It might be tempting to use Math.round() to accomplish\n     * that, but doing so would cause your random numbers to follow a non-uniform\n     * distribution, which may not be acceptable for your needs.\n     */\n    function getRandomIntInclusive(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    Private.getRandomIntInclusive = getRandomIntInclusive;\n})(Private || (Private = {}));\n//# sourceMappingURL=default.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@lumino/coreutils\");\nconst disposable_1 = require(\"@lumino/disposable\");\nconst KernelMessage = __importStar(require(\"./messages\"));\n/**\n * Implementation of a kernel future.\n *\n * If a reply is expected, the Future is considered done when both a `reply`\n * message and an `idle` iopub status message have been received.  Otherwise, it\n * is considered done when the `idle` status is received.\n *\n */\nclass KernelFutureHandler extends disposable_1.DisposableDelegate {\n    /**\n     * Construct a new KernelFutureHandler.\n     */\n    constructor(cb, msg, expectReply, disposeOnDone, kernel) {\n        super(cb);\n        this._status = 0;\n        this._stdin = Private.noOp;\n        this._iopub = Private.noOp;\n        this._reply = Private.noOp;\n        this._done = new coreutils_1.PromiseDelegate();\n        this._hooks = new Private.HookList();\n        this._disposeOnDone = true;\n        this._msg = msg;\n        if (!expectReply) {\n            this._setFlag(Private.KernelFutureFlag.GotReply);\n        }\n        this._disposeOnDone = disposeOnDone;\n        this._kernel = kernel;\n    }\n    /**\n     * Get the original outgoing message.\n     */\n    get msg() {\n        return this._msg;\n    }\n    /**\n     * A promise that resolves when the future is done.\n     */\n    get done() {\n        return this._done.promise;\n    }\n    /**\n     * Get the reply handler.\n     */\n    get onReply() {\n        return this._reply;\n    }\n    /**\n     * Set the reply handler.\n     */\n    set onReply(cb) {\n        this._reply = cb;\n    }\n    /**\n     * Get the iopub handler.\n     */\n    get onIOPub() {\n        return this._iopub;\n    }\n    /**\n     * Set the iopub handler.\n     */\n    set onIOPub(cb) {\n        this._iopub = cb;\n    }\n    /**\n     * Get the stdin handler.\n     */\n    get onStdin() {\n        return this._stdin;\n    }\n    /**\n     * Set the stdin handler.\n     */\n    set onStdin(cb) {\n        this._stdin = cb;\n    }\n    /**\n     * Register hook for IOPub messages.\n     *\n     * @param hook - The callback invoked for an IOPub message.\n     *\n     * #### Notes\n     * The IOPub hook system allows you to preempt the handlers for IOPub\n     * messages handled by the future.\n     *\n     * The most recently registered hook is run first. A hook can return a\n     * boolean or a promise to a boolean, in which case all kernel message\n     * processing pauses until the promise is fulfilled. If a hook return value\n     * resolves to false, any later hooks will not run and the function will\n     * return a promise resolving to false. If a hook throws an error, the error\n     * is logged to the console and the next hook is run. If a hook is\n     * registered during the hook processing, it will not run until the next\n     * message. If a hook is removed during the hook processing, it will be\n     * deactivated immediately.\n     */\n    registerMessageHook(hook) {\n        if (this.isDisposed) {\n            throw new Error('Kernel future is disposed');\n        }\n        this._hooks.add(hook);\n    }\n    /**\n     * Remove a hook for IOPub messages.\n     *\n     * @param hook - The hook to remove.\n     *\n     * #### Notes\n     * If a hook is removed during the hook processing, it will be deactivated immediately.\n     */\n    removeMessageHook(hook) {\n        if (this.isDisposed) {\n            return;\n        }\n        this._hooks.remove(hook);\n    }\n    /**\n     * Send an `input_reply` message.\n     */\n    sendInputReply(content) {\n        this._kernel.sendInputReply(content);\n    }\n    /**\n     * Dispose and unregister the future.\n     */\n    dispose() {\n        this._stdin = Private.noOp;\n        this._iopub = Private.noOp;\n        this._reply = Private.noOp;\n        this._hooks = null;\n        if (!this._testFlag(Private.KernelFutureFlag.IsDone)) {\n            // TODO: Uncomment the following logging code, and check for any tests that trigger it.\n            // let status = [];\n            // if (!this._testFlag(Private.KernelFutureFlag.GotIdle)) {\n            //   status.push('idle');\n            // }\n            // if (!this._testFlag(Private.KernelFutureFlag.GotReply)) {\n            //   status.push('reply');\n            // }\n            // console.warn(\n            //   `*************** DISPOSED BEFORE DONE: K${this._kernel.id.slice(\n            //     0,\n            //     6\n            //   )} M${this._msg.header.msg_id.slice(0, 6)} missing ${status.join(' ')}`\n            // );\n            // Reject the `done` promise, but catch its error here in case no one else\n            // is waiting for the promise to resolve. This prevents the error from\n            // being displayed in the console, but does not prevent it from being\n            // caught by a client who is waiting for it.\n            this._done.promise.catch(() => {\n                /* no-op */\n            });\n            this._done.reject(new Error(`Canceled future for ${this.msg.header.msg_type} message before replies were done`));\n        }\n        super.dispose();\n    }\n    /**\n     * Handle an incoming kernel message.\n     */\n    async handleMsg(msg) {\n        switch (msg.channel) {\n            case 'control':\n            case 'shell':\n                if (msg.channel === this.msg.channel &&\n                    msg.parent_header.msg_id === this.msg.header.msg_id) {\n                    await this._handleReply(msg);\n                }\n                break;\n            case 'stdin':\n                await this._handleStdin(msg);\n                break;\n            case 'iopub':\n                await this._handleIOPub(msg);\n                break;\n            default:\n                break;\n        }\n    }\n    async _handleReply(msg) {\n        const reply = this._reply;\n        if (reply) {\n            // tslint:disable-next-line:await-promise\n            await reply(msg);\n        }\n        this._replyMsg = msg;\n        this._setFlag(Private.KernelFutureFlag.GotReply);\n        if (this._testFlag(Private.KernelFutureFlag.GotIdle)) {\n            this._handleDone();\n        }\n    }\n    async _handleStdin(msg) {\n        const stdin = this._stdin;\n        if (stdin) {\n            // tslint:disable-next-line:await-promise\n            await stdin(msg);\n        }\n    }\n    async _handleIOPub(msg) {\n        const process = await this._hooks.process(msg);\n        const iopub = this._iopub;\n        if (process && iopub) {\n            // tslint:disable-next-line:await-promise\n            await iopub(msg);\n        }\n        if (KernelMessage.isStatusMsg(msg) &&\n            msg.content.execution_state === 'idle') {\n            this._setFlag(Private.KernelFutureFlag.GotIdle);\n            if (this._testFlag(Private.KernelFutureFlag.GotReply)) {\n                this._handleDone();\n            }\n        }\n    }\n    _handleDone() {\n        if (this._testFlag(Private.KernelFutureFlag.IsDone)) {\n            return;\n        }\n        this._setFlag(Private.KernelFutureFlag.IsDone);\n        this._done.resolve(this._replyMsg);\n        if (this._disposeOnDone) {\n            this.dispose();\n        }\n    }\n    /**\n     * Test whether the given future flag is set.\n     */\n    _testFlag(flag) {\n        // tslint:disable-next-line\n        return (this._status & flag) !== 0;\n    }\n    /**\n     * Set the given future flag.\n     */\n    _setFlag(flag) {\n        // tslint:disable-next-line\n        this._status |= flag;\n    }\n}\nexports.KernelFutureHandler = KernelFutureHandler;\nclass KernelControlFutureHandler extends KernelFutureHandler {\n}\nexports.KernelControlFutureHandler = KernelControlFutureHandler;\nclass KernelShellFutureHandler extends KernelFutureHandler {\n}\nexports.KernelShellFutureHandler = KernelShellFutureHandler;\nvar Private;\n(function (Private) {\n    /**\n     * A no-op function.\n     */\n    Private.noOp = () => {\n        /* no-op */\n    };\n    /**\n     * Defer a computation.\n     *\n     * #### NOTES\n     * We can't just use requestAnimationFrame since it is not available in node.\n     * This implementation is from Phosphor:\n     * https://github.com/phosphorjs/phosphor/blob/e88e4321289bb1198f3098e7bda40736501f2ed8/tests/test-messaging/src/index.spec.ts#L63\n     */\n    const defer = (() => {\n        const ok = typeof requestAnimationFrame === 'function';\n        return ok ? requestAnimationFrame : setImmediate;\n    })();\n    class HookList {\n        constructor() {\n            this._hooks = [];\n        }\n        /**\n         * Register a hook.\n         *\n         * @param hook - The callback to register.\n         */\n        add(hook) {\n            this.remove(hook);\n            this._hooks.push(hook);\n        }\n        /**\n         * Remove a hook, if it exists in the hook list.\n         *\n         * @param hook - The callback to remove.\n         */\n        remove(hook) {\n            const index = this._hooks.indexOf(hook);\n            if (index >= 0) {\n                this._hooks[index] = null;\n                this._scheduleCompact();\n            }\n        }\n        /**\n         * Process a message through the hooks.\n         *\n         * @returns a promise resolving to false if any hook resolved as false,\n         * otherwise true\n         *\n         * #### Notes\n         * The most recently registered hook is run first. A hook can return a\n         * boolean or a promise to a boolean, in which case processing pauses until\n         * the promise is fulfilled. If a hook return value resolves to false, any\n         * later hooks will not run and the function will return a promise resolving\n         * to false. If a hook throws an error, the error is logged to the console\n         * and the next hook is run. If a hook is registered during the hook\n         * processing, it will not run until the next message. If a hook is removed\n         * during the hook processing, it will be deactivated immediately.\n         */\n        async process(msg) {\n            // Wait until we can start a new process run.\n            await this._processing;\n            // Start the next process run.\n            const processing = new coreutils_1.PromiseDelegate();\n            this._processing = processing.promise;\n            let continueHandling;\n            // Call the end hook (most recently-added) first. Starting at the end also\n            // guarantees that hooks added during the processing will not be run in\n            // this process run.\n            for (let i = this._hooks.length - 1; i >= 0; i--) {\n                const hook = this._hooks[i];\n                // If the hook has been removed, continue to the next one.\n                if (hook === null) {\n                    continue;\n                }\n                // Execute the hook and log any errors.\n                try {\n                    // tslint:disable-next-line:await-promise\n                    continueHandling = await hook(msg);\n                }\n                catch (err) {\n                    continueHandling = true;\n                    console.error(err);\n                }\n                // If the hook resolved to false, stop processing and return.\n                if (continueHandling === false) {\n                    processing.resolve(undefined);\n                    return false;\n                }\n            }\n            // All hooks returned true (or errored out), so return true.\n            processing.resolve(undefined);\n            return true;\n        }\n        /**\n         * Schedule a cleanup of the list, removing any hooks that have been nulled out.\n         */\n        _scheduleCompact() {\n            if (!this._compactScheduled) {\n                this._compactScheduled = true;\n                // Schedule a compaction in between processing runs. We do the\n                // scheduling in an animation frame to rate-limit our compactions. If we\n                // need to compact more frequently, we can change this to directly\n                // schedule the compaction.\n                defer(() => {\n                    this._processing = this._processing.then(() => {\n                        this._compactScheduled = false;\n                        this._compact();\n                    });\n                });\n            }\n        }\n        /**\n         * Compact the list, removing any nulls.\n         */\n        _compact() {\n            let numNulls = 0;\n            for (let i = 0, len = this._hooks.length; i < len; i++) {\n                const hook = this._hooks[i];\n                if (this._hooks[i] === null) {\n                    numNulls++;\n                }\n                else {\n                    this._hooks[i - numNulls] = hook;\n                }\n            }\n            this._hooks.length -= numNulls;\n        }\n    }\n    Private.HookList = HookList;\n    /**\n     * Bit flags for the kernel future state.\n     */\n    let KernelFutureFlag;\n    (function (KernelFutureFlag) {\n        KernelFutureFlag[KernelFutureFlag[\"GotReply\"] = 1] = \"GotReply\";\n        KernelFutureFlag[KernelFutureFlag[\"GotIdle\"] = 2] = \"GotIdle\";\n        KernelFutureFlag[KernelFutureFlag[\"IsDone\"] = 4] = \"IsDone\";\n        KernelFutureFlag[KernelFutureFlag[\"DisposeOnDone\"] = 8] = \"DisposeOnDone\";\n    })(KernelFutureFlag = Private.KernelFutureFlag || (Private.KernelFutureFlag = {}));\n})(Private || (Private = {}));\n//# sourceMappingURL=future.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Namespace some of our modules for convenience and backwards compatibility.\nconst Kernel = __importStar(require(\"./kernel\"));\nexports.Kernel = Kernel;\nconst KernelMessage = __importStar(require(\"./messages\"));\nexports.KernelMessage = KernelMessage;\nconst KernelAPI = __importStar(require(\"./restapi\"));\nexports.KernelAPI = KernelAPI;\n__export(require(\"./manager\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=kernel.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst basemanager_1 = require(\"../basemanager\");\nconst restapi_1 = require(\"./restapi\");\nconst default_1 = require(\"./default\");\n/**\n * An implementation of a kernel manager.\n */\nclass KernelManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new kernel manager.\n     *\n     * @param options - The default options for kernel.\n     */\n    constructor(options = {}) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        this._kernelConnections = new Set();\n        this._models = new Map();\n        this._runningChanged = new signaling_1.Signal(this);\n        this._connectionFailure = new signaling_1.Signal(this);\n        // Start model and specs polling with exponential backoff.\n        this._pollModels = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestRunning(),\n            frequency: {\n                interval: 10 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:KernelManager#models`,\n            standby: (_a = options.standby, (_a !== null && _a !== void 0 ? _a : 'when-hidden'))\n        });\n        // Initialize internal data.\n        this._ready = (async () => {\n            await this._pollModels.start();\n            await this._pollModels.tick;\n            this._isReady = true;\n        })();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * A signal emitted when the running kernels change.\n     */\n    get runningChanged() {\n        return this._runningChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._models.clear();\n        this._kernelConnections.forEach(x => x.dispose());\n        this._pollModels.dispose();\n        super.dispose();\n    }\n    /**\n     * Connect to an existing kernel.\n     *\n     * @returns The new kernel connection.\n     *\n     * #### Notes\n     * This will use the manager's server settings and ignore any server\n     * settings passed in the options.\n     */\n    connectTo(options) {\n        var _a;\n        const { id } = options.model;\n        let handleComms = (_a = options.handleComms, (_a !== null && _a !== void 0 ? _a : true));\n        // By default, handle comms only if no other kernel connection is.\n        if (options.handleComms === undefined) {\n            for (const kc of this._kernelConnections) {\n                if (kc.id === id && kc.handleComms) {\n                    handleComms = false;\n                    break;\n                }\n            }\n        }\n        const kernelConnection = new default_1.KernelConnection(Object.assign(Object.assign({ handleComms }, options), { serverSettings: this.serverSettings }));\n        this._onStarted(kernelConnection);\n        if (!this._models.has(id)) {\n            // We trust the user to connect to an existing kernel, but we verify\n            // asynchronously.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n        return kernelConnection;\n    }\n    /**\n     * Create an iterator over the most recent running kernels.\n     *\n     * @returns A new iterator over the running kernels.\n     */\n    running() {\n        return algorithm_1.iter([...this._models.values()]);\n    }\n    /**\n     * Force a refresh of the running kernels.\n     *\n     * @returns A promise that resolves when the running list has been refreshed.\n     *\n     * #### Notes\n     * This is not typically meant to be called by the user, since the\n     * manager maintains its own internal state.\n     */\n    async refreshRunning() {\n        await this._pollModels.refresh();\n        await this._pollModels.tick;\n    }\n    /**\n     * Start a new kernel.\n     *\n     * @param createOptions - The kernel creation options\n     *\n     * @param connectOptions - The kernel connection options\n     *\n     * @returns A promise that resolves with the kernel connection.\n     *\n     * #### Notes\n     * The manager `serverSettings` will be always be used.\n     */\n    async startNew(createOptions = {}, connectOptions = {}) {\n        const model = await restapi_1.startNew(createOptions, this.serverSettings);\n        return this.connectTo(Object.assign(Object.assign({}, connectOptions), { model }));\n    }\n    /**\n     * Shut down a kernel by id.\n     *\n     * @param id - The id of the target kernel.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async shutdown(id) {\n        await restapi_1.shutdownKernel(id, this.serverSettings);\n        await this.refreshRunning();\n    }\n    /**\n     * Shut down all kernels.\n     *\n     * @returns A promise that resolves when all of the kernels are shut down.\n     */\n    async shutdownAll() {\n        // Update the list of models to make sure our list is current.\n        await this.refreshRunning();\n        // Shut down all models.\n        await Promise.all([...this._models.keys()].map(id => restapi_1.shutdownKernel(id, this.serverSettings)));\n        // Update the list of models to clear out our state.\n        await this.refreshRunning();\n    }\n    /**\n     * Find a kernel by id.\n     *\n     * @param id - The id of the target kernel.\n     *\n     * @returns A promise that resolves with the kernel's model.\n     */\n    async findById(id) {\n        if (this._models.has(id)) {\n            return this._models.get(id);\n        }\n        await this.refreshRunning();\n        return this._models.get(id);\n    }\n    /**\n     * Execute a request to the server to poll running kernels and update state.\n     */\n    async requestRunning() {\n        var _a;\n        let models;\n        try {\n            models = await restapi_1.listRunning(this.serverSettings);\n        }\n        catch (err) {\n            // Check for a network error, or a 503 error, which is returned\n            // by a JupyterHub when a server is shut down.\n            if (err instanceof __1.ServerConnection.NetworkError ||\n                ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 503) {\n                this._connectionFailure.emit(err);\n            }\n            throw err;\n        }\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._models.size === models.length &&\n            algorithm_1.every(models, x => {\n                const existing = this._models.get(x.id);\n                if (!existing) {\n                    return false;\n                }\n                return existing.name === x.name;\n            })) {\n            // Identical models list (presuming models does not contain duplicate\n            // ids), so just return\n            return;\n        }\n        this._models = new Map(models.map(x => [x.id, x]));\n        // For any kernel connection to a kernel that doesn't exist, notify it of\n        // the shutdown.\n        this._kernelConnections.forEach(kc => {\n            if (!this._models.has(kc.id)) {\n                kc.handleShutdown();\n            }\n        });\n        this._runningChanged.emit(models);\n    }\n    /**\n     * Handle a kernel starting.\n     */\n    _onStarted(kernelConnection) {\n        this._kernelConnections.add(kernelConnection);\n        kernelConnection.statusChanged.connect(this._onStatusChanged, this);\n        kernelConnection.disposed.connect(this._onDisposed, this);\n    }\n    _onDisposed(kernelConnection) {\n        this._kernelConnections.delete(kernelConnection);\n        // A dispose emission could mean the server session is deleted, or that\n        // the kernel JS object is disposed and the kernel still exists on the\n        // server, so we refresh from the server to make sure we reflect the\n        // server state.\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n    _onStatusChanged(kernelConnection, status) {\n        if (status === 'dead') {\n            // We asynchronously update our list of kernels, which asynchronously\n            // will dispose them. We do not want to immediately dispose them because\n            // there may be other signal handlers that want to be called.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n    }\n}\nexports.KernelManager = KernelManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@lumino/coreutils\");\nfunction createMessage(options) {\n    var _a, _b, _c, _d, _e;\n    return {\n        buffers: (_a = options.buffers, (_a !== null && _a !== void 0 ? _a : [])),\n        channel: options.channel,\n        content: options.content,\n        header: {\n            date: new Date().toISOString(),\n            msg_id: (_b = options.msgId, (_b !== null && _b !== void 0 ? _b : coreutils_1.UUID.uuid4())),\n            msg_type: options.msgType,\n            session: options.session,\n            username: (_c = options.username, (_c !== null && _c !== void 0 ? _c : '')),\n            version: '5.2'\n        },\n        metadata: (_d = options.metadata, (_d !== null && _d !== void 0 ? _d : {})),\n        parent_header: (_e = options.parentHeader, (_e !== null && _e !== void 0 ? _e : {}))\n    };\n}\nexports.createMessage = createMessage;\n/**\n * Test whether a kernel message is a `'stream'` message.\n */\nfunction isStreamMsg(msg) {\n    return msg.header.msg_type === 'stream';\n}\nexports.isStreamMsg = isStreamMsg;\n/**\n * Test whether a kernel message is an `'display_data'` message.\n */\nfunction isDisplayDataMsg(msg) {\n    return msg.header.msg_type === 'display_data';\n}\nexports.isDisplayDataMsg = isDisplayDataMsg;\n/**\n * Test whether a kernel message is an `'update_display_data'` message.\n */\nfunction isUpdateDisplayDataMsg(msg) {\n    return msg.header.msg_type === 'update_display_data';\n}\nexports.isUpdateDisplayDataMsg = isUpdateDisplayDataMsg;\n/**\n * Test whether a kernel message is an `'execute_input'` message.\n */\nfunction isExecuteInputMsg(msg) {\n    return msg.header.msg_type === 'execute_input';\n}\nexports.isExecuteInputMsg = isExecuteInputMsg;\n/**\n * Test whether a kernel message is an `'execute_result'` message.\n */\nfunction isExecuteResultMsg(msg) {\n    return msg.header.msg_type === 'execute_result';\n}\nexports.isExecuteResultMsg = isExecuteResultMsg;\n/**\n * Test whether a kernel message is an `'error'` message.\n */\nfunction isErrorMsg(msg) {\n    return msg.header.msg_type === 'error';\n}\nexports.isErrorMsg = isErrorMsg;\n/**\n * Test whether a kernel message is a `'status'` message.\n */\nfunction isStatusMsg(msg) {\n    return msg.header.msg_type === 'status';\n}\nexports.isStatusMsg = isStatusMsg;\n/**\n * Test whether a kernel message is a `'clear_output'` message.\n */\nfunction isClearOutputMsg(msg) {\n    return msg.header.msg_type === 'clear_output';\n}\nexports.isClearOutputMsg = isClearOutputMsg;\n/**\n * Test whether a kernel message is an experimental `'debug_event'` message.\n *\n * @hidden\n *\n * #### Notes\n * Debug messages are experimental messages that are not in the official\n * kernel message specification. As such, this is *NOT* considered\n * part of the public API, and may change without notice.\n */\nfunction isDebugEventMsg(msg) {\n    return msg.header.msg_type === 'debug_event';\n}\nexports.isDebugEventMsg = isDebugEventMsg;\n/**\n * Test whether a kernel message is a `'comm_open'` message.\n */\nfunction isCommOpenMsg(msg) {\n    return msg.header.msg_type === 'comm_open';\n}\nexports.isCommOpenMsg = isCommOpenMsg;\n/**\n * Test whether a kernel message is a `'comm_close'` message.\n */\nfunction isCommCloseMsg(msg) {\n    return msg.header.msg_type === 'comm_close';\n}\nexports.isCommCloseMsg = isCommCloseMsg;\n/**\n * Test whether a kernel message is a `'comm_msg'` message.\n */\nfunction isCommMsgMsg(msg) {\n    return msg.header.msg_type === 'comm_msg';\n}\nexports.isCommMsgMsg = isCommMsgMsg;\n/**\n * Test whether a kernel message is a `'kernel_info_request'` message.\n */\nfunction isInfoRequestMsg(msg) {\n    return msg.header.msg_type === 'kernel_info_request';\n}\nexports.isInfoRequestMsg = isInfoRequestMsg;\n/**\n * Test whether a kernel message is an `'execute_reply'` message.\n */\nfunction isExecuteReplyMsg(msg) {\n    return msg.header.msg_type === 'execute_reply';\n}\nexports.isExecuteReplyMsg = isExecuteReplyMsg;\n/**\n * Test whether a kernel message is an experimental `'debug_request'` message.\n *\n * @hidden\n *\n * #### Notes\n * Debug messages are experimental messages that are not in the official\n * kernel message specification. As such, this is *NOT* considered\n * part of the public API, and may change without notice.\n */\nfunction isDebugRequestMsg(msg) {\n    return msg.header.msg_type === 'debug_request';\n}\nexports.isDebugRequestMsg = isDebugRequestMsg;\n/**\n * Test whether a kernel message is an experimental `'debug_reply'` message.\n *\n * @hidden\n *\n * #### Notes\n * Debug messages are experimental messages that are not in the official\n * kernel message specification. As such, this is *NOT* considered\n * part of the public API, and may change without notice.\n */\nfunction isDebugReplyMsg(msg) {\n    return msg.header.msg_type === 'debug_reply';\n}\nexports.isDebugReplyMsg = isDebugReplyMsg;\n/**\n * Test whether a kernel message is an `'input_request'` message.\n */\nfunction isInputRequestMsg(msg) {\n    return msg.header.msg_type === 'input_request';\n}\nexports.isInputRequestMsg = isInputRequestMsg;\n/**\n * Test whether a kernel message is an `'input_reply'` message.\n */\nfunction isInputReplyMsg(msg) {\n    return msg.header.msg_type === 'input_reply';\n}\nexports.isInputReplyMsg = isInputReplyMsg;\n//# sourceMappingURL=messages.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst serverconnection_1 = require(\"../serverconnection\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst validate_1 = require(\"./validate\");\n/**\n * The url for the kernel service.\n */\nexports.KERNEL_SERVICE_URL = 'api/kernels';\n/**\n * Fetch the running kernels.\n *\n * @param settings - The optional server settings.\n *\n * @returns A promise that resolves with the list of running kernels.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function listRunning(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModels(data);\n    return data;\n}\nexports.listRunning = listRunning;\n/**\n * Start a new kernel.\n *\n * @param options - The options used to create the kernel.\n *\n * @returns A promise that resolves with a kernel connection object.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function startNew(options = {}, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL);\n    const init = {\n        method: 'POST',\n        body: JSON.stringify(options)\n    };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 201) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModel(data);\n    return data;\n}\nexports.startNew = startNew;\n/**\n * Restart a kernel.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response (and thus after a restart) and rejected otherwise.\n */\nasync function restartKernel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id), 'restart');\n    const init = { method: 'POST' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModel(data);\n}\nexports.restartKernel = restartKernel;\n/**\n * Interrupt a kernel.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function interruptKernel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id), 'interrupt');\n    const init = { method: 'POST' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.interruptKernel = interruptKernel;\n/**\n * Shut down a kernel.\n *\n * @param id - The id of the running kernel.\n *\n * @param settings - The server settings for the request.\n *\n * @returns A promise that resolves when the kernel is shut down.\n *\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function shutdownKernel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id));\n    const init = { method: 'DELETE' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status === 404) {\n        const msg = `The kernel \"${id}\" does not exist on the server`;\n        console.warn(msg);\n    }\n    else if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.shutdownKernel = shutdownKernel;\n/**\n * Get a full kernel model from the server by kernel id string.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function getKernelModel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id));\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status === 404) {\n        return undefined;\n    }\n    else if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModel(data);\n    return data;\n}\nexports.getKernelModel = getKernelModel;\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Deserialize and return the unpacked message.\n *\n * #### Notes\n * Handles JSON blob strings and binary messages.\n */\nfunction deserialize(data) {\n    let value;\n    if (typeof data === 'string') {\n        value = JSON.parse(data);\n    }\n    else {\n        value = deserializeBinary(data);\n    }\n    return value;\n}\nexports.deserialize = deserialize;\n/**\n * Serialize a kernel message for transport.\n *\n * #### Notes\n * If there is binary content, an `ArrayBuffer` is returned,\n * otherwise the message is converted to a JSON string.\n */\nfunction serialize(msg) {\n    var _a;\n    let value;\n    if ((_a = msg.buffers) === null || _a === void 0 ? void 0 : _a.length) {\n        value = serializeBinary(msg);\n    }\n    else {\n        value = JSON.stringify(msg);\n    }\n    return value;\n}\nexports.serialize = serialize;\n/**\n * Deserialize a binary message to a Kernel Message.\n */\nfunction deserializeBinary(buf) {\n    const data = new DataView(buf);\n    // read the header: 1 + nbufs 32b integers\n    const nbufs = data.getUint32(0);\n    const offsets = [];\n    if (nbufs < 2) {\n        throw new Error('Invalid incoming Kernel Message');\n    }\n    for (let i = 1; i <= nbufs; i++) {\n        offsets.push(data.getUint32(i * 4));\n    }\n    const jsonBytes = new Uint8Array(buf.slice(offsets[0], offsets[1]));\n    const msg = JSON.parse(new TextDecoder('utf8').decode(jsonBytes));\n    // the remaining chunks are stored as DataViews in msg.buffers\n    msg.buffers = [];\n    for (let i = 1; i < nbufs; i++) {\n        const start = offsets[i];\n        const stop = offsets[i + 1] || buf.byteLength;\n        msg.buffers.push(new DataView(buf.slice(start, stop)));\n    }\n    return msg;\n}\n/**\n * Implement the binary serialization protocol.\n *\n * Serialize Kernel message to ArrayBuffer.\n */\nfunction serializeBinary(msg) {\n    const offsets = [];\n    const buffers = [];\n    const encoder = new TextEncoder();\n    let origBuffers = [];\n    if (msg.buffers !== undefined) {\n        origBuffers = msg.buffers;\n        delete msg['buffers'];\n    }\n    const jsonUtf8 = encoder.encode(JSON.stringify(msg));\n    buffers.push(jsonUtf8.buffer);\n    for (let i = 0; i < origBuffers.length; i++) {\n        // msg.buffers elements could be either views or ArrayBuffers\n        // buffers elements are ArrayBuffers\n        const b = origBuffers[i];\n        buffers.push(b instanceof ArrayBuffer ? b : b.buffer);\n    }\n    const nbufs = buffers.length;\n    offsets.push(4 * (nbufs + 1));\n    for (let i = 0; i + 1 < buffers.length; i++) {\n        offsets.push(offsets[offsets.length - 1] + buffers[i].byteLength);\n    }\n    const msgBuf = new Uint8Array(offsets[offsets.length - 1] + buffers[buffers.length - 1].byteLength);\n    // use DataView.setUint32 for network byte-order\n    const view = new DataView(msgBuf.buffer);\n    // write nbufs to first 4 bytes\n    view.setUint32(0, nbufs);\n    // write offsets to next 4 * nbufs bytes\n    for (let i = 0; i < offsets.length; i++) {\n        view.setUint32(4 * (i + 1), offsets[i]);\n    }\n    // write all the buffers at their respective offsets\n    for (let i = 0; i < buffers.length; i++) {\n        msgBuf.set(new Uint8Array(buffers[i]), offsets[i]);\n    }\n    return msgBuf.buffer;\n}\n//# sourceMappingURL=serialize.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_1 = require(\"../validate\");\n/**\n * Required fields for `IKernelHeader`.\n */\nconst HEADER_FIELDS = ['username', 'version', 'session', 'msg_id', 'msg_type'];\n/**\n * Required fields and types for contents of various types of `kernel.IMessage`\n * messages on the iopub channel.\n */\nconst IOPUB_CONTENT_FIELDS = {\n    stream: { name: 'string', text: 'string' },\n    display_data: { data: 'object', metadata: 'object' },\n    execute_input: { code: 'string', execution_count: 'number' },\n    execute_result: {\n        execution_count: 'number',\n        data: 'object',\n        metadata: 'object'\n    },\n    error: { ename: 'string', evalue: 'string', traceback: 'object' },\n    status: {\n        execution_state: [\n            'string',\n            ['starting', 'idle', 'busy', 'restarting', 'dead']\n        ]\n    },\n    clear_output: { wait: 'boolean' },\n    comm_open: { comm_id: 'string', target_name: 'string', data: 'object' },\n    comm_msg: { comm_id: 'string', data: 'object' },\n    comm_close: { comm_id: 'string' },\n    shutdown_reply: { restart: 'boolean' } // Emitted by the IPython kernel.\n};\n/**\n * Validate the header of a kernel message.\n */\nfunction validateHeader(header) {\n    for (let i = 0; i < HEADER_FIELDS.length; i++) {\n        validate_1.validateProperty(header, HEADER_FIELDS[i], 'string');\n    }\n}\n/**\n * Validate a kernel message object.\n */\nfunction validateMessage(msg) {\n    validate_1.validateProperty(msg, 'metadata', 'object');\n    validate_1.validateProperty(msg, 'content', 'object');\n    validate_1.validateProperty(msg, 'channel', 'string');\n    validateHeader(msg.header);\n    if (msg.channel === 'iopub') {\n        validateIOPubContent(msg);\n    }\n}\nexports.validateMessage = validateMessage;\n/**\n * Validate content an kernel message on the iopub channel.\n */\nfunction validateIOPubContent(msg) {\n    if (msg.channel === 'iopub') {\n        const fields = IOPUB_CONTENT_FIELDS[msg.header.msg_type];\n        // Check for unknown message type.\n        if (fields === undefined) {\n            return;\n        }\n        const names = Object.keys(fields);\n        const content = msg.content;\n        for (let i = 0; i < names.length; i++) {\n            let args = fields[names[i]];\n            if (!Array.isArray(args)) {\n                args = [args];\n            }\n            validate_1.validateProperty(content, names[i], ...args);\n        }\n    }\n}\n/**\n * Validate a `Kernel.IModel` object.\n */\nfunction validateModel(model) {\n    validate_1.validateProperty(model, 'name', 'string');\n    validate_1.validateProperty(model, 'id', 'string');\n}\nexports.validateModel = validateModel;\n/**\n * Validate an array of `IModel` objects.\n */\nfunction validateModels(models) {\n    if (!Array.isArray(models)) {\n        throw new Error('Invalid kernel list');\n    }\n    models.forEach(d => validateModel(d));\n}\nexports.validateModels = validateModels;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst KernelSpec = __importStar(require(\"./kernelspec\"));\nexports.KernelSpec = KernelSpec;\nconst KernelSpecAPI = __importStar(require(\"./restapi\"));\nexports.KernelSpecAPI = KernelSpecAPI;\n__export(require(\"./manager\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=kernelspec.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@lumino/coreutils\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst restapi = __importStar(require(\"./restapi\"));\nconst basemanager_1 = require(\"../basemanager\");\n/**\n * An implementation of a kernel spec manager.\n */\nclass KernelSpecManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new kernel spec manager.\n     *\n     * @param options - The default options for kernel.\n     */\n    constructor(options = {}) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        this._connectionFailure = new signaling_1.Signal(this);\n        this._specs = null;\n        this._specsChanged = new signaling_1.Signal(this);\n        // Initialize internal data.\n        this._ready = Promise.all([this.requestSpecs()])\n            .then(_ => undefined)\n            .catch(_ => undefined)\n            .then(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this._isReady = true;\n        });\n        this._pollSpecs = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestSpecs(),\n            frequency: {\n                interval: 61 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:KernelSpecManager#specs`,\n            standby: (_a = options.standby, (_a !== null && _a !== void 0 ? _a : 'when-hidden'))\n        });\n        void this.ready.then(() => {\n            void this._pollSpecs.start();\n        });\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * Get the most recently fetched kernel specs.\n     */\n    get specs() {\n        return this._specs;\n    }\n    /**\n     * A signal emitted when the specs change.\n     */\n    get specsChanged() {\n        return this._specsChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        this._pollSpecs.dispose();\n        super.dispose();\n    }\n    /**\n     * Force a refresh of the specs from the server.\n     *\n     * @returns A promise that resolves when the specs are fetched.\n     *\n     * #### Notes\n     * This is intended to be called only in response to a user action,\n     * since the manager maintains its internal state.\n     */\n    async refreshSpecs() {\n        await this._pollSpecs.refresh();\n        await this._pollSpecs.tick;\n    }\n    /**\n     * Execute a request to the server to poll specs and update state.\n     */\n    async requestSpecs() {\n        const specs = await restapi.getSpecs(this.serverSettings);\n        if (this.isDisposed) {\n            return;\n        }\n        if (!coreutils_1.JSONExt.deepEqual(specs, this._specs)) {\n            this._specs = specs;\n            this._specsChanged.emit(specs);\n        }\n    }\n}\nexports.KernelSpecManager = KernelSpecManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst serverconnection_1 = require(\"../serverconnection\");\nconst validate_1 = require(\"./validate\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\n/**\n * The url for the kernelspec service.\n */\nconst KERNELSPEC_SERVICE_URL = 'api/kernelspecs';\n/**\n * Fetch all of the kernel specs.\n *\n * @param settings - The optional server settings.\n * @param useCache - Whether to use the cache. If false, always request.\n *\n * @returns A promise that resolves with the kernel specs.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernelspecs).\n */\nasync function getSpecs(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, KERNELSPEC_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    return validate_1.validateSpecModels(data);\n}\nexports.getSpecs = getSpecs;\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_1 = require(\"../validate\");\n/**\n * Validate a server kernelspec model to a client side model.\n */\nfunction validateSpecModel(data) {\n    const spec = data.spec;\n    if (!spec) {\n        throw new Error('Invalid kernel spec');\n    }\n    validate_1.validateProperty(data, 'name', 'string');\n    validate_1.validateProperty(data, 'resources', 'object');\n    validate_1.validateProperty(spec, 'language', 'string');\n    validate_1.validateProperty(spec, 'display_name', 'string');\n    validate_1.validateProperty(spec, 'argv', 'array');\n    let metadata = null;\n    if (spec.hasOwnProperty('metadata')) {\n        validate_1.validateProperty(spec, 'metadata', 'object');\n        metadata = spec.metadata;\n    }\n    let env = null;\n    if (spec.hasOwnProperty('env')) {\n        validate_1.validateProperty(spec, 'env', 'object');\n        env = spec.env;\n    }\n    return {\n        name: data.name,\n        resources: data.resources,\n        language: spec.language,\n        display_name: spec.display_name,\n        argv: spec.argv,\n        metadata,\n        env\n    };\n}\nexports.validateSpecModel = validateSpecModel;\n/**\n * Validate a `Kernel.ISpecModels` object.\n */\nfunction validateSpecModels(data) {\n    if (!data.hasOwnProperty('kernelspecs')) {\n        throw new Error('No kernelspecs found');\n    }\n    let keys = Object.keys(data.kernelspecs);\n    const kernelspecs = Object.create(null);\n    let defaultSpec = data.default;\n    for (let i = 0; i < keys.length; i++) {\n        const ks = data.kernelspecs[keys[i]];\n        try {\n            kernelspecs[keys[i]] = validateSpecModel(ks);\n        }\n        catch (err) {\n            // Remove the errant kernel spec.\n            console.warn(`Removing errant kernel spec: ${keys[i]}`);\n        }\n    }\n    keys = Object.keys(kernelspecs);\n    if (!keys.length) {\n        throw new Error('No valid kernelspecs found');\n    }\n    if (!defaultSpec ||\n        typeof defaultSpec !== 'string' ||\n        !(defaultSpec in kernelspecs)) {\n        defaultSpec = keys[0];\n        console.warn(`Default kernel not found, using '${keys[0]}'`);\n    }\n    return {\n        default: defaultSpec,\n        kernelspecs\n    };\n}\nexports.validateSpecModels = validateSpecModels;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst signaling_1 = require(\"@lumino/signaling\");\nconst builder_1 = require(\"./builder\");\nconst nbconvert_1 = require(\"./nbconvert\");\nconst contents_1 = require(\"./contents\");\nconst kernelspec_1 = require(\"./kernelspec\");\nconst session_1 = require(\"./session\");\nconst setting_1 = require(\"./setting\");\nconst terminal_1 = require(\"./terminal\");\nconst serverconnection_1 = require(\"./serverconnection\");\nconst workspace_1 = require(\"./workspace\");\nconst kernel_1 = require(\"./kernel\");\n/**\n * A Jupyter services manager.\n */\nclass ServiceManager {\n    /**\n     * Construct a new services provider.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._isDisposed = false;\n        this._connectionFailure = new signaling_1.Signal(this);\n        this._isReady = false;\n        const defaultDrive = options.defaultDrive;\n        const serverSettings = (_a = options.serverSettings, (_a !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings()));\n        const standby = (_b = options.standby, (_b !== null && _b !== void 0 ? _b : 'when-hidden'));\n        const normalized = { defaultDrive, serverSettings, standby };\n        const kernelManager = new kernel_1.KernelManager(normalized);\n        this.serverSettings = serverSettings;\n        this.contents = new contents_1.ContentsManager(normalized);\n        this.sessions = new session_1.SessionManager(Object.assign(Object.assign({}, normalized), { kernelManager: kernelManager }));\n        this.settings = new setting_1.SettingManager(normalized);\n        this.terminals = new terminal_1.TerminalManager(normalized);\n        this.builder = new builder_1.BuildManager(normalized);\n        this.workspaces = new workspace_1.WorkspaceManager(normalized);\n        this.nbconvert = new nbconvert_1.NbConvertManager(normalized);\n        this.kernelspecs = new kernelspec_1.KernelSpecManager(normalized);\n        // Relay connection failures from the service managers that poll\n        // the server for current information.\n        this.kernelspecs.connectionFailure.connect(this._onConnectionFailure, this);\n        this.sessions.connectionFailure.connect(this._onConnectionFailure, this);\n        this.terminals.connectionFailure.connect(this._onConnectionFailure, this);\n        const readyList = [this.sessions.ready, this.kernelspecs.ready];\n        if (this.terminals.isAvailable()) {\n            readyList.push(this.terminals.ready);\n        }\n        this._readyPromise = Promise.all(readyList).then(() => {\n            this._isReady = true;\n        });\n    }\n    /**\n     * A signal emitted when there is a connection failure with the kernel.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Test whether the service manager is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n        this.contents.dispose();\n        this.sessions.dispose();\n        this.terminals.dispose();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._readyPromise;\n    }\n    _onConnectionFailure(sender, err) {\n        this._connectionFailure.emit(err);\n    }\n}\nexports.ServiceManager = ServiceManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab nbconvert service.\n */\nconst NBCONVERT_SETTINGS_URL = 'api/nbconvert';\n/**\n * The nbconvert API service manager.\n */\nclass NbConvertManager {\n    /**\n     * Create a new nbconvert manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        this.serverSettings = (_a = options.serverSettings, (_a !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings()));\n    }\n    /**\n     * Get whether the application should be built.\n     */\n    async getExportFormats() {\n        const base = this.serverSettings.baseUrl;\n        const url = coreutils_1.URLExt.join(base, NBCONVERT_SETTINGS_URL);\n        const { serverSettings } = this;\n        const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        const exportList = {};\n        const keys = Object.keys(data);\n        keys.forEach(function (key) {\n            const mimeType = data[key].output_mimetype;\n            exportList[key] = { output_mimetype: mimeType };\n        });\n        return exportList;\n    }\n}\nexports.NbConvertManager = NbConvertManager;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nlet FETCH;\nlet HEADERS;\nlet REQUEST;\nlet WEBSOCKET;\nif (typeof window === 'undefined') {\n    // Mangle the require statements so it does not get picked up in the\n    // browser assets.\n    /* tslint:disable */\n    const fetchMod = require('node-fetch');\n    FETCH = (_a = global.fetch, (_a !== null && _a !== void 0 ? _a : fetchMod));\n    REQUEST = (_b = global.Request, (_b !== null && _b !== void 0 ? _b : fetchMod.Request));\n    HEADERS = (_c = global.Headers, (_c !== null && _c !== void 0 ? _c : fetchMod.Headers));\n    WEBSOCKET = require('ws');\n    /* tslint:enable */\n}\nelse {\n    FETCH = fetch;\n    REQUEST = Request;\n    HEADERS = Headers;\n    WEBSOCKET = WebSocket;\n}\n/**\n * The namespace for ServerConnection functions.\n *\n * #### Notes\n * This is only intended to manage communication with the Jupyter server.\n *\n * The default values can be used in a JupyterLab or Jupyter Notebook context.\n *\n * We use `token` authentication if available, falling back on an XSRF\n * cookie if one has been provided on the `document`.\n *\n * A content type of `'application/json'` is added when using authentication\n * and there is no body data to allow the server to prevent malicious forms.\n */\nvar ServerConnection;\n(function (ServerConnection) {\n    /**\n     * Create a settings object given a subset of options.\n     *\n     * @param options - An optional partial set of options.\n     *\n     * @returns The full settings object.\n     */\n    function makeSettings(options) {\n        return Private.makeSettings(options);\n    }\n    ServerConnection.makeSettings = makeSettings;\n    /**\n     * Make an request to the notebook server.\n     *\n     * @param url - The url for the request.\n     *\n     * @param init - The initialization options for the request.\n     *\n     * @param settings - The server settings to apply to the request.\n     *\n     * @returns a Promise that resolves with the response.\n     *\n     * @throws If the url of the request is not a notebook server url.\n     *\n     * #### Notes\n     * The `url` must start with `settings.baseUrl`.  The `init` settings are\n     * merged with `settings.init`, with `init` taking precedence.\n     * The headers in the two objects are not merged.\n     * If there is no body data, we set the content type to `application/json`\n     * because it is required by the Notebook server.\n     */\n    function makeRequest(url, init, settings) {\n        return Private.handleRequest(url, init, settings);\n    }\n    ServerConnection.makeRequest = makeRequest;\n    /**\n     * A wrapped error for a fetch response.\n     */\n    class ResponseError extends Error {\n        /**\n         * Create a new response error.\n         */\n        constructor(response, message = `Invalid response: ${response.status} ${response.statusText}`, traceback = '') {\n            super(message);\n            this.response = response;\n            this.traceback = traceback;\n        }\n        /**\n         * Create a ResponseError from a response, handling the traceback and message\n         * as appropriate.\n         *\n         * @param response The response object.\n         *\n         * @returns A promise that resolves with a `ResponseError` object.\n         */\n        static async create(response) {\n            try {\n                const data = await response.json();\n                if (data['traceback']) {\n                    console.error(data['traceback']);\n                }\n                if (data['message']) {\n                    return new ResponseError(response, data['message']);\n                }\n                return new ResponseError(response);\n            }\n            catch (e) {\n                console.debug(e);\n                return new ResponseError(response);\n            }\n        }\n    }\n    ServerConnection.ResponseError = ResponseError;\n    /**\n     * A wrapped error for a network error.\n     */\n    class NetworkError extends TypeError {\n        /**\n         * Create a new network error.\n         */\n        constructor(original) {\n            super(original.message);\n            this.stack = original.stack;\n        }\n    }\n    ServerConnection.NetworkError = NetworkError;\n})(ServerConnection = exports.ServerConnection || (exports.ServerConnection = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle the server connection settings, returning a new value.\n     */\n    function makeSettings(options = {}) {\n        const pageBaseUrl = coreutils_1.PageConfig.getBaseUrl();\n        const pageWsUrl = coreutils_1.PageConfig.getWsUrl();\n        const baseUrl = coreutils_1.URLExt.normalize(options.baseUrl) || pageBaseUrl;\n        let wsUrl = options.wsUrl;\n        // Prefer the default wsUrl if we are using the default baseUrl.\n        if (!wsUrl && baseUrl === pageBaseUrl) {\n            wsUrl = pageWsUrl;\n        }\n        // Otherwise convert the baseUrl to a wsUrl if possible.\n        if (!wsUrl && baseUrl.indexOf('http') === 0) {\n            wsUrl = 'ws' + baseUrl.slice(4);\n        }\n        // Otherwise fall back on the default wsUrl.\n        wsUrl = (wsUrl !== null && wsUrl !== void 0 ? wsUrl : pageWsUrl);\n        return Object.assign(Object.assign({ init: { cache: 'no-store', credentials: 'same-origin' }, fetch: FETCH, Headers: HEADERS, Request: REQUEST, WebSocket: WEBSOCKET, token: coreutils_1.PageConfig.getToken(), appUrl: coreutils_1.PageConfig.getOption('appUrl') }, options), { baseUrl,\n            wsUrl });\n    }\n    Private.makeSettings = makeSettings;\n    /**\n     * Handle a request.\n     *\n     * @param url - The url for the request.\n     *\n     * @param init - The overrides for the request init.\n     *\n     * @param settings - The settings object for the request.\n     *\n     * #### Notes\n     * The `url` must start with `settings.baseUrl`.  The `init` settings\n     * take precedence over `settings.init`.\n     */\n    function handleRequest(url, init, settings) {\n        var _a, _b;\n        // Handle notebook server requests.\n        if (url.indexOf(settings.baseUrl) !== 0) {\n            throw new Error('Can only be used for notebook server requests');\n        }\n        // Use explicit cache buster when `no-store` is set since\n        // not all browsers use it properly.\n        const cache = (_a = init.cache, (_a !== null && _a !== void 0 ? _a : settings.init.cache));\n        if (cache === 'no-store') {\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n            url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n        }\n        const request = new settings.Request(url, Object.assign(Object.assign({}, settings.init), init));\n        // Handle authentication. Authentication can be overdetermined by\n        // settings token and XSRF token.\n        let authenticated = false;\n        if (settings.token) {\n            authenticated = true;\n            request.headers.append('Authorization', `token ${settings.token}`);\n        }\n        if (typeof document !== 'undefined' && ((_b = document) === null || _b === void 0 ? void 0 : _b.cookie)) {\n            const xsrfToken = getCookie('_xsrf');\n            if (xsrfToken !== undefined) {\n                authenticated = true;\n                request.headers.append('X-XSRFToken', xsrfToken);\n            }\n        }\n        // Set the content type if there is no given data and we are\n        // using an authenticated connection.\n        if (!request.headers.has('Content-Type') && authenticated) {\n            request.headers.set('Content-Type', 'application/json');\n        }\n        // Use `call` to avoid a `TypeError` in the browser.\n        return settings.fetch.call(null, request).catch((e) => {\n            // Convert the TypeError into a more specific error.\n            throw new ServerConnection.NetworkError(e);\n        });\n        // TODO: *this* is probably where we need a system-wide connectionFailure\n        // signal we can hook into.\n    }\n    Private.handleRequest = handleRequest;\n    /**\n     * Get a cookie from the document.\n     */\n    function getCookie(name) {\n        var _a;\n        // From http://www.tornadoweb.org/en/stable/guide/security.html\n        const matches = document.cookie.match('\\\\b' + name + '=([^;]*)\\\\b');\n        return (_a = matches) === null || _a === void 0 ? void 0 : _a[1];\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=serverconnection.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst restapi_1 = require(\"./restapi\");\nconst coreutils_1 = require(\"@lumino/coreutils\");\n/**\n * Session object for accessing the session REST api. The session\n * should be used to start kernels and then shut them down -- for\n * all other kernel operations, the kernel object should be used.\n */\nclass SessionConnection {\n    /**\n     * Construct a new session.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        this._id = '';\n        this._path = '';\n        this._name = '';\n        this._type = '';\n        this._kernel = null;\n        this._isDisposed = false;\n        this._disposed = new signaling_1.Signal(this);\n        this._kernelChanged = new signaling_1.Signal(this);\n        this._statusChanged = new signaling_1.Signal(this);\n        this._connectionStatusChanged = new signaling_1.Signal(this);\n        this._iopubMessage = new signaling_1.Signal(this);\n        this._unhandledMessage = new signaling_1.Signal(this);\n        this._anyMessage = new signaling_1.Signal(this);\n        this._propertyChanged = new signaling_1.Signal(this);\n        this._id = options.model.id;\n        this._name = options.model.name;\n        this._path = options.model.path;\n        this._type = options.model.type;\n        this._username = (_a = options.username, (_a !== null && _a !== void 0 ? _a : ''));\n        this._clientId = (_b = options.clientId, (_b !== null && _b !== void 0 ? _b : coreutils_1.UUID.uuid4()));\n        this._connectToKernel = options.connectToKernel;\n        this._kernelConnectionOptions = (_c = options.kernelConnectionOptions, (_c !== null && _c !== void 0 ? _c : {}));\n        this.serverSettings = (_d = options.serverSettings, (_d !== null && _d !== void 0 ? _d : __1.ServerConnection.makeSettings()));\n        this.setupKernel(options.model.kernel);\n    }\n    /**\n     * A signal emitted when the session is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * A signal emitted when the kernel changes.\n     */\n    get kernelChanged() {\n        return this._kernelChanged;\n    }\n    /**\n     * A signal proxied from the connection about the kernel status.\n     */\n    get statusChanged() {\n        return this._statusChanged;\n    }\n    /**\n     * A signal proxied from the kernel about the connection status.\n     */\n    get connectionStatusChanged() {\n        return this._connectionStatusChanged;\n    }\n    /**\n     * A signal proxied from the kernel about iopub kernel messages.\n     */\n    get iopubMessage() {\n        return this._iopubMessage;\n    }\n    /**\n     * A signal proxied from the kernel for an unhandled kernel message.\n     */\n    get unhandledMessage() {\n        return this._unhandledMessage;\n    }\n    /**\n     * A signal proxied from the kernel emitted for any kernel message.\n     *\n     * #### Notes\n     * The behavior is undefined if the message is modified during message\n     * handling. As such, it should be treated as read-only.\n     */\n    get anyMessage() {\n        return this._anyMessage;\n    }\n    /**\n     * A signal emitted when a session property changes.\n     */\n    get propertyChanged() {\n        return this._propertyChanged;\n    }\n    /**\n     * Get the session id.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the session kernel connection object.\n     *\n     * #### Notes\n     * This is a read-only property, and can be altered by [changeKernel].\n     */\n    get kernel() {\n        return this._kernel;\n    }\n    /**\n     * Get the session path.\n     */\n    get path() {\n        return this._path;\n    }\n    /**\n     * Get the session type.\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * Get the session name.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Get the model associated with the session.\n     */\n    get model() {\n        return {\n            id: this.id,\n            kernel: this.kernel && { id: this.kernel.id, name: this.kernel.name },\n            path: this._path,\n            type: this._type,\n            name: this._name\n        };\n    }\n    /**\n     * Test whether the session has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Update the session based on a session model from the server.\n     *\n     * #### Notes\n     * This only updates this session connection instance. Use `setPath`,\n     * `setName`, `setType`, and `changeKernel` to change the session values on\n     * the server.\n     */\n    update(model) {\n        const oldModel = this.model;\n        this._path = model.path;\n        this._name = model.name;\n        this._type = model.type;\n        if ((this._kernel === null && model.kernel !== null) ||\n            (this._kernel !== null && model.kernel === null) ||\n            (this._kernel !== null &&\n                model.kernel !== null &&\n                this._kernel.id !== model.kernel.id)) {\n            if (this._kernel !== null) {\n                this._kernel.dispose();\n            }\n            const oldValue = this._kernel;\n            this.setupKernel(model.kernel);\n            const newValue = this._kernel;\n            this._kernelChanged.emit({ name: 'kernel', oldValue, newValue });\n        }\n        this._handleModelChange(oldModel);\n    }\n    /**\n     * Dispose of the resources held by the session.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit();\n        if (this._kernel) {\n            this._kernel.dispose();\n            const oldValue = this._kernel;\n            this._kernel = null;\n            const newValue = this._kernel;\n            this._kernelChanged.emit({ name: 'kernel', oldValue, newValue });\n        }\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Change the session path.\n     *\n     * @param path - The new session path.\n     *\n     * @returns A promise that resolves when the session has renamed.\n     *\n     * #### Notes\n     * This uses the Jupyter REST API, and the response is validated.\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     */\n    async setPath(path) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ path });\n    }\n    /**\n     * Change the session name.\n     */\n    async setName(name) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ name });\n    }\n    /**\n     * Change the session type.\n     */\n    async setType(type) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ type });\n    }\n    /**\n     * Change the kernel.\n     *\n     * @params options - The name or id of the new kernel.\n     *\n     * #### Notes\n     * This shuts down the existing kernel and creates a new kernel,\n     * keeping the existing session ID and session path.\n     */\n    async changeKernel(options) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ kernel: options });\n        return this.kernel;\n    }\n    /**\n     * Kill the kernel and shutdown the session.\n     *\n     * @returns - The promise fulfilled on a valid response from the server.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/sessions), and validates the response.\n     * Disposes of the session and emits a [sessionDied] signal on success.\n     */\n    async shutdown() {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await restapi_1.shutdownSession(this.id, this.serverSettings);\n        this.dispose();\n    }\n    /**\n     * Create a new kernel connection and connect to its signals.\n     *\n     * #### Notes\n     * This method is not meant to be subclassed.\n     */\n    setupKernel(model) {\n        if (model === null) {\n            this._kernel = null;\n            return;\n        }\n        const kc = this._connectToKernel(Object.assign(Object.assign({}, this._kernelConnectionOptions), { model, username: this._username, clientId: this._clientId, serverSettings: this.serverSettings }));\n        this._kernel = kc;\n        kc.statusChanged.connect(this.onKernelStatus, this);\n        kc.connectionStatusChanged.connect(this.onKernelConnectionStatus, this);\n        kc.unhandledMessage.connect(this.onUnhandledMessage, this);\n        kc.iopubMessage.connect(this.onIOPubMessage, this);\n        kc.anyMessage.connect(this.onAnyMessage, this);\n    }\n    /**\n     * Handle to changes in the Kernel status.\n     */\n    onKernelStatus(sender, state) {\n        this._statusChanged.emit(state);\n    }\n    /**\n     * Handle to changes in the Kernel status.\n     */\n    onKernelConnectionStatus(sender, state) {\n        this._connectionStatusChanged.emit(state);\n    }\n    /**\n     * Handle iopub kernel messages.\n     */\n    onIOPubMessage(sender, msg) {\n        this._iopubMessage.emit(msg);\n    }\n    /**\n     * Handle unhandled kernel messages.\n     */\n    onUnhandledMessage(sender, msg) {\n        this._unhandledMessage.emit(msg);\n    }\n    /**\n     * Handle any kernel messages.\n     */\n    onAnyMessage(sender, args) {\n        this._anyMessage.emit(args);\n    }\n    /**\n     * Send a PATCH to the server, updating the session path or the kernel.\n     */\n    async _patch(body) {\n        const model = await restapi_1.updateSession(Object.assign(Object.assign({}, body), { id: this._id }), this.serverSettings);\n        this.update(model);\n        return model;\n    }\n    /**\n     * Handle a change to the model.\n     */\n    _handleModelChange(oldModel) {\n        if (oldModel.name !== this._name) {\n            this._propertyChanged.emit('name');\n        }\n        if (oldModel.type !== this._type) {\n            this._propertyChanged.emit('type');\n        }\n        if (oldModel.path !== this._path) {\n            this._propertyChanged.emit('path');\n        }\n    }\n}\nexports.SessionConnection = SessionConnection;\n//# sourceMappingURL=default.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Session = __importStar(require(\"./session\"));\nexports.Session = Session;\nconst SessionAPI = __importStar(require(\"./restapi\"));\nexports.SessionAPI = SessionAPI;\n__export(require(\"./manager\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst serverconnection_1 = require(\"../serverconnection\");\nconst basemanager_1 = require(\"../basemanager\");\nconst default_1 = require(\"./default\");\nconst restapi_1 = require(\"./restapi\");\n/**\n * An implementation of a session manager.\n */\nclass SessionManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new session manager.\n     *\n     * @param options - The default options for each session.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        this._sessionConnections = new Set();\n        this._models = new Map();\n        this._runningChanged = new signaling_1.Signal(this);\n        this._connectionFailure = new signaling_1.Signal(this);\n        // We define these here so they bind `this` correctly\n        this._connectToKernel = (options) => {\n            return this._kernelManager.connectTo(options);\n        };\n        this._kernelManager = options.kernelManager;\n        // Start model polling with exponential backoff.\n        this._pollModels = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestRunning(),\n            frequency: {\n                interval: 10 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:SessionManager#models`,\n            standby: (_a = options.standby, (_a !== null && _a !== void 0 ? _a : 'when-hidden'))\n        });\n        // Initialize internal data.\n        this._ready = (async () => {\n            await this._pollModels.start();\n            await this._pollModels.tick;\n            await this._kernelManager.ready;\n            this._isReady = true;\n        })();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * A signal emitted when the running sessions change.\n     */\n    get runningChanged() {\n        return this._runningChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._models.clear();\n        this._sessionConnections.forEach(x => x.dispose());\n        this._pollModels.dispose();\n        super.dispose();\n    }\n    /*\n     * Connect to a running session.  See also [[connectToSession]].\n     */\n    connectTo(options) {\n        const sessionConnection = new default_1.SessionConnection(Object.assign(Object.assign({}, options), { connectToKernel: this._connectToKernel, serverSettings: this.serverSettings }));\n        this._onStarted(sessionConnection);\n        if (!this._models.has(options.model.id)) {\n            // We trust the user to connect to an existing session, but we verify\n            // asynchronously.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n        return sessionConnection;\n    }\n    /**\n     * Create an iterator over the most recent running sessions.\n     *\n     * @returns A new iterator over the running sessions.\n     */\n    running() {\n        return algorithm_1.iter([...this._models.values()]);\n    }\n    /**\n     * Force a refresh of the running sessions.\n     *\n     * @returns A promise that with the list of running sessions.\n     *\n     * #### Notes\n     * This is not typically meant to be called by the user, since the\n     * manager maintains its own internal state.\n     */\n    async refreshRunning() {\n        await this._pollModels.refresh();\n        await this._pollModels.tick;\n    }\n    /**\n     * Start a new session.  See also [[startNewSession]].\n     *\n     * @param createOptions - Options for creating the session\n     *\n     * @param connectOptions - Options for connecting to the session\n     */\n    async startNew(createOptions, connectOptions = {}) {\n        const model = await restapi_1.startSession(createOptions, this.serverSettings);\n        await this.refreshRunning();\n        return this.connectTo(Object.assign(Object.assign({}, connectOptions), { model }));\n    }\n    /**\n     * Shut down a session by id.\n     */\n    async shutdown(id) {\n        await restapi_1.shutdownSession(id, this.serverSettings);\n        await this.refreshRunning();\n    }\n    /**\n     * Shut down all sessions.\n     *\n     * @returns A promise that resolves when all of the kernels are shut down.\n     */\n    async shutdownAll() {\n        // Update the list of models to make sure our list is current.\n        await this.refreshRunning();\n        // Shut down all models.\n        await Promise.all([...this._models.keys()].map(id => restapi_1.shutdownSession(id, this.serverSettings)));\n        // Update the list of models to clear out our state.\n        await this.refreshRunning();\n    }\n    /**\n     * Find a session associated with a path and stop it if it is the only session\n     * using that kernel.\n     *\n     * @param path - The path in question.\n     *\n     * @returns A promise that resolves when the relevant sessions are stopped.\n     */\n    async stopIfNeeded(path) {\n        try {\n            const sessions = await restapi_1.listRunning(this.serverSettings);\n            const matches = sessions.filter(value => value.path === path);\n            if (matches.length === 1) {\n                const id = matches[0].id;\n                await this.shutdown(id);\n            }\n        }\n        catch (error) {\n            /* Always succeed. */\n        }\n    }\n    /**\n     * Find a session by id.\n     */\n    async findById(id) {\n        if (this._models.has(id)) {\n            return this._models.get(id);\n        }\n        await this.refreshRunning();\n        return this._models.get(id);\n    }\n    /**\n     * Find a session by path.\n     */\n    async findByPath(path) {\n        for (const m of this._models.values()) {\n            if (m.path === path) {\n                return m;\n            }\n        }\n        await this.refreshRunning();\n        for (const m of this._models.values()) {\n            if (m.path === path) {\n                return m;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Execute a request to the server to poll running kernels and update state.\n     */\n    async requestRunning() {\n        var _a;\n        let models;\n        try {\n            models = await restapi_1.listRunning(this.serverSettings);\n        }\n        catch (err) {\n            // Check for a network error, or a 503 error, which is returned\n            // by a JupyterHub when a server is shut down.\n            if (err instanceof serverconnection_1.ServerConnection.NetworkError ||\n                ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 503) {\n                this._connectionFailure.emit(err);\n            }\n            throw err;\n        }\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._models.size === models.length &&\n            algorithm_1.every(models, x => {\n                var _a, _b, _c, _d;\n                const existing = this._models.get(x.id);\n                if (!existing) {\n                    return false;\n                }\n                return (((_a = existing.kernel) === null || _a === void 0 ? void 0 : _a.id) === ((_b = x.kernel) === null || _b === void 0 ? void 0 : _b.id) &&\n                    ((_c = existing.kernel) === null || _c === void 0 ? void 0 : _c.name) === ((_d = x.kernel) === null || _d === void 0 ? void 0 : _d.name) &&\n                    existing.name === x.name &&\n                    existing.path === x.path &&\n                    existing.type === x.type);\n            })) {\n            // Identical models list (presuming models does not contain duplicate\n            // ids), so just return\n            return;\n        }\n        this._models = new Map(models.map(x => [x.id, x]));\n        this._sessionConnections.forEach(sc => {\n            if (this._models.has(sc.id)) {\n                sc.update(this._models.get(sc.id));\n            }\n            else {\n                sc.dispose();\n            }\n        });\n        this._runningChanged.emit(models);\n    }\n    /**\n     * Handle a session starting.\n     */\n    _onStarted(sessionConnection) {\n        this._sessionConnections.add(sessionConnection);\n        sessionConnection.disposed.connect(this._onDisposed, this);\n        sessionConnection.propertyChanged.connect(this._onChanged, this);\n        sessionConnection.kernelChanged.connect(this._onChanged, this);\n    }\n    _onDisposed(sessionConnection) {\n        this._sessionConnections.delete(sessionConnection);\n        // A session termination emission could mean the server session is deleted,\n        // or that the session JS object is disposed and the session still exists on\n        // the server, so we refresh from the server to make sure we reflect the\n        // server state.\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n    _onChanged() {\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n}\nexports.SessionManager = SessionManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst serverconnection_1 = require(\"../serverconnection\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst validate_1 = require(\"./validate\");\n/**\n * The url for the session service.\n */\nexports.SESSION_SERVICE_URL = 'api/sessions';\n/**\n * List the running sessions.\n */\nasync function listRunning(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.SESSION_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n        throw new Error('Invalid Session list');\n    }\n    data.forEach(m => {\n        validate_1.updateLegacySessionModel(m);\n        validate_1.validateModel(m);\n    });\n    return data;\n}\nexports.listRunning = listRunning;\n/**\n * Get a session url.\n */\nfunction getSessionUrl(baseUrl, id) {\n    return coreutils_1.URLExt.join(baseUrl, exports.SESSION_SERVICE_URL, id);\n}\nexports.getSessionUrl = getSessionUrl;\n/**\n * Shut down a session by id.\n */\nasync function shutdownSession(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    var _a;\n    const url = getSessionUrl(settings.baseUrl, id);\n    const init = { method: 'DELETE' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status === 404) {\n        const data = await response.json();\n        const msg = (_a = data.message, (_a !== null && _a !== void 0 ? _a : `The session \"${id}\"\" does not exist on the server`));\n        console.warn(msg);\n    }\n    else if (response.status === 410) {\n        throw new serverconnection_1.ServerConnection.ResponseError(response, 'The kernel was deleted but the session was not');\n    }\n    else if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.shutdownSession = shutdownSession;\n/**\n * Get a full session model from the server by session id string.\n */\nasync function getSessionModel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = getSessionUrl(settings.baseUrl, id);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.updateLegacySessionModel(data);\n    validate_1.validateModel(data);\n    return data;\n}\nexports.getSessionModel = getSessionModel;\n/**\n * Create a new session, or return an existing session if the session path\n * already exists.\n */\nasync function startSession(options, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.SESSION_SERVICE_URL);\n    const init = {\n        method: 'POST',\n        body: JSON.stringify(options)\n    };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 201) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.updateLegacySessionModel(data);\n    validate_1.validateModel(data);\n    return data;\n}\nexports.startSession = startSession;\n/**\n * Send a PATCH to the server, updating the session path or the kernel.\n */\nasync function updateSession(model, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = getSessionUrl(settings.baseUrl, model.id);\n    const init = {\n        method: 'PATCH',\n        body: JSON.stringify(model)\n    };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.updateLegacySessionModel(data);\n    validate_1.validateModel(data);\n    return data;\n}\nexports.updateSession = updateSession;\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=session.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_1 = require(\"../kernel/validate\");\nconst validate_2 = require(\"../validate\");\n/**\n * Validate an `Session.IModel` object.\n */\nfunction validateModel(data) {\n    validate_2.validateProperty(data, 'id', 'string');\n    validate_2.validateProperty(data, 'type', 'string');\n    validate_2.validateProperty(data, 'name', 'string');\n    validate_2.validateProperty(data, 'path', 'string');\n    validate_2.validateProperty(data, 'kernel', 'object');\n    validate_1.validateModel(data.kernel);\n}\nexports.validateModel = validateModel;\n/**\n * Update model from legacy session data.\n */\nfunction updateLegacySessionModel(data) {\n    if (data.path === undefined && data.notebook !== undefined) {\n        data.path = data.notebook.path;\n        data.type = 'notebook';\n        data.name = '';\n    }\n}\nexports.updateLegacySessionModel = updateLegacySessionModel;\n/**\n * Validate an array of `Session.IModel` objects.\n */\nfunction validateModels(models) {\n    if (!Array.isArray(models)) {\n        throw new Error('Invalid session list');\n    }\n    models.forEach(d => validateModel(d));\n}\nexports.validateModels = validateModels;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst statedb_1 = require(\"@jupyterlab/statedb\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab settings service.\n */\nconst SERVICE_SETTINGS_URL = 'api/settings';\n/**\n * The settings API service manager.\n */\nclass SettingManager extends statedb_1.DataConnector {\n    /**\n     * Create a new setting manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        super();\n        this.serverSettings = (_a = options.serverSettings, (_a !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings()));\n    }\n    /**\n     * Fetch a plugin's settings.\n     *\n     * @param id - The plugin's ID.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async fetch(id) {\n        if (!id) {\n            throw new Error('Plugin `id` parameter is required for settings fetch.');\n        }\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n        // Assert what type the server response is returning.\n        return response.json();\n    }\n    /**\n     * Fetch the list of all plugin setting bundles.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async list() {\n        var _a, _b, _c;\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, '');\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            throw new ResponseError(response);\n        }\n        const json = await response.json();\n        const values = (_c = (_b = (_a = json) === null || _a === void 0 ? void 0 : _a['settings']) === null || _b === void 0 ? void 0 : _b.map((plugin) => {\n            plugin.data = { composite: {}, user: {} };\n            return plugin;\n        }), (_c !== null && _c !== void 0 ? _c : []));\n        const ids = values.map(plugin => plugin.id);\n        return { ids, values };\n    }\n    /**\n     * Save a plugin's settings.\n     *\n     * @param id - The plugin's ID.\n     *\n     * @param raw - The user setting values as a raw string of JSON with comments.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async save(id, raw) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const init = { body: raw, method: 'PUT' };\n        const response = await makeRequest(url, init, serverSettings);\n        if (response.status !== 204) {\n            throw new ResponseError(response);\n        }\n    }\n}\nexports.SettingManager = SettingManager;\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the url for a plugin's settings.\n     */\n    function url(base, id) {\n        return coreutils_1.URLExt.join(base, SERVICE_SETTINGS_URL, id);\n    }\n    Private.url = url;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = WebSocket;\n//# sourceMappingURL=ws.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst coreutils_2 = require(\"@lumino/coreutils\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst restapi_1 = require(\"./restapi\");\n/**\n * An implementation of a terminal interface.\n */\nclass TerminalConnection {\n    /**\n     * Construct a new terminal session.\n     */\n    constructor(options) {\n        var _a;\n        /**\n         * Create the terminal websocket connection and add socket status handlers.\n         *\n         * #### Notes\n         * You are responsible for updating the connection status as appropriate.\n         */\n        this._createSocket = () => {\n            this._errorIfDisposed();\n            // Make sure the socket is clear\n            this._clearSocket();\n            // Update the connection status to reflect opening a new connection.\n            this._updateConnectionStatus('connecting');\n            const name = this._name;\n            const settings = this.serverSettings;\n            let url = coreutils_1.URLExt.join(settings.wsUrl, 'terminals', 'websocket', encodeURIComponent(name));\n            this._ws = new settings.WebSocket(url);\n            this._ws.onmessage = this._onWSMessage;\n            this._ws.onclose = this._onWSClose;\n            this._ws.onerror = this._onWSClose;\n        };\n        // Websocket messages events are defined as variables to bind `this`\n        this._onWSMessage = (event) => {\n            if (this._isDisposed) {\n                return;\n            }\n            const data = JSON.parse(event.data);\n            // Handle a disconnect message.\n            if (data[0] === 'disconnect') {\n                this.dispose();\n            }\n            if (this._connectionStatus === 'connecting') {\n                // After reconnection, ignore all messages until a 'setup' message\n                // before we are truly connected. Setting the connection status to\n                // connected only then means that if we do not get a setup message\n                // before our retry timeout, we will delete the websocket and try again.\n                if (data[0] === 'setup') {\n                    this._updateConnectionStatus('connected');\n                }\n                return;\n            }\n            this._messageReceived.emit({\n                type: data[0],\n                content: data.slice(1)\n            });\n        };\n        this._onWSClose = (event) => {\n            console.warn(`Terminal websocket closed: ${event.code}`);\n            if (!this.isDisposed) {\n                this._reconnect();\n            }\n        };\n        this._connectionStatus = 'connecting';\n        this._connectionStatusChanged = new signaling_1.Signal(this);\n        this._isDisposed = false;\n        this._disposed = new signaling_1.Signal(this);\n        this._messageReceived = new signaling_1.Signal(this);\n        this._reconnectTimeout = null;\n        this._ws = null;\n        this._noOp = () => {\n            /* no-op */\n        };\n        this._reconnectLimit = 7;\n        this._reconnectAttempt = 0;\n        this._pendingMessages = [];\n        this._name = options.model.name;\n        this.serverSettings = (_a = options.serverSettings, (_a !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings()));\n        this._createSocket();\n    }\n    /**\n     * A signal emitted when the session is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * A signal emitted when a message is received from the server.\n     */\n    get messageReceived() {\n        return this._messageReceived;\n    }\n    /**\n     * Get the name of the terminal session.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Get the model for the terminal session.\n     */\n    get model() {\n        return { name: this._name };\n    }\n    /**\n     * Test whether the session is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the session.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit();\n        this._updateConnectionStatus('disconnected');\n        this._clearSocket();\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Send a message to the terminal session.\n     *\n     * #### Notes\n     * If the connection is down, the message will be queued for sending when\n     * the connection comes back up.\n     */\n    send(message) {\n        this._sendMessage(message);\n    }\n    /**\n     * Send a message on the websocket, or possibly queue for later sending.\n     *\n     * @param queue - whether to queue the message if it cannot be sent\n     */\n    _sendMessage(message, queue = true) {\n        if (this._isDisposed || !message.content) {\n            return;\n        }\n        if (this.connectionStatus === 'connected' && this._ws) {\n            const msg = [message.type, ...message.content];\n            this._ws.send(JSON.stringify(msg));\n        }\n        else if (queue) {\n            this._pendingMessages.push(message);\n        }\n        else {\n            throw new Error(`Could not send message: ${JSON.stringify(message)}`);\n        }\n    }\n    /**\n     * Send pending messages to the kernel.\n     */\n    _sendPending() {\n        // We check to make sure we are still connected each time. For\n        // example, if a websocket buffer overflows, it may close, so we should\n        // stop sending messages.\n        while (this.connectionStatus === 'connected' &&\n            this._pendingMessages.length > 0) {\n            this._sendMessage(this._pendingMessages[0], false);\n            // We shift the message off the queue after the message is sent so that\n            // if there is an exception, the message is still pending.\n            this._pendingMessages.shift();\n        }\n    }\n    /**\n     * Reconnect to a terminal.\n     *\n     * #### Notes\n     * This may try multiple times to reconnect to a terminal, and will sever\n     * any existing connection.\n     */\n    reconnect() {\n        this._errorIfDisposed();\n        const result = new coreutils_2.PromiseDelegate();\n        // Set up a listener for the connection status changing, which accepts or\n        // rejects after the retries are done.\n        const fulfill = (sender, status) => {\n            if (status === 'connected') {\n                result.resolve();\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n            else if (status === 'disconnected') {\n                result.reject(new Error('Terminal connection disconnected'));\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n        };\n        this.connectionStatusChanged.connect(fulfill, this);\n        // Reset the reconnect limit so we start the connection attempts fresh\n        this._reconnectAttempt = 0;\n        // Start the reconnection process, which will also clear any existing\n        // connection.\n        this._reconnect();\n        // Return the promise that should resolve on connection or reject if the\n        // retries don't work.\n        return result.promise;\n    }\n    /**\n     * Attempt a connection if we have not exhausted connection attempts.\n     */\n    _reconnect() {\n        this._errorIfDisposed();\n        // Clear any existing reconnection attempt\n        clearTimeout(this._reconnectTimeout);\n        // Update the connection status and schedule a possible reconnection.\n        if (this._reconnectAttempt < this._reconnectLimit) {\n            this._updateConnectionStatus('connecting');\n            // The first reconnect attempt should happen immediately, and subsequent\n            // attemps should pick a random number in a growing range so that we\n            // don't overload the server with synchronized reconnection attempts\n            // across multiple kernels.\n            const timeout = Private.getRandomIntInclusive(0, 1e3 * (Math.pow(2, this._reconnectAttempt) - 1));\n            console.error(`Connection lost, reconnecting in ${Math.floor(timeout / 1000)} seconds.`);\n            this._reconnectTimeout = setTimeout(this._createSocket, timeout);\n            this._reconnectAttempt += 1;\n        }\n        else {\n            this._updateConnectionStatus('disconnected');\n        }\n        // Clear the websocket event handlers and the socket itself.\n        this._clearSocket();\n    }\n    /**\n     * Forcefully clear the socket state.\n     *\n     * #### Notes\n     * This will clear all socket state without calling any handlers and will\n     * not update the connection status. If you call this method, you are\n     * responsible for updating the connection status as needed and recreating\n     * the socket if you plan to reconnect.\n     */\n    _clearSocket() {\n        if (this._ws !== null) {\n            // Clear the websocket event handlers and the socket itself.\n            this._ws.onopen = this._noOp;\n            this._ws.onclose = this._noOp;\n            this._ws.onerror = this._noOp;\n            this._ws.onmessage = this._noOp;\n            this._ws.close();\n            this._ws = null;\n        }\n    }\n    /**\n     * Shut down the terminal session.\n     */\n    async shutdown() {\n        await restapi_1.shutdownTerminal(this.name, this.serverSettings);\n        this.dispose();\n    }\n    /**\n     * Clone the current terminal connection.\n     */\n    clone() {\n        return new TerminalConnection(this);\n    }\n    /**\n     * Handle connection status changes.\n     */\n    _updateConnectionStatus(connectionStatus) {\n        if (this._connectionStatus === connectionStatus) {\n            return;\n        }\n        this._connectionStatus = connectionStatus;\n        // If we are not 'connecting', stop any reconnection attempts.\n        if (connectionStatus !== 'connecting') {\n            this._reconnectAttempt = 0;\n            clearTimeout(this._reconnectTimeout);\n        }\n        // Send the pending messages if we just connected.\n        if (connectionStatus === 'connected') {\n            this._sendPending();\n        }\n        // Notify others that the connection status changed.\n        this._connectionStatusChanged.emit(connectionStatus);\n    }\n    /**\n     * Utility function to throw an error if this instance is disposed.\n     */\n    _errorIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error('Terminal connection is disposed');\n        }\n    }\n    /**\n     * A signal emitted when the terminal connection status changes.\n     */\n    get connectionStatusChanged() {\n        return this._connectionStatusChanged;\n    }\n    /**\n     * The current connection status of the terminal connection.\n     */\n    get connectionStatus() {\n        return this._connectionStatus;\n    }\n}\nexports.TerminalConnection = TerminalConnection;\nvar Private;\n(function (Private) {\n    /**\n     * Get the url for a terminal.\n     */\n    function getTermUrl(baseUrl, name) {\n        return coreutils_1.URLExt.join(baseUrl, restapi_1.TERMINAL_SERVICE_URL, encodeURIComponent(name));\n    }\n    Private.getTermUrl = getTermUrl;\n    /**\n     * Get a random integer between min and max, inclusive of both.\n     *\n     * #### Notes\n     * From\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive\n     *\n     * From the MDN page: It might be tempting to use Math.round() to accomplish\n     * that, but doing so would cause your random numbers to follow a non-uniform\n     * distribution, which may not be acceptable for your needs.\n     */\n    function getRandomIntInclusive(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    Private.getRandomIntInclusive = getRandomIntInclusive;\n})(Private || (Private = {}));\n//# sourceMappingURL=default.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Terminal = __importStar(require(\"./terminal\"));\nexports.Terminal = Terminal;\nconst TerminalAPI = __importStar(require(\"./restapi\"));\nexports.TerminalAPI = TerminalAPI;\n__export(require(\"./manager\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst basemanager_1 = require(\"../basemanager\");\nconst restapi_1 = require(\"./restapi\");\nconst default_1 = require(\"./default\");\n/**\n * A terminal session manager.\n */\nclass TerminalManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new terminal manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        // As an optimization, we unwrap the models to just store the names.\n        this._names = [];\n        this._terminalConnections = new Set();\n        this._runningChanged = new signaling_1.Signal(this);\n        this._connectionFailure = new signaling_1.Signal(this);\n        // Check if terminals are available\n        if (!this.isAvailable()) {\n            this._ready = Promise.reject('Terminals unavailable');\n            this._ready.catch(_ => undefined);\n            return;\n        }\n        // Start polling with exponential backoff.\n        this._pollModels = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestRunning(),\n            frequency: {\n                interval: 10 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:TerminalManager#models`,\n            standby: (_a = options.standby, (_a !== null && _a !== void 0 ? _a : 'when-hidden'))\n        });\n        // Initialize internal data.\n        this._ready = (async () => {\n            await this._pollModels.start();\n            await this._pollModels.tick;\n            this._isReady = true;\n        })();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * A signal emitted when the running terminals change.\n     */\n    get runningChanged() {\n        return this._runningChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._names.length = 0;\n        this._terminalConnections.forEach(x => x.dispose());\n        this._pollModels.dispose();\n        super.dispose();\n    }\n    /**\n     * Whether the terminal service is available.\n     */\n    isAvailable() {\n        return restapi_1.isAvailable();\n    }\n    /*\n     * Connect to a running terminal.\n     *\n     * @param name - The name of the target terminal.\n     *\n     * @param options - The options used to connect to the terminal.\n     *\n     * @returns A promise that resolves to the new terminal connection instance.\n     *\n     * #### Notes\n     * The manager `serverSettings` will be used.\n     */\n    connectTo(options) {\n        const terminalConnection = new default_1.TerminalConnection(Object.assign(Object.assign({}, options), { serverSettings: this.serverSettings }));\n        this._onStarted(terminalConnection);\n        if (!this._names.includes(options.model.name)) {\n            // We trust the user to connect to an existing session, but we verify\n            // asynchronously.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n        return terminalConnection;\n    }\n    /**\n     * Create an iterator over the most recent running terminals.\n     *\n     * @returns A new iterator over the running terminals.\n     */\n    running() {\n        return algorithm_1.iter(this._models);\n    }\n    /**\n     * Force a refresh of the running terminals.\n     *\n     * @returns A promise that with the list of running terminals.\n     *\n     * #### Notes\n     * This is intended to be called only in response to a user action,\n     * since the manager maintains its internal state.\n     */\n    async refreshRunning() {\n        await this._pollModels.refresh();\n        await this._pollModels.tick;\n    }\n    /**\n     * Create a new terminal session.\n     *\n     * @returns A promise that resolves with the terminal instance.\n     *\n     * #### Notes\n     * The manager `serverSettings` will be used unless overridden in the\n     * options.\n     */\n    async startNew() {\n        const model = await restapi_1.startNew(this.serverSettings);\n        await this.refreshRunning();\n        return this.connectTo({ model });\n    }\n    /**\n     * Shut down a terminal session by name.\n     */\n    async shutdown(name) {\n        await restapi_1.shutdownTerminal(name, this.serverSettings);\n        await this.refreshRunning();\n    }\n    /**\n     * Shut down all terminal sessions.\n     *\n     * @returns A promise that resolves when all of the sessions are shut down.\n     */\n    async shutdownAll() {\n        // Update the list of models to make sure our list is current.\n        await this.refreshRunning();\n        // Shut down all models.\n        await Promise.all(this._names.map(name => restapi_1.shutdownTerminal(name, this.serverSettings)));\n        // Update the list of models to clear out our state.\n        await this.refreshRunning();\n    }\n    /**\n     * Execute a request to the server to poll running terminals and update state.\n     */\n    async requestRunning() {\n        var _a;\n        let models;\n        try {\n            models = await restapi_1.listRunning(this.serverSettings);\n        }\n        catch (err) {\n            // Check for a network error, or a 503 error, which is returned\n            // by a JupyterHub when a server is shut down.\n            if (err instanceof __1.ServerConnection.NetworkError ||\n                ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 503) {\n                this._connectionFailure.emit(err);\n            }\n            throw err;\n        }\n        if (this.isDisposed) {\n            return;\n        }\n        const names = models.map(({ name }) => name).sort();\n        if (names === this._names) {\n            // Identical models list, so just return\n            return;\n        }\n        this._names = names;\n        this._terminalConnections.forEach(tc => {\n            if (!names.includes(tc.name)) {\n                tc.dispose();\n            }\n        });\n        this._runningChanged.emit(this._models);\n    }\n    /**\n     * Handle a session starting.\n     */\n    _onStarted(terminalConnection) {\n        this._terminalConnections.add(terminalConnection);\n        terminalConnection.disposed.connect(this._onDisposed, this);\n    }\n    /**\n     * Handle a session terminating.\n     */\n    _onDisposed(terminalConnection) {\n        this._terminalConnections.delete(terminalConnection);\n        // Update the running models to make sure we reflect the server state\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n    get _models() {\n        return this._names.map(name => {\n            return { name };\n        });\n    }\n}\nexports.TerminalManager = TerminalManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the terminal service.\n */\nexports.TERMINAL_SERVICE_URL = 'api/terminals';\n/**\n * Whether the terminal service is available.\n */\nfunction isAvailable() {\n    const available = String(coreutils_1.PageConfig.getOption('terminalsAvailable'));\n    return available.toLowerCase() === 'true';\n}\nexports.isAvailable = isAvailable;\n/**\n * Start a new terminal session.\n *\n * @param options - The session options to use.\n *\n * @returns A promise that resolves with the session instance.\n */\nasync function startNew(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    Private.errorIfNotAvailable();\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.TERMINAL_SERVICE_URL);\n    const init = { method: 'POST' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    // TODO: Validate model\n    return data;\n}\nexports.startNew = startNew;\n/**\n * List the running terminal sessions.\n *\n * @param settings - The server settings to use.\n *\n * @returns A promise that resolves with the list of running session models.\n */\nasync function listRunning(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    Private.errorIfNotAvailable();\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.TERMINAL_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n        throw new Error('Invalid terminal list');\n    }\n    // TODO: validate each model\n    return data;\n}\nexports.listRunning = listRunning;\n/**\n * Shut down a terminal session by name.\n *\n * @param name - The name of the target session.\n *\n * @param settings - The server settings to use.\n *\n * @returns A promise that resolves when the session is shut down.\n */\nasync function shutdownTerminal(name, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    var _a;\n    Private.errorIfNotAvailable();\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.TERMINAL_SERVICE_URL, name);\n    const init = { method: 'DELETE' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status === 404) {\n        const data = await response.json();\n        const msg = (_a = data.message, (_a !== null && _a !== void 0 ? _a : `The terminal session \"${name}\"\" does not exist on the server`));\n        console.warn(msg);\n    }\n    else if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.shutdownTerminal = shutdownTerminal;\nvar Private;\n(function (Private) {\n    /**\n     * Throw an error if terminals are not available.\n     */\n    function errorIfNotAvailable() {\n        if (!isAvailable()) {\n            throw new Error('Terminals Unavailable');\n        }\n    }\n    Private.errorIfNotAvailable = errorIfNotAvailable;\n})(Private || (Private = {}));\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst restapi_1 = require(\"./restapi\");\nexports.isAvailable = restapi_1.isAvailable;\n//# sourceMappingURL=terminal.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Validate a property as being on an object, and optionally\n * of a given type and among a given set of values.\n */\nfunction validateProperty(object, name, typeName, values = []) {\n    if (!object.hasOwnProperty(name)) {\n        throw Error(`Missing property '${name}'`);\n    }\n    const value = object[name];\n    if (typeName !== void 0) {\n        let valid = true;\n        switch (typeName) {\n            case 'array':\n                valid = Array.isArray(value);\n                break;\n            case 'object':\n                valid = typeof value !== 'undefined';\n                break;\n            default:\n                valid = typeof value === typeName;\n        }\n        if (!valid) {\n            throw new Error(`Property '${name}' is not of type '${typeName}'`);\n        }\n        if (values.length > 0) {\n            let valid = true;\n            switch (typeName) {\n                case 'string':\n                case 'number':\n                case 'boolean':\n                    valid = values.includes(value);\n                    break;\n                default:\n                    valid = values.findIndex(v => v === value) >= 0;\n                    break;\n            }\n            if (!valid) {\n                throw new Error(`Property '${name}' is not one of the valid values ${JSON.stringify(values)}`);\n            }\n        }\n    }\n}\nexports.validateProperty = validateProperty;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst statedb_1 = require(\"@jupyterlab/statedb\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab workspaces service.\n */\nconst SERVICE_WORKSPACES_URL = 'api/workspaces';\n/**\n * The workspaces API service manager.\n */\nclass WorkspaceManager extends statedb_1.DataConnector {\n    /**\n     * Create a new workspace manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        super();\n        this.serverSettings = (_a = options.serverSettings, (_a !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings()));\n    }\n    /**\n     * Fetch a workspace.\n     *\n     * @param id - The workspaces's ID.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async fetch(id) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n        return response.json();\n    }\n    /**\n     * Fetch the list of workspace IDs that exist on the server.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async list() {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, '');\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n        const result = await response.json();\n        return result.workspaces;\n    }\n    /**\n     * Remove a workspace from the server.\n     *\n     * @param id - The workspaces's ID.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async remove(id) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const init = { method: 'DELETE' };\n        const response = await makeRequest(url, init, serverSettings);\n        if (response.status !== 204) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n    }\n    /**\n     * Save a workspace.\n     *\n     * @param id - The workspace's ID.\n     *\n     * @param workspace - The workspace being saved.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async save(id, workspace) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const init = { body: JSON.stringify(workspace), method: 'PUT' };\n        const response = await makeRequest(url, init, serverSettings);\n        if (response.status !== 204) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n    }\n}\nexports.WorkspaceManager = WorkspaceManager;\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the url for a workspace.\n     */\n    function url(base, id) {\n        return coreutils_1.URLExt.join(base, SERVICE_WORKSPACES_URL, id);\n    }\n    Private.url = url;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["Object","defineProperty","exports","value","signaling_1","serverconnection_1","BaseManager","constructor","options","_a","this","_isDisposed","_disposed","Signal","serverSettings","ServerConnection","makeSettings","disposed","isDisposed","dispose","emit","undefined","clearData","coreutils_1","BuildManager","_url","baseUrl","appUrl","URLExt","join","isAvailable","PageConfig","getOption","toLowerCase","shouldCheck","getStatus","makeRequest","then","response","status","ResponseError","json","data","Error","message","build","method","cancel","__1","ConfigSection","create","section","DefaultConfigSection","load","settings","encodeURIComponent","name","_data","async","newdata","assign","init","body","JSON","stringify","ConfigWithDefaults","_b","_className","_section","_defaults","defaults","className","get","key","_classData","set","d","d2","update","__importStar","mod","__esModule","result","k","hasOwnProperty","call","algorithm_1","validate","Private","Contents","validateContentsModel","contents","validateCheckpointModel","checkpoint","ContentsManager","_additionalDrives","Map","_fileChanged","_defaultDrive","defaultDrive","Drive","fileChanged","connect","_onFileChanged","addDrive","drive","getModelDBFactory","path","_driveForPath","modelDBFactory","localPath","parts","split","firstParts","length","has","PathExt","slice","removeSlash","normalize","resolvePath","root","driveName","resolved","resolve","contentsModel","listing","type","content","each","item","push","_toGlobalPath","getDownloadUrl","newUntitled","globalPath","delete","rename","newPath","drive1","path1","drive2","path2","save","copy","fromFile","toDir","createCheckpoint","listCheckpoints","restoreCheckpoint","checkpointID","deleteCheckpoint","sender","args","newValue","oldValue","_c","_apiEndpoint","apiEndpoint","url","_getUrl","params","objectToQueryString","encodeParts","xsrfTokenMatch","document","cookie","match","fullurl","URL","searchParams","append","toString","Promise","ext","normalizeExtension","oldLocalPath","newLocalPath","copy_from","Array","isArray","i","map","extension","indexOf","validate_1","model","validateProperty","__export","m","p","disposable_1","KernelMessage","CommHandler","DisposableDelegate","target","id","kernel","disposeCb","super","_target","_id","_kernel","commId","targetName","onClose","_onClose","cb","onMsg","_onMsg","open","metadata","buffers","msg","createMessage","msgType","channel","username","session","clientId","comm_id","target_name","sendShellMessage","send","disposeOnDone","close","future","coreutils_2","comm_1","future_1","serialize","kernelspec_1","restapi","RESTARTING_KERNEL_SESSION","KernelConnection","_d","_createSocket","_errorIfDisposed","_clearSocket","_updateConnectionStatus","partialUrl","wsUrl","KERNEL_SERVICE_URL","display","replace","console","debug","_clientId","_ws","WebSocket","binaryType","onmessage","_onWSMessage","onopen","_onWSOpen","onclose","_onWSClose","onerror","evt","deserialize","validateMessage","error","_kernelSession","header","_msgChain","_handleMessage","catch","startsWith","_anyMessage","direction","_reconnect","_name","_status","_connectionStatus","_username","_reconnectLimit","_reconnectAttempt","_reconnectTimeout","_futures","_comms","_targetRegistry","_info","PromiseDelegate","_pendingMessages","_statusChanged","_connectionStatusChanged","_iopubMessage","_unhandledMessage","_displayIdToParentIds","_msgIdToDisplayIds","_noOp","UUID","uuid4","handleComms","requestKernelInfo","statusChanged","connectionStatusChanged","iopubMessage","unhandledMessage","anyMessage","connectionStatus","info","promise","spec","_specPromise","KernelSpecAPI","getSpecs","specs","kernelspecs","clone","_clearKernelState","expectReply","_sendKernelShellControl","KernelShellFutureHandler","sendControlMessage","KernelControlFutureHandler","ctor","_sendMessage","msgId","msg_id","displayIds","forEach","displayId","msgIds","idx","splice","queue","interruptKernel","_updateStatus","restartKernel","reconnect","fulfill","disconnect","reject","shutdownKernel","handleShutdown","reply","handleShellMessage","e","requestComplete","requestInspect","requestHistory","requestExecute","silent","store_history","user_expressions","allow_stdin","stop_on_error","requestDebug","requestIsComplete","requestCommInfo","sendInputReply","createComm","comm","_unregisterComm","hasComm","registerCommTarget","callback","removeCommTarget","registerMessageHook","hook","removeMessageHook","parent_header","parentIds","updateMsg","JSONExt","deepCopy","msg_type","all","parentId","handleMsg","setTimeout","logKernelStatus","_sendPending","shift","clear","_assertCurrentMessage","loadObject","target_module","clearTimeout","handled","isDisplayDataMsg","isUpdateDisplayDataMsg","isExecuteResultMsg","transient","_handleDisplayId","parentHeader","owned","executionState","execution_state","_handleRestart","_handleCommOpen","_handleCommMsg","_handleCommClose","timeout","getRandomIntInclusive","Math","pow","floor","done","moduleName","registry","requirejs","min","max","ceil","random","KernelFutureHandler","_stdin","noOp","_iopub","_reply","_done","_hooks","HookList","_disposeOnDone","_msg","_setFlag","KernelFutureFlag","GotReply","onReply","onIOPub","onStdin","add","remove","_testFlag","IsDone","_handleReply","_handleStdin","_handleIOPub","_replyMsg","GotIdle","_handleDone","stdin","process","iopub","isStatusMsg","flag","defer","requestAnimationFrame","setImmediate","index","_scheduleCompact","_processing","processing","continueHandling","err","_compactScheduled","_compact","numNulls","len","Kernel","KernelAPI","polling_1","basemanager_1","restapi_1","default_1","KernelManager","_isReady","_kernelConnections","Set","_models","_runningChanged","_connectionFailure","_pollModels","Poll","auto","factory","requestRunning","frequency","interval","backoff","standby","_ready","start","tick","isReady","ready","runningChanged","connectionFailure","x","connectTo","kc","kernelConnection","_onStarted","refreshRunning","running","iter","values","refresh","createOptions","connectOptions","startNew","keys","models","listRunning","NetworkError","size","every","existing","_onStatusChanged","_onDisposed","_e","date","Date","toISOString","version","isStreamMsg","isExecuteInputMsg","isErrorMsg","isClearOutputMsg","isDebugEventMsg","isCommOpenMsg","isCommCloseMsg","isCommMsgMsg","isInfoRequestMsg","isExecuteReplyMsg","isDebugRequestMsg","isDebugReplyMsg","isInputRequestMsg","isInputReplyMsg","validateModels","validateModel","warn","getKernelModel","parse","buf","DataView","nbufs","getUint32","offsets","jsonBytes","Uint8Array","TextDecoder","decode","stop","byteLength","deserializeBinary","encoder","TextEncoder","origBuffers","jsonUtf8","encode","buffer","b","ArrayBuffer","msgBuf","view","setUint32","serializeBinary","HEADER_FIELDS","IOPUB_CONTENT_FIELDS","stream","text","display_data","execute_input","code","execution_count","execute_result","ename","evalue","traceback","clear_output","wait","comm_open","comm_msg","comm_close","shutdown_reply","restart","validateHeader","fields","names","validateIOPubContent","KernelSpec","KernelSpecManager","_specs","_specsChanged","requestSpecs","_","_pollSpecs","specsChanged","deepEqual","validateSpecModels","validateSpecModel","env","resources","language","display_name","argv","defaultSpec","default","ks","builder_1","nbconvert_1","contents_1","session_1","setting_1","terminal_1","workspace_1","kernel_1","ServiceManager","normalized","kernelManager","sessions","SessionManager","SettingManager","terminals","TerminalManager","builder","workspaces","WorkspaceManager","nbconvert","NbConvertManager","_onConnectionFailure","readyList","_readyPromise","base","exportList","mimeType","output_mimetype","FETCH","HEADERS","REQUEST","WEBSOCKET","window","fetchMod","g","fetch","Request","Headers","handleRequest","statusText","static","TypeError","original","stack","pageBaseUrl","getBaseUrl","pageWsUrl","getWsUrl","cache","credentials","token","getToken","test","getTime","request","authenticated","headers","xsrfToken","getCookie","SessionConnection","_path","_type","_kernelChanged","_propertyChanged","_connectToKernel","connectToKernel","_kernelConnectionOptions","kernelConnectionOptions","setupKernel","kernelChanged","propertyChanged","oldModel","_handleModelChange","_patch","shutdownSession","onKernelStatus","onKernelConnectionStatus","onUnhandledMessage","onIOPubMessage","onAnyMessage","state","updateSession","Session","SessionAPI","_sessionConnections","_kernelManager","sessionConnection","startSession","matches","filter","shutdown","sc","_onChanged","getSessionUrl","SESSION_SERVICE_URL","updateLegacySessionModel","getSessionModel","validate_2","notebook","statedb_1","DataConnector","plugin","composite","user","ids","raw","TerminalConnection","event","_messageReceived","messageReceived","shutdownTerminal","getTermUrl","TERMINAL_SERVICE_URL","Terminal","TerminalAPI","_names","_terminalConnections","terminalConnection","includes","sort","tc","String","errorIfNotAvailable","object","typeName","valid","findIndex","v","workspace"],"sourceRoot":""}